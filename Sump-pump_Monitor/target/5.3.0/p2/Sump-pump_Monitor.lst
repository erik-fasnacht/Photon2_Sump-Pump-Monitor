
/Users/Erik-Home/Documents/GitHub/Photon2-Project_Erik/Sump-pump_Monitor/target/5.3.0/p2/Sump-pump_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fbae0  085fb088  0000bae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004510  023fbae8  085fb090  0000bae8  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad64  085ff5a0  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000020c  1007addc  1007addc  0002addc  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff618  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 0000099c  085ff61c  085ff61c  0001f61c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f61c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0015e4df  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001768a  00000000  00000000  0017e4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040d53  00000000  00000000  00195b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000030e8  00000000  00000000  001d68bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000bc18  00000000  00000000  001d99a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c1d4  00000000  00000000  001e55bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004dd92  00000000  00000000  00211790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cd8c4  00000000  00000000  0025f522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008c24  00000000  00000000  0032cde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	480e      	ldr	r0, [pc, #56]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb01a:	490f      	ldr	r1, [pc, #60]	; (85fb058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a0e      	ldr	r2, [pc, #56]	; (85fb05c <module_user_pre_init+0x44>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b0d      	ldr	r3, [pc, #52]	; (85fb060 <module_user_pre_init+0x48>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	480d      	ldr	r0, [pc, #52]	; (85fb064 <module_user_pre_init+0x4c>)
 85fb030:	4a0d      	ldr	r2, [pc, #52]	; (85fb068 <module_user_pre_init+0x50>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b0d      	ldr	r3, [pc, #52]	; (85fb06c <module_user_pre_init+0x54>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb03a:	480d      	ldr	r0, [pc, #52]	; (85fb070 <module_user_pre_init+0x58>)
 85fb03c:	490d      	ldr	r1, [pc, #52]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a0d      	ldr	r2, [pc, #52]	; (85fb078 <module_user_pre_init+0x60>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb048:	4b05      	ldr	r3, [pc, #20]	; (85fb060 <module_user_pre_init+0x48>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb04e:	4801      	ldr	r0, [pc, #4]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb050:	bd08      	pop	{r3, pc}
 85fb052:	bf00      	nop
 85fb054:	1007ad64 	.word	0x1007ad64
 85fb058:	085ff5a0 	.word	0x085ff5a0
 85fb05c:	1007addc 	.word	0x1007addc
 85fb060:	10110d2d 	.word	0x10110d2d
 85fb064:	1007addc 	.word	0x1007addc
 85fb068:	1007afe8 	.word	0x1007afe8
 85fb06c:	10110ea1 	.word	0x10110ea1
 85fb070:	023fbae0 	.word	0x023fbae0
 85fb074:	085fb088 	.word	0x085fb088
 85fb078:	023ffff8 	.word	0x023ffff8

085fb07c <dynalib_preinit>:
 85fb07c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fbae8 <__aeabi_drsub>:
 23fbae8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fbaec:	e002      	b.n	23fbaf4 <__adddf3>
 23fbaee:	bf00      	nop

023fbaf0 <__aeabi_dsub>:
 23fbaf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fbaf4 <__adddf3>:
 23fbaf4:	b530      	push	{r4, r5, lr}
 23fbaf6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fbafa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fbafe:	ea94 0f05 	teq	r4, r5
 23fbb02:	bf08      	it	eq
 23fbb04:	ea90 0f02 	teqeq	r0, r2
 23fbb08:	bf1f      	itttt	ne
 23fbb0a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fbb0e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fbb12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fbb16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fbb1a:	f000 80e2 	beq.w	23fbce2 <__adddf3+0x1ee>
 23fbb1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fbb22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fbb26:	bfb8      	it	lt
 23fbb28:	426d      	neglt	r5, r5
 23fbb2a:	dd0c      	ble.n	23fbb46 <__adddf3+0x52>
 23fbb2c:	442c      	add	r4, r5
 23fbb2e:	ea80 0202 	eor.w	r2, r0, r2
 23fbb32:	ea81 0303 	eor.w	r3, r1, r3
 23fbb36:	ea82 0000 	eor.w	r0, r2, r0
 23fbb3a:	ea83 0101 	eor.w	r1, r3, r1
 23fbb3e:	ea80 0202 	eor.w	r2, r0, r2
 23fbb42:	ea81 0303 	eor.w	r3, r1, r3
 23fbb46:	2d36      	cmp	r5, #54	; 0x36
 23fbb48:	bf88      	it	hi
 23fbb4a:	bd30      	pophi	{r4, r5, pc}
 23fbb4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fbb50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fbb54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fbb58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fbb5c:	d002      	beq.n	23fbb64 <__adddf3+0x70>
 23fbb5e:	4240      	negs	r0, r0
 23fbb60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fbb64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fbb68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fbb6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fbb70:	d002      	beq.n	23fbb78 <__adddf3+0x84>
 23fbb72:	4252      	negs	r2, r2
 23fbb74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fbb78:	ea94 0f05 	teq	r4, r5
 23fbb7c:	f000 80a7 	beq.w	23fbcce <__adddf3+0x1da>
 23fbb80:	f1a4 0401 	sub.w	r4, r4, #1
 23fbb84:	f1d5 0e20 	rsbs	lr, r5, #32
 23fbb88:	db0d      	blt.n	23fbba6 <__adddf3+0xb2>
 23fbb8a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fbb8e:	fa22 f205 	lsr.w	r2, r2, r5
 23fbb92:	1880      	adds	r0, r0, r2
 23fbb94:	f141 0100 	adc.w	r1, r1, #0
 23fbb98:	fa03 f20e 	lsl.w	r2, r3, lr
 23fbb9c:	1880      	adds	r0, r0, r2
 23fbb9e:	fa43 f305 	asr.w	r3, r3, r5
 23fbba2:	4159      	adcs	r1, r3
 23fbba4:	e00e      	b.n	23fbbc4 <__adddf3+0xd0>
 23fbba6:	f1a5 0520 	sub.w	r5, r5, #32
 23fbbaa:	f10e 0e20 	add.w	lr, lr, #32
 23fbbae:	2a01      	cmp	r2, #1
 23fbbb0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fbbb4:	bf28      	it	cs
 23fbbb6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fbbba:	fa43 f305 	asr.w	r3, r3, r5
 23fbbbe:	18c0      	adds	r0, r0, r3
 23fbbc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fbbc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fbbc8:	d507      	bpl.n	23fbbda <__adddf3+0xe6>
 23fbbca:	f04f 0e00 	mov.w	lr, #0
 23fbbce:	f1dc 0c00 	rsbs	ip, ip, #0
 23fbbd2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fbbd6:	eb6e 0101 	sbc.w	r1, lr, r1
 23fbbda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fbbde:	d31b      	bcc.n	23fbc18 <__adddf3+0x124>
 23fbbe0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fbbe4:	d30c      	bcc.n	23fbc00 <__adddf3+0x10c>
 23fbbe6:	0849      	lsrs	r1, r1, #1
 23fbbe8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fbbec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fbbf0:	f104 0401 	add.w	r4, r4, #1
 23fbbf4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fbbf8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fbbfc:	f080 809a 	bcs.w	23fbd34 <__adddf3+0x240>
 23fbc00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fbc04:	bf08      	it	eq
 23fbc06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fbc0a:	f150 0000 	adcs.w	r0, r0, #0
 23fbc0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fbc12:	ea41 0105 	orr.w	r1, r1, r5
 23fbc16:	bd30      	pop	{r4, r5, pc}
 23fbc18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fbc1c:	4140      	adcs	r0, r0
 23fbc1e:	eb41 0101 	adc.w	r1, r1, r1
 23fbc22:	3c01      	subs	r4, #1
 23fbc24:	bf28      	it	cs
 23fbc26:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fbc2a:	d2e9      	bcs.n	23fbc00 <__adddf3+0x10c>
 23fbc2c:	f091 0f00 	teq	r1, #0
 23fbc30:	bf04      	itt	eq
 23fbc32:	4601      	moveq	r1, r0
 23fbc34:	2000      	moveq	r0, #0
 23fbc36:	fab1 f381 	clz	r3, r1
 23fbc3a:	bf08      	it	eq
 23fbc3c:	3320      	addeq	r3, #32
 23fbc3e:	f1a3 030b 	sub.w	r3, r3, #11
 23fbc42:	f1b3 0220 	subs.w	r2, r3, #32
 23fbc46:	da0c      	bge.n	23fbc62 <__adddf3+0x16e>
 23fbc48:	320c      	adds	r2, #12
 23fbc4a:	dd08      	ble.n	23fbc5e <__adddf3+0x16a>
 23fbc4c:	f102 0c14 	add.w	ip, r2, #20
 23fbc50:	f1c2 020c 	rsb	r2, r2, #12
 23fbc54:	fa01 f00c 	lsl.w	r0, r1, ip
 23fbc58:	fa21 f102 	lsr.w	r1, r1, r2
 23fbc5c:	e00c      	b.n	23fbc78 <__adddf3+0x184>
 23fbc5e:	f102 0214 	add.w	r2, r2, #20
 23fbc62:	bfd8      	it	le
 23fbc64:	f1c2 0c20 	rsble	ip, r2, #32
 23fbc68:	fa01 f102 	lsl.w	r1, r1, r2
 23fbc6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fbc70:	bfdc      	itt	le
 23fbc72:	ea41 010c 	orrle.w	r1, r1, ip
 23fbc76:	4090      	lslle	r0, r2
 23fbc78:	1ae4      	subs	r4, r4, r3
 23fbc7a:	bfa2      	ittt	ge
 23fbc7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fbc80:	4329      	orrge	r1, r5
 23fbc82:	bd30      	popge	{r4, r5, pc}
 23fbc84:	ea6f 0404 	mvn.w	r4, r4
 23fbc88:	3c1f      	subs	r4, #31
 23fbc8a:	da1c      	bge.n	23fbcc6 <__adddf3+0x1d2>
 23fbc8c:	340c      	adds	r4, #12
 23fbc8e:	dc0e      	bgt.n	23fbcae <__adddf3+0x1ba>
 23fbc90:	f104 0414 	add.w	r4, r4, #20
 23fbc94:	f1c4 0220 	rsb	r2, r4, #32
 23fbc98:	fa20 f004 	lsr.w	r0, r0, r4
 23fbc9c:	fa01 f302 	lsl.w	r3, r1, r2
 23fbca0:	ea40 0003 	orr.w	r0, r0, r3
 23fbca4:	fa21 f304 	lsr.w	r3, r1, r4
 23fbca8:	ea45 0103 	orr.w	r1, r5, r3
 23fbcac:	bd30      	pop	{r4, r5, pc}
 23fbcae:	f1c4 040c 	rsb	r4, r4, #12
 23fbcb2:	f1c4 0220 	rsb	r2, r4, #32
 23fbcb6:	fa20 f002 	lsr.w	r0, r0, r2
 23fbcba:	fa01 f304 	lsl.w	r3, r1, r4
 23fbcbe:	ea40 0003 	orr.w	r0, r0, r3
 23fbcc2:	4629      	mov	r1, r5
 23fbcc4:	bd30      	pop	{r4, r5, pc}
 23fbcc6:	fa21 f004 	lsr.w	r0, r1, r4
 23fbcca:	4629      	mov	r1, r5
 23fbccc:	bd30      	pop	{r4, r5, pc}
 23fbcce:	f094 0f00 	teq	r4, #0
 23fbcd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fbcd6:	bf06      	itte	eq
 23fbcd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fbcdc:	3401      	addeq	r4, #1
 23fbcde:	3d01      	subne	r5, #1
 23fbce0:	e74e      	b.n	23fbb80 <__adddf3+0x8c>
 23fbce2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fbce6:	bf18      	it	ne
 23fbce8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fbcec:	d029      	beq.n	23fbd42 <__adddf3+0x24e>
 23fbcee:	ea94 0f05 	teq	r4, r5
 23fbcf2:	bf08      	it	eq
 23fbcf4:	ea90 0f02 	teqeq	r0, r2
 23fbcf8:	d005      	beq.n	23fbd06 <__adddf3+0x212>
 23fbcfa:	ea54 0c00 	orrs.w	ip, r4, r0
 23fbcfe:	bf04      	itt	eq
 23fbd00:	4619      	moveq	r1, r3
 23fbd02:	4610      	moveq	r0, r2
 23fbd04:	bd30      	pop	{r4, r5, pc}
 23fbd06:	ea91 0f03 	teq	r1, r3
 23fbd0a:	bf1e      	ittt	ne
 23fbd0c:	2100      	movne	r1, #0
 23fbd0e:	2000      	movne	r0, #0
 23fbd10:	bd30      	popne	{r4, r5, pc}
 23fbd12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fbd16:	d105      	bne.n	23fbd24 <__adddf3+0x230>
 23fbd18:	0040      	lsls	r0, r0, #1
 23fbd1a:	4149      	adcs	r1, r1
 23fbd1c:	bf28      	it	cs
 23fbd1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fbd22:	bd30      	pop	{r4, r5, pc}
 23fbd24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fbd28:	bf3c      	itt	cc
 23fbd2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fbd2e:	bd30      	popcc	{r4, r5, pc}
 23fbd30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fbd34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fbd38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fbd3c:	f04f 0000 	mov.w	r0, #0
 23fbd40:	bd30      	pop	{r4, r5, pc}
 23fbd42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fbd46:	bf1a      	itte	ne
 23fbd48:	4619      	movne	r1, r3
 23fbd4a:	4610      	movne	r0, r2
 23fbd4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fbd50:	bf1c      	itt	ne
 23fbd52:	460b      	movne	r3, r1
 23fbd54:	4602      	movne	r2, r0
 23fbd56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fbd5a:	bf06      	itte	eq
 23fbd5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fbd60:	ea91 0f03 	teqeq	r1, r3
 23fbd64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fbd68:	bd30      	pop	{r4, r5, pc}
 23fbd6a:	bf00      	nop

023fbd6c <__aeabi_ui2d>:
 23fbd6c:	f090 0f00 	teq	r0, #0
 23fbd70:	bf04      	itt	eq
 23fbd72:	2100      	moveq	r1, #0
 23fbd74:	4770      	bxeq	lr
 23fbd76:	b530      	push	{r4, r5, lr}
 23fbd78:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fbd7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fbd80:	f04f 0500 	mov.w	r5, #0
 23fbd84:	f04f 0100 	mov.w	r1, #0
 23fbd88:	e750      	b.n	23fbc2c <__adddf3+0x138>
 23fbd8a:	bf00      	nop

023fbd8c <__aeabi_i2d>:
 23fbd8c:	f090 0f00 	teq	r0, #0
 23fbd90:	bf04      	itt	eq
 23fbd92:	2100      	moveq	r1, #0
 23fbd94:	4770      	bxeq	lr
 23fbd96:	b530      	push	{r4, r5, lr}
 23fbd98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fbd9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fbda0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fbda4:	bf48      	it	mi
 23fbda6:	4240      	negmi	r0, r0
 23fbda8:	f04f 0100 	mov.w	r1, #0
 23fbdac:	e73e      	b.n	23fbc2c <__adddf3+0x138>
 23fbdae:	bf00      	nop

023fbdb0 <__aeabi_f2d>:
 23fbdb0:	0042      	lsls	r2, r0, #1
 23fbdb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fbdb6:	ea4f 0131 	mov.w	r1, r1, rrx
 23fbdba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fbdbe:	bf1f      	itttt	ne
 23fbdc0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fbdc4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fbdc8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fbdcc:	4770      	bxne	lr
 23fbdce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fbdd2:	bf08      	it	eq
 23fbdd4:	4770      	bxeq	lr
 23fbdd6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fbdda:	bf04      	itt	eq
 23fbddc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fbde0:	4770      	bxeq	lr
 23fbde2:	b530      	push	{r4, r5, lr}
 23fbde4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fbde8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fbdec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fbdf0:	e71c      	b.n	23fbc2c <__adddf3+0x138>
 23fbdf2:	bf00      	nop

023fbdf4 <__aeabi_ul2d>:
 23fbdf4:	ea50 0201 	orrs.w	r2, r0, r1
 23fbdf8:	bf08      	it	eq
 23fbdfa:	4770      	bxeq	lr
 23fbdfc:	b530      	push	{r4, r5, lr}
 23fbdfe:	f04f 0500 	mov.w	r5, #0
 23fbe02:	e00a      	b.n	23fbe1a <__aeabi_l2d+0x16>

023fbe04 <__aeabi_l2d>:
 23fbe04:	ea50 0201 	orrs.w	r2, r0, r1
 23fbe08:	bf08      	it	eq
 23fbe0a:	4770      	bxeq	lr
 23fbe0c:	b530      	push	{r4, r5, lr}
 23fbe0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fbe12:	d502      	bpl.n	23fbe1a <__aeabi_l2d+0x16>
 23fbe14:	4240      	negs	r0, r0
 23fbe16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fbe1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fbe1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fbe22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fbe26:	f43f aed8 	beq.w	23fbbda <__adddf3+0xe6>
 23fbe2a:	f04f 0203 	mov.w	r2, #3
 23fbe2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fbe32:	bf18      	it	ne
 23fbe34:	3203      	addne	r2, #3
 23fbe36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fbe3a:	bf18      	it	ne
 23fbe3c:	3203      	addne	r2, #3
 23fbe3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fbe42:	f1c2 0320 	rsb	r3, r2, #32
 23fbe46:	fa00 fc03 	lsl.w	ip, r0, r3
 23fbe4a:	fa20 f002 	lsr.w	r0, r0, r2
 23fbe4e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fbe52:	ea40 000e 	orr.w	r0, r0, lr
 23fbe56:	fa21 f102 	lsr.w	r1, r1, r2
 23fbe5a:	4414      	add	r4, r2
 23fbe5c:	e6bd      	b.n	23fbbda <__adddf3+0xe6>
 23fbe5e:	bf00      	nop

023fbe60 <__aeabi_dmul>:
 23fbe60:	b570      	push	{r4, r5, r6, lr}
 23fbe62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fbe66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fbe6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fbe6e:	bf1d      	ittte	ne
 23fbe70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fbe74:	ea94 0f0c 	teqne	r4, ip
 23fbe78:	ea95 0f0c 	teqne	r5, ip
 23fbe7c:	f000 f8de 	bleq	23fc03c <__aeabi_dmul+0x1dc>
 23fbe80:	442c      	add	r4, r5
 23fbe82:	ea81 0603 	eor.w	r6, r1, r3
 23fbe86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fbe8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fbe8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fbe92:	bf18      	it	ne
 23fbe94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fbe98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fbe9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fbea0:	d038      	beq.n	23fbf14 <__aeabi_dmul+0xb4>
 23fbea2:	fba0 ce02 	umull	ip, lr, r0, r2
 23fbea6:	f04f 0500 	mov.w	r5, #0
 23fbeaa:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fbeae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fbeb2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fbeb6:	f04f 0600 	mov.w	r6, #0
 23fbeba:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fbebe:	f09c 0f00 	teq	ip, #0
 23fbec2:	bf18      	it	ne
 23fbec4:	f04e 0e01 	orrne.w	lr, lr, #1
 23fbec8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fbecc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fbed0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fbed4:	d204      	bcs.n	23fbee0 <__aeabi_dmul+0x80>
 23fbed6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fbeda:	416d      	adcs	r5, r5
 23fbedc:	eb46 0606 	adc.w	r6, r6, r6
 23fbee0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fbee4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fbee8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fbeec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fbef0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fbef4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fbef8:	bf88      	it	hi
 23fbefa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fbefe:	d81e      	bhi.n	23fbf3e <__aeabi_dmul+0xde>
 23fbf00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fbf04:	bf08      	it	eq
 23fbf06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fbf0a:	f150 0000 	adcs.w	r0, r0, #0
 23fbf0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fbf12:	bd70      	pop	{r4, r5, r6, pc}
 23fbf14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fbf18:	ea46 0101 	orr.w	r1, r6, r1
 23fbf1c:	ea40 0002 	orr.w	r0, r0, r2
 23fbf20:	ea81 0103 	eor.w	r1, r1, r3
 23fbf24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fbf28:	bfc2      	ittt	gt
 23fbf2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fbf2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fbf32:	bd70      	popgt	{r4, r5, r6, pc}
 23fbf34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fbf38:	f04f 0e00 	mov.w	lr, #0
 23fbf3c:	3c01      	subs	r4, #1
 23fbf3e:	f300 80ab 	bgt.w	23fc098 <__aeabi_dmul+0x238>
 23fbf42:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fbf46:	bfde      	ittt	le
 23fbf48:	2000      	movle	r0, #0
 23fbf4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fbf4e:	bd70      	pople	{r4, r5, r6, pc}
 23fbf50:	f1c4 0400 	rsb	r4, r4, #0
 23fbf54:	3c20      	subs	r4, #32
 23fbf56:	da35      	bge.n	23fbfc4 <__aeabi_dmul+0x164>
 23fbf58:	340c      	adds	r4, #12
 23fbf5a:	dc1b      	bgt.n	23fbf94 <__aeabi_dmul+0x134>
 23fbf5c:	f104 0414 	add.w	r4, r4, #20
 23fbf60:	f1c4 0520 	rsb	r5, r4, #32
 23fbf64:	fa00 f305 	lsl.w	r3, r0, r5
 23fbf68:	fa20 f004 	lsr.w	r0, r0, r4
 23fbf6c:	fa01 f205 	lsl.w	r2, r1, r5
 23fbf70:	ea40 0002 	orr.w	r0, r0, r2
 23fbf74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fbf78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fbf7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fbf80:	fa21 f604 	lsr.w	r6, r1, r4
 23fbf84:	eb42 0106 	adc.w	r1, r2, r6
 23fbf88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fbf8c:	bf08      	it	eq
 23fbf8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fbf92:	bd70      	pop	{r4, r5, r6, pc}
 23fbf94:	f1c4 040c 	rsb	r4, r4, #12
 23fbf98:	f1c4 0520 	rsb	r5, r4, #32
 23fbf9c:	fa00 f304 	lsl.w	r3, r0, r4
 23fbfa0:	fa20 f005 	lsr.w	r0, r0, r5
 23fbfa4:	fa01 f204 	lsl.w	r2, r1, r4
 23fbfa8:	ea40 0002 	orr.w	r0, r0, r2
 23fbfac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fbfb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fbfb4:	f141 0100 	adc.w	r1, r1, #0
 23fbfb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fbfbc:	bf08      	it	eq
 23fbfbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fbfc2:	bd70      	pop	{r4, r5, r6, pc}
 23fbfc4:	f1c4 0520 	rsb	r5, r4, #32
 23fbfc8:	fa00 f205 	lsl.w	r2, r0, r5
 23fbfcc:	ea4e 0e02 	orr.w	lr, lr, r2
 23fbfd0:	fa20 f304 	lsr.w	r3, r0, r4
 23fbfd4:	fa01 f205 	lsl.w	r2, r1, r5
 23fbfd8:	ea43 0302 	orr.w	r3, r3, r2
 23fbfdc:	fa21 f004 	lsr.w	r0, r1, r4
 23fbfe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fbfe4:	fa21 f204 	lsr.w	r2, r1, r4
 23fbfe8:	ea20 0002 	bic.w	r0, r0, r2
 23fbfec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fbff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fbff4:	bf08      	it	eq
 23fbff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fbffa:	bd70      	pop	{r4, r5, r6, pc}
 23fbffc:	f094 0f00 	teq	r4, #0
 23fc000:	d10f      	bne.n	23fc022 <__aeabi_dmul+0x1c2>
 23fc002:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fc006:	0040      	lsls	r0, r0, #1
 23fc008:	eb41 0101 	adc.w	r1, r1, r1
 23fc00c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc010:	bf08      	it	eq
 23fc012:	3c01      	subeq	r4, #1
 23fc014:	d0f7      	beq.n	23fc006 <__aeabi_dmul+0x1a6>
 23fc016:	ea41 0106 	orr.w	r1, r1, r6
 23fc01a:	f095 0f00 	teq	r5, #0
 23fc01e:	bf18      	it	ne
 23fc020:	4770      	bxne	lr
 23fc022:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fc026:	0052      	lsls	r2, r2, #1
 23fc028:	eb43 0303 	adc.w	r3, r3, r3
 23fc02c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fc030:	bf08      	it	eq
 23fc032:	3d01      	subeq	r5, #1
 23fc034:	d0f7      	beq.n	23fc026 <__aeabi_dmul+0x1c6>
 23fc036:	ea43 0306 	orr.w	r3, r3, r6
 23fc03a:	4770      	bx	lr
 23fc03c:	ea94 0f0c 	teq	r4, ip
 23fc040:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fc044:	bf18      	it	ne
 23fc046:	ea95 0f0c 	teqne	r5, ip
 23fc04a:	d00c      	beq.n	23fc066 <__aeabi_dmul+0x206>
 23fc04c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc050:	bf18      	it	ne
 23fc052:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc056:	d1d1      	bne.n	23fbffc <__aeabi_dmul+0x19c>
 23fc058:	ea81 0103 	eor.w	r1, r1, r3
 23fc05c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc060:	f04f 0000 	mov.w	r0, #0
 23fc064:	bd70      	pop	{r4, r5, r6, pc}
 23fc066:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc06a:	bf06      	itte	eq
 23fc06c:	4610      	moveq	r0, r2
 23fc06e:	4619      	moveq	r1, r3
 23fc070:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc074:	d019      	beq.n	23fc0aa <__aeabi_dmul+0x24a>
 23fc076:	ea94 0f0c 	teq	r4, ip
 23fc07a:	d102      	bne.n	23fc082 <__aeabi_dmul+0x222>
 23fc07c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fc080:	d113      	bne.n	23fc0aa <__aeabi_dmul+0x24a>
 23fc082:	ea95 0f0c 	teq	r5, ip
 23fc086:	d105      	bne.n	23fc094 <__aeabi_dmul+0x234>
 23fc088:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fc08c:	bf1c      	itt	ne
 23fc08e:	4610      	movne	r0, r2
 23fc090:	4619      	movne	r1, r3
 23fc092:	d10a      	bne.n	23fc0aa <__aeabi_dmul+0x24a>
 23fc094:	ea81 0103 	eor.w	r1, r1, r3
 23fc098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fc09c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fc0a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fc0a4:	f04f 0000 	mov.w	r0, #0
 23fc0a8:	bd70      	pop	{r4, r5, r6, pc}
 23fc0aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fc0ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fc0b2:	bd70      	pop	{r4, r5, r6, pc}

023fc0b4 <__aeabi_ddiv>:
 23fc0b4:	b570      	push	{r4, r5, r6, lr}
 23fc0b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fc0ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fc0be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fc0c2:	bf1d      	ittte	ne
 23fc0c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fc0c8:	ea94 0f0c 	teqne	r4, ip
 23fc0cc:	ea95 0f0c 	teqne	r5, ip
 23fc0d0:	f000 f8a7 	bleq	23fc222 <__aeabi_ddiv+0x16e>
 23fc0d4:	eba4 0405 	sub.w	r4, r4, r5
 23fc0d8:	ea81 0e03 	eor.w	lr, r1, r3
 23fc0dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fc0e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc0e4:	f000 8088 	beq.w	23fc1f8 <__aeabi_ddiv+0x144>
 23fc0e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc0ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fc0f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fc0f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fc0f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fc0fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fc100:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fc104:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fc108:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fc10c:	429d      	cmp	r5, r3
 23fc10e:	bf08      	it	eq
 23fc110:	4296      	cmpeq	r6, r2
 23fc112:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fc116:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fc11a:	d202      	bcs.n	23fc122 <__aeabi_ddiv+0x6e>
 23fc11c:	085b      	lsrs	r3, r3, #1
 23fc11e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc122:	1ab6      	subs	r6, r6, r2
 23fc124:	eb65 0503 	sbc.w	r5, r5, r3
 23fc128:	085b      	lsrs	r3, r3, #1
 23fc12a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc12e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fc132:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fc136:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc13a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc13e:	bf22      	ittt	cs
 23fc140:	1ab6      	subcs	r6, r6, r2
 23fc142:	4675      	movcs	r5, lr
 23fc144:	ea40 000c 	orrcs.w	r0, r0, ip
 23fc148:	085b      	lsrs	r3, r3, #1
 23fc14a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc14e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc152:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc156:	bf22      	ittt	cs
 23fc158:	1ab6      	subcs	r6, r6, r2
 23fc15a:	4675      	movcs	r5, lr
 23fc15c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fc160:	085b      	lsrs	r3, r3, #1
 23fc162:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc166:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc16a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc16e:	bf22      	ittt	cs
 23fc170:	1ab6      	subcs	r6, r6, r2
 23fc172:	4675      	movcs	r5, lr
 23fc174:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fc178:	085b      	lsrs	r3, r3, #1
 23fc17a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fc17e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fc182:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fc186:	bf22      	ittt	cs
 23fc188:	1ab6      	subcs	r6, r6, r2
 23fc18a:	4675      	movcs	r5, lr
 23fc18c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fc190:	ea55 0e06 	orrs.w	lr, r5, r6
 23fc194:	d018      	beq.n	23fc1c8 <__aeabi_ddiv+0x114>
 23fc196:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fc19a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fc19e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fc1a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fc1a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fc1aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fc1ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fc1b2:	d1c0      	bne.n	23fc136 <__aeabi_ddiv+0x82>
 23fc1b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc1b8:	d10b      	bne.n	23fc1d2 <__aeabi_ddiv+0x11e>
 23fc1ba:	ea41 0100 	orr.w	r1, r1, r0
 23fc1be:	f04f 0000 	mov.w	r0, #0
 23fc1c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fc1c6:	e7b6      	b.n	23fc136 <__aeabi_ddiv+0x82>
 23fc1c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fc1cc:	bf04      	itt	eq
 23fc1ce:	4301      	orreq	r1, r0
 23fc1d0:	2000      	moveq	r0, #0
 23fc1d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fc1d6:	bf88      	it	hi
 23fc1d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fc1dc:	f63f aeaf 	bhi.w	23fbf3e <__aeabi_dmul+0xde>
 23fc1e0:	ebb5 0c03 	subs.w	ip, r5, r3
 23fc1e4:	bf04      	itt	eq
 23fc1e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fc1ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc1ee:	f150 0000 	adcs.w	r0, r0, #0
 23fc1f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc1f6:	bd70      	pop	{r4, r5, r6, pc}
 23fc1f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fc1fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fc200:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fc204:	bfc2      	ittt	gt
 23fc206:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fc20a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fc20e:	bd70      	popgt	{r4, r5, r6, pc}
 23fc210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc214:	f04f 0e00 	mov.w	lr, #0
 23fc218:	3c01      	subs	r4, #1
 23fc21a:	e690      	b.n	23fbf3e <__aeabi_dmul+0xde>
 23fc21c:	ea45 0e06 	orr.w	lr, r5, r6
 23fc220:	e68d      	b.n	23fbf3e <__aeabi_dmul+0xde>
 23fc222:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fc226:	ea94 0f0c 	teq	r4, ip
 23fc22a:	bf08      	it	eq
 23fc22c:	ea95 0f0c 	teqeq	r5, ip
 23fc230:	f43f af3b 	beq.w	23fc0aa <__aeabi_dmul+0x24a>
 23fc234:	ea94 0f0c 	teq	r4, ip
 23fc238:	d10a      	bne.n	23fc250 <__aeabi_ddiv+0x19c>
 23fc23a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fc23e:	f47f af34 	bne.w	23fc0aa <__aeabi_dmul+0x24a>
 23fc242:	ea95 0f0c 	teq	r5, ip
 23fc246:	f47f af25 	bne.w	23fc094 <__aeabi_dmul+0x234>
 23fc24a:	4610      	mov	r0, r2
 23fc24c:	4619      	mov	r1, r3
 23fc24e:	e72c      	b.n	23fc0aa <__aeabi_dmul+0x24a>
 23fc250:	ea95 0f0c 	teq	r5, ip
 23fc254:	d106      	bne.n	23fc264 <__aeabi_ddiv+0x1b0>
 23fc256:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fc25a:	f43f aefd 	beq.w	23fc058 <__aeabi_dmul+0x1f8>
 23fc25e:	4610      	mov	r0, r2
 23fc260:	4619      	mov	r1, r3
 23fc262:	e722      	b.n	23fc0aa <__aeabi_dmul+0x24a>
 23fc264:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fc268:	bf18      	it	ne
 23fc26a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fc26e:	f47f aec5 	bne.w	23fbffc <__aeabi_dmul+0x19c>
 23fc272:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fc276:	f47f af0d 	bne.w	23fc094 <__aeabi_dmul+0x234>
 23fc27a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fc27e:	f47f aeeb 	bne.w	23fc058 <__aeabi_dmul+0x1f8>
 23fc282:	e712      	b.n	23fc0aa <__aeabi_dmul+0x24a>

023fc284 <__aeabi_d2f>:
 23fc284:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fc288:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fc28c:	bf24      	itt	cs
 23fc28e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fc292:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fc296:	d90d      	bls.n	23fc2b4 <__aeabi_d2f+0x30>
 23fc298:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fc29c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fc2a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fc2a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fc2a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fc2ac:	bf08      	it	eq
 23fc2ae:	f020 0001 	biceq.w	r0, r0, #1
 23fc2b2:	4770      	bx	lr
 23fc2b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fc2b8:	d121      	bne.n	23fc2fe <__aeabi_d2f+0x7a>
 23fc2ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fc2be:	bfbc      	itt	lt
 23fc2c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fc2c4:	4770      	bxlt	lr
 23fc2c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc2ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fc2ce:	f1c2 0218 	rsb	r2, r2, #24
 23fc2d2:	f1c2 0c20 	rsb	ip, r2, #32
 23fc2d6:	fa10 f30c 	lsls.w	r3, r0, ip
 23fc2da:	fa20 f002 	lsr.w	r0, r0, r2
 23fc2de:	bf18      	it	ne
 23fc2e0:	f040 0001 	orrne.w	r0, r0, #1
 23fc2e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fc2e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fc2ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fc2f0:	ea40 000c 	orr.w	r0, r0, ip
 23fc2f4:	fa23 f302 	lsr.w	r3, r3, r2
 23fc2f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fc2fc:	e7cc      	b.n	23fc298 <__aeabi_d2f+0x14>
 23fc2fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fc302:	d107      	bne.n	23fc314 <__aeabi_d2f+0x90>
 23fc304:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fc308:	bf1e      	ittt	ne
 23fc30a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fc30e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fc312:	4770      	bxne	lr
 23fc314:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fc318:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fc31c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fc320:	4770      	bx	lr
 23fc322:	bf00      	nop

023fc324 <strcmp>:
 23fc324:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fc328:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fc32c:	2a01      	cmp	r2, #1
 23fc32e:	bf28      	it	cs
 23fc330:	429a      	cmpcs	r2, r3
 23fc332:	d0f7      	beq.n	23fc324 <strcmp>
 23fc334:	1ad0      	subs	r0, r2, r3
 23fc336:	4770      	bx	lr

023fc338 <strlen>:
 23fc338:	4603      	mov	r3, r0
 23fc33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc33e:	2a00      	cmp	r2, #0
 23fc340:	d1fb      	bne.n	23fc33a <strlen+0x2>
 23fc342:	1a18      	subs	r0, r3, r0
 23fc344:	3801      	subs	r0, #1
 23fc346:	4770      	bx	lr

023fc348 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fc348:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fc34a:	f003 f8ad 	bl	23ff4a8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc34e:	2500      	movs	r5, #0
 23fc350:	4e05      	ldr	r6, [pc, #20]	; (23fc368 <module_user_init+0x20>)
 23fc352:	4c06      	ldr	r4, [pc, #24]	; (23fc36c <module_user_init+0x24>)
 23fc354:	1ba4      	subs	r4, r4, r6
 23fc356:	08a4      	lsrs	r4, r4, #2
 23fc358:	42ac      	cmp	r4, r5
 23fc35a:	d100      	bne.n	23fc35e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fc35c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fc35e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fc362:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc364:	3501      	adds	r5, #1
 23fc366:	e7f7      	b.n	23fc358 <module_user_init+0x10>
 23fc368:	023fffd4 	.word	0x023fffd4
 23fc36c:	023ffff8 	.word	0x023ffff8

023fc370 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fc370:	f000 b860 	b.w	23fc434 <setup>

023fc374 <module_user_loop>:
}

void module_user_loop() {
 23fc374:	b508      	push	{r3, lr}
    loop();
 23fc376:	f000 f913 	bl	23fc5a0 <loop>
    _post_loop();
}
 23fc37a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fc37e:	f003 b84b 	b.w	23ff418 <_post_loop>

023fc382 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fc382:	f001 b929 	b.w	23fd5d8 <malloc>

023fc386 <_Znaj>:
 23fc386:	f001 b927 	b.w	23fd5d8 <malloc>

023fc38a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fc38a:	f001 b933 	b.w	23fd5f4 <free>
	...

023fc390 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc390:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fc392:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc394:	4a02      	ldr	r2, [pc, #8]	; (23fc3a0 <__cxa_pure_virtual+0x10>)
 23fc396:	4903      	ldr	r1, [pc, #12]	; (23fc3a4 <__cxa_pure_virtual+0x14>)
 23fc398:	f000 ffdc 	bl	23fd354 <panic_>
  while (1);
 23fc39c:	e7fe      	b.n	23fc39c <__cxa_pure_virtual+0xc>
 23fc39e:	bf00      	nop
 23fc3a0:	023fce15 	.word	0x023fce15
 23fc3a4:	023ffb44 	.word	0x023ffb44

023fc3a8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fc3a8:	7800      	ldrb	r0, [r0, #0]
 23fc3aa:	fab0 f080 	clz	r0, r0
 23fc3ae:	0940      	lsrs	r0, r0, #5
 23fc3b0:	4770      	bx	lr

023fc3b2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fc3b2:	2301      	movs	r3, #1
 23fc3b4:	7003      	strb	r3, [r0, #0]
 23fc3b6:	4770      	bx	lr

023fc3b8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fc3b8:	4770      	bx	lr
	...

023fc3bc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fc3bc:	b510      	push	{r4, lr}
 23fc3be:	4604      	mov	r4, r0
 23fc3c0:	4b09      	ldr	r3, [pc, #36]	; (23fc3e8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fc3c2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fc3c4:	f001 fe5a 	bl	23fe07c <_ZN5spark10LogManager8instanceEv>
 23fc3c8:	4621      	mov	r1, r4
 23fc3ca:	f002 f891 	bl	23fe4f0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fc3ce:	f002 ff93 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23fc3d2:	f002 ff85 	bl	23ff2e0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fc3d6:	4620      	mov	r0, r4
 23fc3d8:	4b04      	ldr	r3, [pc, #16]	; (23fc3ec <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fc3da:	f840 3b04 	str.w	r3, [r0], #4
 23fc3de:	f001 ff23 	bl	23fe228 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fc3e2:	4620      	mov	r0, r4
 23fc3e4:	bd10      	pop	{r4, pc}
 23fc3e6:	bf00      	nop
 23fc3e8:	023ffbe4 	.word	0x023ffbe4
 23fc3ec:	023ffbcc 	.word	0x023ffbcc

023fc3f0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fc3f0:	b510      	push	{r4, lr}
 23fc3f2:	4604      	mov	r4, r0
    }
 23fc3f4:	f7ff ffe2 	bl	23fc3bc <_ZN5spark16SerialLogHandlerD1Ev>
 23fc3f8:	4620      	mov	r0, r4
 23fc3fa:	2124      	movs	r1, #36	; 0x24
 23fc3fc:	f7ff ffc5 	bl	23fc38a <_ZdlPvj>
 23fc400:	4620      	mov	r0, r4
 23fc402:	bd10      	pop	{r4, pc}

023fc404 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
 23fc404:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fc406:	f04f 0c20 	mov.w	ip, #32
 23fc40a:	2300      	movs	r3, #0
inline void spark::Logger::trace(const char *fmt, ...) const {
 23fc40c:	b500      	push	{lr}
 23fc40e:	b08c      	sub	sp, #48	; 0x30
 23fc410:	aa0d      	add	r2, sp, #52	; 0x34
 23fc412:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fc416:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc41a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fc41e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc420:	6801      	ldr	r1, [r0, #0]
 23fc422:	aa04      	add	r2, sp, #16
 23fc424:	2001      	movs	r0, #1
 23fc426:	f000 ffa3 	bl	23fd370 <log_message_v>
}
 23fc42a:	b00c      	add	sp, #48	; 0x30
 23fc42c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc430:	b003      	add	sp, #12
 23fc432:	4770      	bx	lr

023fc434 <setup>:
static uint8_t pumpStatus;    //pump status variable


// setup() runs once, when the device is first turned on.
void setup() 
{
 23fc434:	b510      	push	{r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fc436:	2400      	movs	r4, #0
 23fc438:	b088      	sub	sp, #32
  Serial.begin(100);
 23fc43a:	f002 ff5d 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23fc43e:	2164      	movs	r1, #100	; 0x64
 23fc440:	f002 ff4a 	bl	23ff2d8 <_ZN9USBSerial5beginEl>
  //Serial.begin();

  Particle.disconnect();
 23fc444:	a804      	add	r0, sp, #16
 23fc446:	e9cd 4404 	strd	r4, r4, [sp, #16]
        bool clearSession) :
 23fc44a:	f8ad 4018 	strh.w	r4, [sp, #24]
 23fc44e:	f001 f95f 	bl	23fd710 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fc452:	4811      	ldr	r0, [pc, #68]	; (23fc498 <setup+0x64>)
 23fc454:	4622      	mov	r2, r4
 23fc456:	4623      	mov	r3, r4
 23fc458:	4621      	mov	r1, r4
 23fc45a:	6840      	ldr	r0, [r0, #4]
 23fc45c:	f001 f85a 	bl	23fd514 <network_off>
  WiFi.off();

  //from ac current
  accurrent_cfg_t accurrent_cfg;
  accurrent_cfg_setup( &accurrent_cfg ); 
 23fc460:	a804      	add	r0, sp, #16
 23fc462:	f000 f97b 	bl	23fc75c <accurrent_cfg_setup>
  ACCURRENT_MAP_MIKROBUS( accurrent_cfg, MIKROBUS_1 );
 23fc466:	4b0d      	ldr	r3, [pc, #52]	; (23fc49c <setup+0x68>)
  accurrent_init( &accurrent, &accurrent_cfg );
 23fc468:	a904      	add	r1, sp, #16
  ACCURRENT_MAP_MIKROBUS( accurrent_cfg, MIKROBUS_1 );
 23fc46a:	9304      	str	r3, [sp, #16]
 23fc46c:	230b      	movs	r3, #11
  accurrent_init( &accurrent, &accurrent_cfg );
 23fc46e:	480c      	ldr	r0, [pc, #48]	; (23fc4a0 <setup+0x6c>)
  ACCURRENT_MAP_MIKROBUS( accurrent_cfg, MIKROBUS_1 );
 23fc470:	f88d 3014 	strb.w	r3, [sp, #20]
  accurrent_init( &accurrent, &accurrent_cfg );
 23fc474:	f000 f97e 	bl	23fc774 <accurrent_init>

  //from temphum13
  temphum13_cfg_t temphum13_cfg;
  temphum13_cfg_setup( &temphum13_cfg );
 23fc478:	a801      	add	r0, sp, #4
 23fc47a:	f000 fbb4 	bl	23fcbe6 <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fc47e:	2301      	movs	r3, #1
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fc480:	4c08      	ldr	r4, [pc, #32]	; (23fc4a4 <setup+0x70>)
 23fc482:	a901      	add	r1, sp, #4
 23fc484:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fc486:	f8ad 3004 	strh.w	r3, [sp, #4]
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fc48a:	f000 fbb4 	bl	23fcbf6 <temphum13_init>
  temphum13_default_cfg( &temphum13 );
 23fc48e:	4620      	mov	r0, r4
 23fc490:	f000 fc5e 	bl	23fcd50 <temphum13_default_cfg>
  
}
 23fc494:	b008      	add	sp, #32
 23fc496:	bd10      	pop	{r4, pc}
 23fc498:	1007aee0 	.word	0x1007aee0
 23fc49c:	12110f10 	.word	0x12110f10
 23fc4a0:	1007adf4 	.word	0x1007adf4
 23fc4a4:	1007ae08 	.word	0x1007ae08

023fc4a8 <_Z18ACcurrent_functionv>:
    }
}

//accurrent function
void ACcurrent_function()
{
 23fc4a8:	b508      	push	{r3, lr}
  float ac_current;
  ac_current = accurrent_get_ma( &accurrent );
 23fc4aa:	4807      	ldr	r0, [pc, #28]	; (23fc4c8 <_Z18ACcurrent_functionv+0x20>)
 23fc4ac:	f000 f9a0 	bl	23fc7f0 <accurrent_get_ma>
 23fc4b0:	ee10 0a10 	vmov	r0, s0

  //debug message
  Log.trace("Current value A : %06.4f \n", ac_current);
 23fc4b4:	f7ff fc7c 	bl	23fbdb0 <__aeabi_f2d>
 23fc4b8:	4602      	mov	r2, r0
 23fc4ba:	460b      	mov	r3, r1
 23fc4bc:	4803      	ldr	r0, [pc, #12]	; (23fc4cc <_Z18ACcurrent_functionv+0x24>)
 23fc4be:	4904      	ldr	r1, [pc, #16]	; (23fc4d0 <_Z18ACcurrent_functionv+0x28>)
 23fc4c0:	f7ff ffa0 	bl	23fc404 <_ZNK5spark6Logger5traceEPKcz>

  Serial.print("Current value = ");
	Serial.print(ac_current, DEC); 
	Serial.println("");
*/
}
 23fc4c4:	bd08      	pop	{r3, pc}
 23fc4c6:	bf00      	nop
 23fc4c8:	1007adf4 	.word	0x1007adf4
 23fc4cc:	1007ae70 	.word	0x1007ae70
 23fc4d0:	023ffb59 	.word	0x023ffb59
 23fc4d4:	00000000 	.word	0x00000000

023fc4d8 <_Z18temphum13_functionv>:

//temphum13 function
uint8_t temphum13_function()
{
 23fc4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //local variables
  static float tempC;
  
  tempC = temphum13_get_temperature( &temphum13 );
 23fc4da:	4827      	ldr	r0, [pc, #156]	; (23fc578 <_Z18temphum13_functionv+0xa0>)
 23fc4dc:	f000 fbc8 	bl	23fcc70 <temphum13_get_temperature>
 23fc4e0:	4c26      	ldr	r4, [pc, #152]	; (23fc57c <_Z18temphum13_functionv+0xa4>)
  humidity = temphum13_get_humidity( &temphum13 );
 23fc4e2:	4825      	ldr	r0, [pc, #148]	; (23fc578 <_Z18temphum13_functionv+0xa0>)
  tempC = temphum13_get_temperature( &temphum13 );
 23fc4e4:	ed84 0a00 	vstr	s0, [r4]
  humidity = temphum13_get_humidity( &temphum13 );
 23fc4e8:	f000 fc00 	bl	23fccec <temphum13_get_humidity>
    
  if ((tempC != 65536.0) && (humidity != 65536.0))    //if values return don't equal 0xFF, IE I2C bus is idle
 23fc4ec:	edd4 7a00 	vldr	s15, [r4]
 23fc4f0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 23fc580 <_Z18temphum13_functionv+0xa8>
 23fc4f4:	eef4 7a47 	vcmp.f32	s15, s14
 23fc4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  humidity = temphum13_get_humidity( &temphum13 );
 23fc4fc:	4e21      	ldr	r6, [pc, #132]	; (23fc584 <_Z18temphum13_functionv+0xac>)
 23fc4fe:	ed86 0a00 	vstr	s0, [r6]
  if ((tempC != 65536.0) && (humidity != 65536.0))    //if values return don't equal 0xFF, IE I2C bus is idle
 23fc502:	d031      	beq.n	23fc568 <_Z18temphum13_functionv+0x90>
 23fc504:	eeb4 0a47 	vcmp.f32	s0, s14
 23fc508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fc50c:	d02c      	beq.n	23fc568 <_Z18temphum13_functionv+0x90>
  {
    //set new value to global value
    temperature = (tempC * 1.8) + 32;		//convert celsuis to fahrenheit
 23fc50e:	ee17 0a90 	vmov	r0, s15
 23fc512:	f7ff fc4d 	bl	23fbdb0 <__aeabi_f2d>
 23fc516:	a316      	add	r3, pc, #88	; (adr r3, 23fc570 <_Z18temphum13_functionv+0x98>)
 23fc518:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc51c:	4604      	mov	r4, r0
 23fc51e:	460d      	mov	r5, r1
 23fc520:	f7ff fc9e 	bl	23fbe60 <__aeabi_dmul>
 23fc524:	2200      	movs	r2, #0
 23fc526:	4b18      	ldr	r3, [pc, #96]	; (23fc588 <_Z18temphum13_functionv+0xb0>)
 23fc528:	f7ff fae4 	bl	23fbaf4 <__adddf3>
 23fc52c:	f7ff feaa 	bl	23fc284 <__aeabi_d2f>
 23fc530:	4f16      	ldr	r7, [pc, #88]	; (23fc58c <_Z18temphum13_functionv+0xb4>)

    //debug messages
    Log.trace("Temperature °C : %.2f \n", tempC);
 23fc532:	4622      	mov	r2, r4
 23fc534:	462b      	mov	r3, r5
 23fc536:	4916      	ldr	r1, [pc, #88]	; (23fc590 <_Z18temphum13_functionv+0xb8>)
    temperature = (tempC * 1.8) + 32;		//convert celsuis to fahrenheit
 23fc538:	6038      	str	r0, [r7, #0]
    Log.trace("Temperature °C : %.2f \n", tempC);
 23fc53a:	4816      	ldr	r0, [pc, #88]	; (23fc594 <_Z18temphum13_functionv+0xbc>)
 23fc53c:	f7ff ff62 	bl	23fc404 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Temperature °F : %.2f \n", temperature);
 23fc540:	6838      	ldr	r0, [r7, #0]
 23fc542:	f7ff fc35 	bl	23fbdb0 <__aeabi_f2d>
 23fc546:	4602      	mov	r2, r0
 23fc548:	460b      	mov	r3, r1
 23fc54a:	4812      	ldr	r0, [pc, #72]	; (23fc594 <_Z18temphum13_functionv+0xbc>)
 23fc54c:	4912      	ldr	r1, [pc, #72]	; (23fc598 <_Z18temphum13_functionv+0xc0>)
 23fc54e:	f7ff ff59 	bl	23fc404 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Relative Humidity : %.2f \n", humidity);
 23fc552:	6830      	ldr	r0, [r6, #0]
 23fc554:	f7ff fc2c 	bl	23fbdb0 <__aeabi_f2d>
 23fc558:	4602      	mov	r2, r0
 23fc55a:	460b      	mov	r3, r1
 23fc55c:	480d      	ldr	r0, [pc, #52]	; (23fc594 <_Z18temphum13_functionv+0xbc>)
 23fc55e:	490f      	ldr	r1, [pc, #60]	; (23fc59c <_Z18temphum13_functionv+0xc4>)
 23fc560:	f7ff ff50 	bl	23fc404 <_ZNK5spark6Logger5traceEPKcz>
    Serial.print("Relative Humidity = ");
	  Serial.print(humidity, DEC); 
	  Serial.println("");
*/

    return TRUE;    //return success
 23fc564:	2001      	movs	r0, #1
  }

  return FALSE;   //return fail
 23fc566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return FALSE;   //return fail
 23fc568:	2000      	movs	r0, #0
 23fc56a:	e7fc      	b.n	23fc566 <_Z18temphum13_functionv+0x8e>
 23fc56c:	f3af 8000 	nop.w
 23fc570:	cccccccd 	.word	0xcccccccd
 23fc574:	3ffccccc 	.word	0x3ffccccc
 23fc578:	1007ae08 	.word	0x1007ae08
 23fc57c:	1007ae18 	.word	0x1007ae18
 23fc580:	47800000 	.word	0x47800000
 23fc584:	1007adf0 	.word	0x1007adf0
 23fc588:	40400000 	.word	0x40400000
 23fc58c:	1007ade8 	.word	0x1007ade8
 23fc590:	023ffb74 	.word	0x023ffb74
 23fc594:	1007ae70 	.word	0x1007ae70
 23fc598:	023ffb8d 	.word	0x023ffb8d
 23fc59c:	023ffba6 	.word	0x023ffba6

023fc5a0 <loop>:
{
 23fc5a0:	b508      	push	{r3, lr}
  ACcurrent_function();
 23fc5a2:	f7ff ff81 	bl	23fc4a8 <_Z18ACcurrent_functionv>
  delay(1000);
 23fc5a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fc5aa:	f001 f877 	bl	23fd69c <delay>
  temphum13_function();
 23fc5ae:	f7ff ff93 	bl	23fc4d8 <_Z18temphum13_functionv>
}
 23fc5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000);
 23fc5b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fc5ba:	f001 b86f 	b.w	23fd69c <delay>

023fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc5be:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc5c0:	2614      	movs	r6, #20
 23fc5c2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc5c6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc5c8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc5cc:	42ae      	cmp	r6, r5
 23fc5ce:	d004      	beq.n	23fc5da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fc5d0:	4628      	mov	r0, r5
 23fc5d2:	f002 fd26 	bl	23ff022 <_ZN6StringD1Ev>
 23fc5d6:	3514      	adds	r5, #20
 23fc5d8:	e7f8      	b.n	23fc5cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc5da:	6820      	ldr	r0, [r4, #0]
 23fc5dc:	f001 f80a 	bl	23fd5f4 <free>
    AllocatorT::free(data_);
}
 23fc5e0:	4620      	mov	r0, r4
 23fc5e2:	bd70      	pop	{r4, r5, r6, pc}

023fc5e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fc5e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc5e8:	4604      	mov	r4, r0
 23fc5ea:	460d      	mov	r5, r1
 23fc5ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc5ee:	d916      	bls.n	23fc61e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fc5f0:	4290      	cmp	r0, r2
 23fc5f2:	d215      	bcs.n	23fc620 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fc5f4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc5f8:	1a75      	subs	r5, r6, r1
 23fc5fa:	f1a1 0714 	sub.w	r7, r1, #20
 23fc5fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc600:	42b7      	cmp	r7, r6
 23fc602:	d01c      	beq.n	23fc63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fc604:	b12c      	cbz	r4, 23fc612 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fc606:	4631      	mov	r1, r6
 23fc608:	4620      	mov	r0, r4
 23fc60a:	f002 fd72 	bl	23ff0f2 <_ZN6StringC1EOS_>
 23fc60e:	7c33      	ldrb	r3, [r6, #16]
 23fc610:	7423      	strb	r3, [r4, #16]
 23fc612:	4630      	mov	r0, r6
 23fc614:	f002 fd05 	bl	23ff022 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc618:	3e14      	subs	r6, #20
 23fc61a:	3c14      	subs	r4, #20
 23fc61c:	e7f0      	b.n	23fc600 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fc61e:	d00e      	beq.n	23fc63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fc620:	42b5      	cmp	r5, r6
 23fc622:	d00c      	beq.n	23fc63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fc624:	b12c      	cbz	r4, 23fc632 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fc626:	4629      	mov	r1, r5
 23fc628:	4620      	mov	r0, r4
 23fc62a:	f002 fd62 	bl	23ff0f2 <_ZN6StringC1EOS_>
 23fc62e:	7c2b      	ldrb	r3, [r5, #16]
 23fc630:	7423      	strb	r3, [r4, #16]
 23fc632:	4628      	mov	r0, r5
 23fc634:	f002 fcf5 	bl	23ff022 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc638:	3514      	adds	r5, #20
 23fc63a:	3414      	adds	r4, #20
 23fc63c:	e7f0      	b.n	23fc620 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fc63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc640:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc646:	e9c0 3300 	strd	r3, r3, [r0]
 23fc64a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc64c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc64e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc650:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc652:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc654:	dd24      	ble.n	23fc6a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc656:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fc65a:	fb08 f007 	mul.w	r0, r8, r7
 23fc65e:	f000 ffbb 	bl	23fd5d8 <malloc>
            if (!d) {
 23fc662:	4605      	mov	r5, r0
 23fc664:	b1e0      	cbz	r0, 23fc6a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fc666:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc66a:	fb08 1202 	mla	r2, r8, r2, r1
 23fc66e:	f7ff ffb9 	bl	23fc5e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fc672:	6820      	ldr	r0, [r4, #0]
 23fc674:	f000 ffbe 	bl	23fd5f4 <free>
        data_ = d;
 23fc678:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc67a:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc67c:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fc680:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fc684:	45b8      	cmp	r8, r7
 23fc686:	d009      	beq.n	23fc69c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fc688:	4639      	mov	r1, r7
 23fc68a:	4628      	mov	r0, r5
 23fc68c:	f002 fd4b 	bl	23ff126 <_ZN6StringC1ERKS_>
 23fc690:	7c3b      	ldrb	r3, [r7, #16]
 23fc692:	3514      	adds	r5, #20
 23fc694:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fc698:	3714      	adds	r7, #20
 23fc69a:	e7f3      	b.n	23fc684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fc69c:	6873      	ldr	r3, [r6, #4]
 23fc69e:	6063      	str	r3, [r4, #4]
}
 23fc6a0:	4620      	mov	r0, r4
 23fc6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fc6a8 <_GLOBAL__sub_I_SystemMode>:
 23fc6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fc6aa:	2701      	movs	r7, #1

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fc6ac:	2400      	movs	r4, #0
 23fc6ae:	4b24      	ldr	r3, [pc, #144]	; (23fc740 <_GLOBAL__sub_I_SystemMode+0x98>)
    SleepResult() {}
 23fc6b0:	4a24      	ldr	r2, [pc, #144]	; (23fc744 <_GLOBAL__sub_I_SystemMode+0x9c>)
 23fc6b2:	701f      	strb	r7, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 23fc6b4:	4b24      	ldr	r3, [pc, #144]	; (23fc748 <_GLOBAL__sub_I_SystemMode+0xa0>)
 23fc6b6:	b08d      	sub	sp, #52	; 0x34
    SleepResult() {}
 23fc6b8:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23fc6ba:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fc6be:	2002      	movs	r0, #2
 23fc6c0:	f000 fe80 	bl	23fd3c4 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fc6c4:	4621      	mov	r1, r4
 23fc6c6:	4638      	mov	r0, r7
 23fc6c8:	f000 fe98 	bl	23fd3fc <system_thread_set_state>
        capacity_(0) {
 23fc6cc:	e9cd 4400 	strd	r4, r4, [sp]
 23fc6d0:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fc6d2:	f002 fe11 	bl	23ff2f8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fc6d6:	4c1d      	ldr	r4, [pc, #116]	; (23fc74c <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fc6d8:	4605      	mov	r5, r0
 23fc6da:	4626      	mov	r6, r4
 23fc6dc:	4669      	mov	r1, sp
 23fc6de:	a803      	add	r0, sp, #12
 23fc6e0:	f7ff ffae 	bl	23fc640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fc6e4:	a903      	add	r1, sp, #12
 23fc6e6:	a806      	add	r0, sp, #24
 23fc6e8:	f7ff ffaa 	bl	23fc640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc6ec:	4b18      	ldr	r3, [pc, #96]	; (23fc750 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fc6ee:	a906      	add	r1, sp, #24
 23fc6f0:	f846 3b04 	str.w	r3, [r6], #4
 23fc6f4:	a809      	add	r0, sp, #36	; 0x24
 23fc6f6:	f7ff ffa3 	bl	23fc640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc6fa:	aa09      	add	r2, sp, #36	; 0x24
 23fc6fc:	4639      	mov	r1, r7
 23fc6fe:	4630      	mov	r0, r6
 23fc700:	f001 ffd8 	bl	23fe6b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc704:	a809      	add	r0, sp, #36	; 0x24
 23fc706:	f7ff ff5a 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc70a:	a806      	add	r0, sp, #24
 23fc70c:	f7ff ff57 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc710:	4b10      	ldr	r3, [pc, #64]	; (23fc754 <_GLOBAL__sub_I_SystemMode+0xac>)
 23fc712:	6225      	str	r5, [r4, #32]
 23fc714:	6023      	str	r3, [r4, #0]
 23fc716:	a803      	add	r0, sp, #12
 23fc718:	f7ff ff51 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc71c:	4b0e      	ldr	r3, [pc, #56]	; (23fc758 <_GLOBAL__sub_I_SystemMode+0xb0>)
 23fc71e:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc720:	f002 fdea 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23fc724:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc728:	f002 fdd6 	bl	23ff2d8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc72c:	f001 fca6 	bl	23fe07c <_ZN5spark10LogManager8instanceEv>
 23fc730:	4621      	mov	r1, r4
 23fc732:	f001 fe97 	bl	23fe464 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
 23fc736:	4668      	mov	r0, sp
 23fc738:	f7ff ff41 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc73c:	b00d      	add	sp, #52	; 0x34
 23fc73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc740:	1007adec 	.word	0x1007adec
 23fc744:	ffff0000 	.word	0xffff0000
 23fc748:	1007addc 	.word	0x1007addc
 23fc74c:	1007ae1c 	.word	0x1007ae1c
 23fc750:	023ffbcc 	.word	0x023ffbcc
 23fc754:	023ffd0c 	.word	0x023ffd0c
 23fc758:	023ffbe4 	.word	0x023ffbe4

023fc75c <accurrent_cfg_setup>:
void accurrent_cfg_setup ( accurrent_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->sck = HAL_PIN_NC;
    cfg->miso = HAL_PIN_NC;
 23fc75c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fc760:	6003      	str	r3, [r0, #0]
    cfg->mosi = HAL_PIN_NC;
    cfg->cs = HAL_PIN_NC;

    // Additional gpio pins

    cfg->an = HAL_PIN_NC;
 23fc762:	7103      	strb	r3, [r0, #4]

    cfg->spi_mode = SPI_MASTER_MODE_0;
    cfg->cs_polarity = SPI_MASTER_CHIP_SELECT_POLARITY_ACTIVE_LOW;
    cfg->spi_speed = 100000; 
 23fc764:	4b02      	ldr	r3, [pc, #8]	; (23fc770 <accurrent_cfg_setup+0x14>)
 23fc766:	6083      	str	r3, [r0, #8]
    cfg->spi_mode = SPI_MASTER_MODE_0;
 23fc768:	2300      	movs	r3, #0
 23fc76a:	8183      	strh	r3, [r0, #12]
}
 23fc76c:	4770      	bx	lr
 23fc76e:	bf00      	nop
 23fc770:	000186a0 	.word	0x000186a0

023fc774 <accurrent_init>:

ACCURRENT_RETVAL accurrent_init ( accurrent_t *ctx, accurrent_cfg_t *cfg )
{
 23fc774:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc776:	460c      	mov	r4, r1
 23fc778:	4605      	mov	r5, r0
    spi_cfg.speed     = cfg->spi_speed;
    spi_cfg.mode      = cfg->spi_mode;
    spi_cfg.sck       = cfg->sck;
    spi_cfg.miso      = cfg->miso;
    spi_cfg.mosi      = cfg->mosi;
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fc77a:	2600      	movs	r6, #0
{
 23fc77c:	b085      	sub	sp, #20
    spi_master_configure_default( &spi_cfg );
 23fc77e:	a801      	add	r0, sp, #4
 23fc780:	f000 f966 	bl	23fca50 <_Z28spi_master_configure_defaultP19spi_master_config_t>
    spi_cfg.speed     = cfg->spi_speed;
 23fc784:	68a3      	ldr	r3, [r4, #8]

    digital_out_init( &ctx->cs, cfg->cs );
 23fc786:	78e1      	ldrb	r1, [r4, #3]
    spi_cfg.speed     = cfg->spi_speed;
 23fc788:	9302      	str	r3, [sp, #8]
    spi_cfg.mode      = cfg->spi_mode;
 23fc78a:	7b23      	ldrb	r3, [r4, #12]
    digital_out_init( &ctx->cs, cfg->cs );
 23fc78c:	4628      	mov	r0, r5
    spi_cfg.mode      = cfg->spi_mode;
 23fc78e:	f88d 300c 	strb.w	r3, [sp, #12]
    spi_cfg.sck       = cfg->sck;
 23fc792:	78a3      	ldrb	r3, [r4, #2]
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fc794:	f88d 6004 	strb.w	r6, [sp, #4]
    spi_cfg.sck       = cfg->sck;
 23fc798:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_cfg.miso      = cfg->miso;
 23fc79c:	8823      	ldrh	r3, [r4, #0]
    ctx->chip_select = cfg->cs;

    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fc79e:	1d2f      	adds	r7, r5, #4
    spi_cfg.miso      = cfg->miso;
 23fc7a0:	f8ad 3006 	strh.w	r3, [sp, #6]
    digital_out_init( &ctx->cs, cfg->cs );
 23fc7a4:	f000 f871 	bl	23fc88a <_Z16digital_out_initP13digital_out_th>
    ctx->chip_select = cfg->cs;
 23fc7a8:	78e3      	ldrb	r3, [r4, #3]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fc7aa:	4638      	mov	r0, r7
    ctx->chip_select = cfg->cs;
 23fc7ac:	742b      	strb	r3, [r5, #16]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fc7ae:	a901      	add	r1, sp, #4
 23fc7b0:	f000 f934 	bl	23fca1c <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>
 23fc7b4:	3001      	adds	r0, #1
 23fc7b6:	d019      	beq.n	23fc7ec <accurrent_init+0x78>
    {
        return ACCURRENT_INIT_ERROR;
    }

    spi_master_set_default_write_data( &ctx->spi, ACCURRENT_DUMMY );
 23fc7b8:	4631      	mov	r1, r6
 23fc7ba:	4638      	mov	r0, r7
 23fc7bc:	f000 f912 	bl	23fc9e4 <_Z33spi_master_set_default_write_dataP12spi_master_th>
    spi_master_set_mode( &ctx->spi, spi_cfg.mode );
 23fc7c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
 23fc7c4:	4638      	mov	r0, r7
 23fc7c6:	f000 f967 	bl	23fca98 <_Z19spi_master_set_modeP12spi_master_th>
    spi_master_set_speed( &ctx->spi, spi_cfg.speed );
 23fc7ca:	9902      	ldr	r1, [sp, #8]
 23fc7cc:	4638      	mov	r0, r7
 23fc7ce:	f000 f96e 	bl	23fcaae <_Z20spi_master_set_speedP12spi_master_tm>
    spi_master_set_chip_select_polarity( cfg->cs_polarity );
 23fc7d2:	7b60      	ldrb	r0, [r4, #13]
 23fc7d4:	f000 f8fe 	bl	23fc9d4 <_Z35spi_master_set_chip_select_polarityh>

    digital_in_init( &ctx->an, cfg->an );
 23fc7d8:	7921      	ldrb	r1, [r4, #4]
 23fc7da:	1ca8      	adds	r0, r5, #2
 23fc7dc:	f000 f84a 	bl	23fc874 <_Z15digital_in_initP12digital_in_th>
    spi_master_deselect_device( ctx->chip_select );  
 23fc7e0:	7c28      	ldrb	r0, [r5, #16]
 23fc7e2:	f000 f8e5 	bl	23fc9b0 <_Z26spi_master_deselect_deviceh>

    return ACCURRENT_OK;
 23fc7e6:	4630      	mov	r0, r6
}
 23fc7e8:	b005      	add	sp, #20
 23fc7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ACCURRENT_INIT_ERROR;
 23fc7ec:	20ff      	movs	r0, #255	; 0xff
 23fc7ee:	e7fb      	b.n	23fc7e8 <accurrent_init+0x74>

023fc7f0 <accurrent_get_ma>:
    spi_master_write_then_read( &ctx->spi, wr_buf, wr_len, rd_buf, rd_len );
    spi_master_deselect_device( ctx->chip_select );   
}

float accurrent_get_ma ( accurrent_t *ctx )
{
 23fc7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc7f2:	4606      	mov	r6, r0
 23fc7f4:	250a      	movs	r5, #10

    // Initialize variables
    msb_mask = 0x00;
    tmp = 0;
    avg = 0;
    sum = 0;
 23fc7f6:	2400      	movs	r4, #0
{
 23fc7f8:	b085      	sub	sp, #20
        
    // SPI reading
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
    {
        spi_master_select_device( ctx->chip_select );
        spi_master_read( &ctx->spi, buffer, 2 );
 23fc7fa:	1d07      	adds	r7, r0, #4
        spi_master_select_device( ctx->chip_select );
 23fc7fc:	7c30      	ldrb	r0, [r6, #16]
 23fc7fe:	f000 f8c7 	bl	23fc990 <_Z24spi_master_select_deviceh>
        spi_master_read( &ctx->spi, buffer, 2 );
 23fc802:	2202      	movs	r2, #2
 23fc804:	a901      	add	r1, sp, #4
 23fc806:	4638      	mov	r0, r7
 23fc808:	f000 f95e 	bl	23fcac8 <_Z15spi_master_readP12spi_master_tPhj>
        spi_master_deselect_device( ctx->chip_select );
 23fc80c:	7c30      	ldrb	r0, [r6, #16]
 23fc80e:	f000 f8cf 	bl	23fc9b0 <_Z26spi_master_deselect_deviceh>
        
        // Reading most significant and least significant bytes
        read_msb = buffer[ 0 ] & msb_mask;
 23fc812:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fc816:	3d01      	subs	r5, #1
        read_lsb = buffer[ 1 ];
        
        // Forming ADC_CONVERSION_SIZE
        tmp = ( ( read_msb & msb_mask ) << 8 );
 23fc818:	f003 021f 	and.w	r2, r3, #31
        tmp =  tmp | read_lsb;
 23fc81c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fc820:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        tmp =  tmp | read_lsb;
 23fc824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        
        sum = sum + tmp;                            // Sum of the ADC readings
 23fc828:	441c      	add	r4, r3
 23fc82a:	b2a4      	uxth	r4, r4
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fc82c:	d1e6      	bne.n	23fc7fc <accurrent_get_ma+0xc>
    }
    
    // Average ADC value based on sum of the ADC readings
    avg = ( float ) ( sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fc82e:	230a      	movs	r3, #10
 23fc830:	fbb4 f4f3 	udiv	r4, r4, r3
 23fc834:	ee07 4a90 	vmov	s15, r4
    avg = ( avg / max_val ) * 8.25 * 1000;
 23fc838:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23fc868 <accurrent_get_ma+0x78>
    avg = ( float ) ( sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fc83c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    avg = ( avg / max_val ) * 8.25 * 1000;
 23fc840:	eec7 7a87 	vdiv.f32	s15, s15, s14
 23fc844:	ee17 0a90 	vmov	r0, s15
 23fc848:	f7ff fab2 	bl	23fbdb0 <__aeabi_f2d>
 23fc84c:	2200      	movs	r2, #0
 23fc84e:	4b07      	ldr	r3, [pc, #28]	; (23fc86c <accurrent_get_ma+0x7c>)
 23fc850:	f7ff fb06 	bl	23fbe60 <__aeabi_dmul>
 23fc854:	2200      	movs	r2, #0
 23fc856:	4b06      	ldr	r3, [pc, #24]	; (23fc870 <accurrent_get_ma+0x80>)
 23fc858:	f7ff fb02 	bl	23fbe60 <__aeabi_dmul>
 23fc85c:	f7ff fd12 	bl	23fc284 <__aeabi_d2f>

    return avg;                                   // Returns the average ADC value
}
 23fc860:	ee00 0a10 	vmov	s0, r0
 23fc864:	b005      	add	sp, #20
 23fc866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc868:	457ff000 	.word	0x457ff000
 23fc86c:	40208000 	.word	0x40208000
 23fc870:	408f4000 	.word	0x408f4000

023fc874 <_Z15digital_in_initP12digital_in_th>:

#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fc874:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fc876:	460c      	mov	r4, r1
 23fc878:	b921      	cbnz	r1, 23fc884 <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fc87a:	7800      	ldrb	r0, [r0, #0]
 23fc87c:	f002 fe84 	bl	23ff588 <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fc880:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fc882:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fc884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fc888:	e7fb      	b.n	23fc882 <_Z15digital_in_initP12digital_in_th+0xe>

023fc88a <_Z16digital_out_initP13digital_out_th>:
#include "drv_digital_out.h"

//function for setting pin as output
int8_t digital_out_init(digital_out_t *out, uint8_t mode)
{
    if (mode == OUTPUT)
 23fc88a:	2901      	cmp	r1, #1
{
 23fc88c:	b508      	push	{r3, lr}
    if (mode == OUTPUT)
 23fc88e:	d104      	bne.n	23fc89a <_Z16digital_out_initP13digital_out_th+0x10>
    {
        pinMode(out->pin, static_cast<PinMode>(mode));      //static cast mode and set pin as output
 23fc890:	8800      	ldrh	r0, [r0, #0]
 23fc892:	f002 fe79 	bl	23ff588 <pinMode>
        return DIGITAL_OUT_SUCCESS;                         //return status
 23fc896:	2000      	movs	r0, #0
    }
    else
    {
        return DIGITAL_OUT_UNSUPPORTED_PIN;                 //return status
    }
}
 23fc898:	bd08      	pop	{r3, pc}
        return DIGITAL_OUT_UNSUPPORTED_PIN;                 //return status
 23fc89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fc89e:	e7fb      	b.n	23fc898 <_Z16digital_out_initP13digital_out_th+0xe>

023fc8a0 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{   
 23fc8a0:	b510      	push	{r4, lr}
    addr = 0x00;                                    //set client address to 0x00
 23fc8a2:	2400      	movs	r4, #0
 23fc8a4:	4b05      	ldr	r3, [pc, #20]	; (23fc8bc <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fc8a6:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fc8a8:	4b05      	ldr	r3, [pc, #20]	; (23fc8c0 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fc8aa:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fc8ac:	f002 feb2 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc8b0:	4621      	mov	r1, r4
}
 23fc8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fc8b6:	f000 bfcd 	b.w	23fd854 <_ZN7TwoWire8setSpeedEm>
 23fc8ba:	bf00      	nop
 23fc8bc:	1007ae40 	.word	0x1007ae40
 23fc8c0:	1007ae44 	.word	0x1007ae44

023fc8c4 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{   
 23fc8c4:	b508      	push	{r3, lr}
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fc8c6:	f002 fea5 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc8ca:	4b05      	ldr	r3, [pc, #20]	; (23fc8e0 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fc8cc:	6819      	ldr	r1, [r3, #0]
 23fc8ce:	f000 ffc1 	bl	23fd854 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fc8d2:	f002 fe9f 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc8d6:	f000 ffc1 	bl	23fd85c <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fc8da:	2000      	movs	r0, #0
 23fc8dc:	bd08      	pop	{r3, pc}
 23fc8de:	bf00      	nop
 23fc8e0:	1007ae44 	.word	0x1007ae44

023fc8e4 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{    
 23fc8e4:	b510      	push	{r4, lr}
 23fc8e6:	460c      	mov	r4, r1
    set_speed = speed;              //set static global variable to new speed value
 23fc8e8:	4b04      	ldr	r3, [pc, #16]	; (23fc8fc <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fc8ea:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fc8ec:	f002 fe92 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc8f0:	4621      	mov	r1, r4
 23fc8f2:	f000 ffaf 	bl	23fd854 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fc8f6:	2000      	movs	r0, #0
 23fc8f8:	bd10      	pop	{r4, pc}
 23fc8fa:	bf00      	nop
 23fc8fc:	1007ae44 	.word	0x1007ae44

023fc900 <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
}

//set 7-bit client address
int8_t i2c_master_set_slave_address(i2c_master_t *obj, uint8_t address)
{    
    addr = address;                 //set function parameter to global variable
 23fc900:	4b01      	ldr	r3, [pc, #4]	; (23fc908 <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fc902:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fc904:	7019      	strb	r1, [r3, #0]
}
 23fc906:	4770      	bx	lr
 23fc908:	1007ae40 	.word	0x1007ae40

023fc90c <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{   
 23fc90c:	b513      	push	{r0, r1, r4, lr}
 23fc90e:	460c      	mov	r4, r1
 23fc910:	9201      	str	r2, [sp, #4]
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fc912:	f002 fe7f 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc916:	4b0b      	ldr	r3, [pc, #44]	; (23fc944 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fc918:	7819      	ldrb	r1, [r3, #0]
 23fc91a:	f000 ffce 	bl	23fd8ba <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);     //write function parameter data and legnth to i2c bus
 23fc91e:	f002 fe79 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc922:	6803      	ldr	r3, [r0, #0]
 23fc924:	4621      	mov	r1, r4
 23fc926:	68db      	ldr	r3, [r3, #12]
 23fc928:	9a01      	ldr	r2, [sp, #4]
 23fc92a:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)         //send stop condition (true)
 23fc92c:	f002 fe72 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc930:	2101      	movs	r1, #1
 23fc932:	f000 ffc6 	bl	23fd8c2 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;                  //return status
    }
    return I2C_MASTER_ERROR;                        //return status    
}
 23fc936:	3801      	subs	r0, #1
 23fc938:	bf18      	it	ne
 23fc93a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fc93e:	b002      	add	sp, #8
 23fc940:	bd10      	pop	{r4, pc}
 23fc942:	bf00      	nop
 23fc944:	1007ae40 	.word	0x1007ae40

023fc948 <_Z15i2c_master_readP12i2c_master_tPhj>:

//i2c read operation, R/W = 1
int8_t i2c_master_read(i2c_master_t *obj, uint8_t *read_data_buf, size_t len_read_data)
{   
 23fc948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc94c:	4615      	mov	r5, r2
 23fc94e:	460e      	mov	r6, r1
    //local variable 
    uint8_t temp;       //variable for determining error

    //read data from I2C bus
    temp = Wire.requestFrom(addr, len_read_data, true);     //true signals send stop after read
 23fc950:	f002 fe60 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc954:	490d      	ldr	r1, [pc, #52]	; (23fc98c <_Z15i2c_master_readP12i2c_master_tPhj+0x44>)
 23fc956:	2301      	movs	r3, #1
 23fc958:	462a      	mov	r2, r5
 23fc95a:	7809      	ldrb	r1, [r1, #0]
 23fc95c:	f000 ff9b 	bl	23fd896 <_ZN7TwoWire11requestFromEhjh>
 23fc960:	2700      	movs	r7, #0
 23fc962:	b2c4      	uxtb	r4, r0
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fc964:	fa5f f887 	uxtb.w	r8, r7
 23fc968:	4545      	cmp	r5, r8
 23fc96a:	f107 0701 	add.w	r7, r7, #1
 23fc96e:	d907      	bls.n	23fc980 <_Z15i2c_master_readP12i2c_master_tPhj+0x38>
    {
        read_data_buf[ii] = Wire.read();                    //write pointer function parameter
 23fc970:	f002 fe50 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23fc974:	6803      	ldr	r3, [r0, #0]
 23fc976:	695b      	ldr	r3, [r3, #20]
 23fc978:	4798      	blx	r3
 23fc97a:	f806 0008 	strb.w	r0, [r6, r8]
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fc97e:	e7f1      	b.n	23fc964 <_Z15i2c_master_readP12i2c_master_tPhj+0x1c>
    }
    
    //logic for successful transfer
    if(temp != 0)                       //requestFrom() returns 0 if timeout occurs
 23fc980:	fab4 f084 	clz	r0, r4
 23fc984:	0940      	lsrs	r0, r0, #5
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;            //return status
}
 23fc986:	4240      	negs	r0, r0
 23fc988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc98c:	1007ae40 	.word	0x1007ae40

023fc990 <_Z24spi_master_select_deviceh>:
    return SPI_MASTER_SUCCESS;                      //return status
}

//assert chip select
void spi_master_select_device(uint8_t chip_select)
{   
 23fc990:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);               //set function parameter as output
 23fc992:	2101      	movs	r1, #1
 23fc994:	9001      	str	r0, [sp, #4]
 23fc996:	f002 fdf7 	bl	23ff588 <pinMode>
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fc99a:	4b04      	ldr	r3, [pc, #16]	; (23fc9ac <_Z24spi_master_select_deviceh+0x1c>)
 23fc99c:	9801      	ldr	r0, [sp, #4]
 23fc99e:	7819      	ldrb	r1, [r3, #0]
}
 23fc9a0:	b003      	add	sp, #12
 23fc9a2:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fc9a6:	f002 be00 	b.w	23ff5aa <digitalWrite>
 23fc9aa:	bf00      	nop
 23fc9ac:	1007ae54 	.word	0x1007ae54

023fc9b0 <_Z26spi_master_deselect_deviceh>:

//de-assert chip select
void spi_master_deselect_device(uint8_t chip_select) 
{  
 23fc9b0:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);                   //set function parameter as output
 23fc9b2:	2101      	movs	r1, #1
 23fc9b4:	9001      	str	r0, [sp, #4]
 23fc9b6:	f002 fde7 	bl	23ff588 <pinMode>
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fc9ba:	4b05      	ldr	r3, [pc, #20]	; (23fc9d0 <_Z26spi_master_deselect_deviceh+0x20>)
 23fc9bc:	9801      	ldr	r0, [sp, #4]
 23fc9be:	7819      	ldrb	r1, [r3, #0]
 23fc9c0:	fab1 f181 	clz	r1, r1
 23fc9c4:	0949      	lsrs	r1, r1, #5
}
 23fc9c6:	b003      	add	sp, #12
 23fc9c8:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fc9cc:	f002 bded 	b.w	23ff5aa <digitalWrite>
 23fc9d0:	1007ae54 	.word	0x1007ae54

023fc9d4 <_Z35spi_master_set_chip_select_polarityh>:

//sets chip select polarity
void spi_master_set_chip_select_polarity(uint8_t polarity)
{   
    if ((polarity == LOW) || (polarity == HIGH))        //check for valid function parameter
 23fc9d4:	2801      	cmp	r0, #1
    {
        cs_polarity = polarity;                         //set new CS polarity
 23fc9d6:	bf9c      	itt	ls
 23fc9d8:	4b01      	ldrls	r3, [pc, #4]	; (23fc9e0 <_Z35spi_master_set_chip_select_polarityh+0xc>)
 23fc9da:	7018      	strbls	r0, [r3, #0]
    }
}
 23fc9dc:	4770      	bx	lr
 23fc9de:	bf00      	nop
 23fc9e0:	1007ae54 	.word	0x1007ae54

023fc9e4 <_Z33spi_master_set_default_write_dataP12spi_master_th>:
//sets SPI default value, not implemented
int8_t spi_master_set_default_write_data(spi_master_t *obj, uint8_t  default_write_data) 
{
    #warning spi_master_set_default_write_data() function is not implemented
    return SPI_MASTER_SUCCESS;      //return status
}
 23fc9e4:	2000      	movs	r0, #0
 23fc9e6:	4770      	bx	lr

023fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fc9e8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fc9ea:	4c0a      	ldr	r4, [pc, #40]	; (23fca14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fc9ec:	e8d4 1f8f 	ldab	r1, [r4]
 23fc9f0:	f011 0101 	ands.w	r1, r1, #1
 23fc9f4:	d10b      	bne.n	23fca0e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fc9f6:	4620      	mov	r0, r4
 23fc9f8:	9101      	str	r1, [sp, #4]
 23fc9fa:	f7ff fcd5 	bl	23fc3a8 <__cxa_guard_acquire>
 23fc9fe:	9901      	ldr	r1, [sp, #4]
 23fca00:	b128      	cbz	r0, 23fca0e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fca02:	4805      	ldr	r0, [pc, #20]	; (23fca18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fca04:	f002 fa76 	bl	23feef4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fca08:	4620      	mov	r0, r4
 23fca0a:	f7ff fcd2 	bl	23fc3b2 <__cxa_guard_release>
        return instance;
    }
 23fca0e:	4802      	ldr	r0, [pc, #8]	; (23fca18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fca10:	b002      	add	sp, #8
 23fca12:	bd10      	pop	{r4, pc}
 23fca14:	1007ae48 	.word	0x1007ae48
 23fca18:	1007ae4c 	.word	0x1007ae4c

023fca1c <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>:
{   
 23fca1c:	b508      	push	{r3, lr}
    pinMode(MIKROBUS_1_CS_PIN, OUTPUT);             //set CS sginal mikroBUS1 as output
 23fca1e:	2101      	movs	r1, #1
 23fca20:	2012      	movs	r0, #18
 23fca22:	f002 fdb1 	bl	23ff588 <pinMode>
    pinMode(MIKROBUS_2_CS_PIN, OUTPUT);             //set CS sginal mikroBUS2 as output
 23fca26:	2101      	movs	r1, #1
 23fca28:	2005      	movs	r0, #5
 23fca2a:	f002 fdad 	bl	23ff588 <pinMode>
    digitalWrite(MIKROBUS_1_CS_PIN, HIGH);          //set CS HIGH
 23fca2e:	2101      	movs	r1, #1
 23fca30:	2012      	movs	r0, #18
 23fca32:	f002 fdba 	bl	23ff5aa <digitalWrite>
    digitalWrite(MIKROBUS_2_CS_PIN, HIGH);          //set CS HIGH
 23fca36:	2101      	movs	r1, #1
 23fca38:	2005      	movs	r0, #5
 23fca3a:	f002 fdb6 	bl	23ff5aa <digitalWrite>
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
 23fca3e:	f7ff ffd3 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fca42:	22ff      	movs	r2, #255	; 0xff
 23fca44:	2100      	movs	r1, #0
 23fca46:	f002 fa5f 	bl	23fef08 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
}
 23fca4a:	2000      	movs	r0, #0
 23fca4c:	bd08      	pop	{r3, pc}
	...

023fca50 <_Z28spi_master_configure_defaultP19spi_master_config_t>:
{
 23fca50:	b510      	push	{r4, lr}
    cs_polarity = LOW;              //set CS active low          
 23fca52:	2400      	movs	r4, #0
    pinMode(MIKROBUS_1_CS_PIN, OUTPUT);         //set CS sginal mikroBUS1 as output
 23fca54:	2101      	movs	r1, #1
 23fca56:	2012      	movs	r0, #18
 23fca58:	f002 fd96 	bl	23ff588 <pinMode>
    pinMode(MIKROBUS_2_CS_PIN, OUTPUT);         //set CS sginal mikroBUS2 as output
 23fca5c:	2101      	movs	r1, #1
 23fca5e:	2005      	movs	r0, #5
 23fca60:	f002 fd92 	bl	23ff588 <pinMode>
    digitalWrite(MIKROBUS_1_CS_PIN, HIGH);      //set CS HIGH
 23fca64:	2101      	movs	r1, #1
 23fca66:	2012      	movs	r0, #18
 23fca68:	f002 fd9f 	bl	23ff5aa <digitalWrite>
    digitalWrite(MIKROBUS_2_CS_PIN, HIGH);      //set CS HIGH
 23fca6c:	2101      	movs	r1, #1
 23fca6e:	2005      	movs	r0, #5
 23fca70:	f002 fd9b 	bl	23ff5aa <digitalWrite>
    cs_polarity = LOW;              //set CS active low          
 23fca74:	4b07      	ldr	r3, [pc, #28]	; (23fca94 <_Z28spi_master_configure_defaultP19spi_master_config_t+0x44>)
 23fca76:	701c      	strb	r4, [r3, #0]
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 23fca78:	f7ff ffb6 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fca7c:	4621      	mov	r1, r4
 23fca7e:	f002 fa5a 	bl	23fef36 <_ZN8SPIClass11setDataModeEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 23fca82:	f7ff ffb1 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
 23fca86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fca8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fca8e:	2164      	movs	r1, #100	; 0x64
 23fca90:	f002 ba82 	b.w	23fef98 <_ZN8SPIClass13setClockSpeedEjj>
 23fca94:	1007ae54 	.word	0x1007ae54

023fca98 <_Z19spi_master_set_modeP12spi_master_th>:
{
 23fca98:	b507      	push	{r0, r1, r2, lr}
 23fca9a:	9101      	str	r1, [sp, #4]
        instance().setDataMode(mode);
 23fca9c:	f7ff ffa4 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcaa0:	9901      	ldr	r1, [sp, #4]
 23fcaa2:	f002 fa48 	bl	23fef36 <_ZN8SPIClass11setDataModeEh>
}
 23fcaa6:	2000      	movs	r0, #0
 23fcaa8:	b003      	add	sp, #12
 23fcaaa:	f85d fb04 	ldr.w	pc, [sp], #4

023fcaae <_Z20spi_master_set_speedP12spi_master_tm>:
{
 23fcaae:	b510      	push	{r4, lr}
 23fcab0:	460c      	mov	r4, r1
        return instance().setClockSpeed(value, scale);
 23fcab2:	f7ff ff99 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcab6:	2201      	movs	r2, #1
 23fcab8:	4621      	mov	r1, r4
 23fcaba:	f002 fa6d 	bl	23fef98 <_ZN8SPIClass13setClockSpeedEjj>
}
 23fcabe:	1a20      	subs	r0, r4, r0
 23fcac0:	bf18      	it	ne
 23fcac2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fcac6:	bd10      	pop	{r4, pc}

023fcac8 <_Z15spi_master_readP12spi_master_tPhj>:
    return SPI_MASTER_SUCCESS;                                                  //return status
}

//Reads byte(s) from SPI bus
int8_t spi_master_read(spi_master_t *obj, uint8_t *read_data_buffer, size_t read_data_length)  
{   
 23fcac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    #warning spi_master_read() assumes the read immediately occurs on first SCK. If data needs to be transmitted before read, use spi_master_write_then_read() instead
    
    //create dummy array size of read fill with zeros
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fcacc:	2500      	movs	r5, #0
{   
 23fcace:	4614      	mov	r4, r2
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fcad0:	1dd3      	adds	r3, r2, #7
 23fcad2:	f023 0307 	bic.w	r3, r3, #7
{   
 23fcad6:	b082      	sub	sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fcad8:	42ac      	cmp	r4, r5
{   
 23fcada:	af02      	add	r7, sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fcadc:	ebad 0d03 	sub.w	sp, sp, r3
 23fcae0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
{   
 23fcae4:	460e      	mov	r6, r1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fcae6:	bfd8      	it	le
 23fcae8:	462a      	movle	r2, r5
 23fcaea:	4629      	mov	r1, r5
 23fcaec:	f10d 0009 	add.w	r0, sp, #9
 23fcaf0:	f88d 5008 	strb.w	r5, [sp, #8]
 23fcaf4:	f002 feab 	bl	23ff84e <memset>
        return instance().beginTransaction();
 23fcaf8:	f7ff ff76 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcafc:	f002 fa2f 	bl	23fef5e <_ZN8SPIClass16beginTransactionEv>

    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fcb00:	1c43      	adds	r3, r0, #1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fcb02:	f10d 0808 	add.w	r8, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fcb06:	d00c      	beq.n	23fcb22 <_Z15spi_master_readP12spi_master_tPhj+0x5a>
    }
    byte transfer(byte data) {
        return instance().transfer(data);
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fcb08:	f7ff ff6e 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcb0c:	4623      	mov	r3, r4
 23fcb0e:	4632      	mov	r2, r6
 23fcb10:	4641      	mov	r1, r8
 23fcb12:	9500      	str	r5, [sp, #0]
 23fcb14:	f002 fa72 	bl	23feffc <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fcb18:	f7ff ff66 	bl	23fc9e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fcb1c:	f002 fa22 	bl	23fef64 <_ZN8SPIClass14endTransactionEv>
        return SPI_MASTER_ERROR;                        //return status
    }

    SPI.transfer(read_dummy, read_data_buffer, read_data_length, NULL);     //spi transaction for read (write = NULL)
    SPI.endTransaction();                                                   //end transaction and release spi peripheral lock
    return SPI_MASTER_SUCCESS;                                              //return status
 23fcb20:	4628      	mov	r0, r5
}
 23fcb22:	46bd      	mov	sp, r7
 23fcb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fcb28 <_ZL13temphum13_crct>:
}

// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS

static uint8_t temphum13_crc ( uint16_t input_value )
{
 23fcb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcb2c:	b087      	sub	sp, #28
 23fcb2e:	ab02      	add	r3, sp, #8
 23fcb30:	4601      	mov	r1, r0
    char do_invert;
    uint8_t ret_val;
    uint16_t aux_mask;
    char bit_string[ 16 ];
    
    aux_mask = 0x8000;
 23fcb32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
 23fcb36:	2010      	movs	r0, #16
 23fcb38:	469c      	mov	ip, r3
        {
            bit_string[ i ] = '1';
        }
        else
        {
            bit_string[ i ] = '0';
 23fcb3a:	2430      	movs	r4, #48	; 0x30
            bit_string[ i ] = '1';
 23fcb3c:	2531      	movs	r5, #49	; 0x31
        if ( ( ( input_value & aux_mask ) != 0x0000 ) )
 23fcb3e:	4211      	tst	r1, r2
    for ( i = 0; i < 16; i ++ )
 23fcb40:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
            bit_string[ i ] = '1';
 23fcb44:	bf14      	ite	ne
 23fcb46:	701d      	strbne	r5, [r3, #0]
            bit_string[ i ] = '0';
 23fcb48:	701c      	strbeq	r4, [r3, #0]
    for ( i = 0; i < 16; i ++ )
 23fcb4a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        }
        
        aux_mask >>= 1;
 23fcb4e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for ( i = 0; i < 16; i ++ )
 23fcb52:	f103 0301 	add.w	r3, r3, #1
 23fcb56:	d1f2      	bne.n	23fcb3e <_ZL13temphum13_crct+0x16>
 23fcb58:	4606      	mov	r6, r0
 23fcb5a:	4607      	mov	r7, r0
 23fcb5c:	4686      	mov	lr, r0
 23fcb5e:	4683      	mov	fp, r0
 23fcb60:	4603      	mov	r3, r0
 23fcb62:	4680      	mov	r8, r0
 23fcb64:	4681      	mov	r9, r0
 23fcb66:	4602      	mov	r2, r0
 23fcb68:	4605      	mov	r5, r0
        crc[ i ] = 0;
    }

    for ( i = 0; i < 16; ++ i )
    {
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fcb6a:	f81c 1005 	ldrb.w	r1, [ip, r5]
    for ( i = 0; i < 16; ++ i )
 23fcb6e:	3501      	adds	r5, #1
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fcb70:	2931      	cmp	r1, #49	; 0x31
 23fcb72:	bf08      	it	eq
 23fcb74:	f082 0201 	eoreq.w	r2, r2, #1
 23fcb78:	b2d4      	uxtb	r4, r2

        crc[ 7 ] = crc[ 6 ];
        crc[ 6 ] = crc[ 5 ];
        crc[ 5 ] = crc[ 4 ] ^ do_invert;
 23fcb7a:	46c2      	mov	sl, r8
    for ( i = 0; i < 16; ++ i )
 23fcb7c:	2d10      	cmp	r5, #16
        crc[ 5 ] = crc[ 4 ] ^ do_invert;
 23fcb7e:	ea84 0803 	eor.w	r8, r4, r3
        crc[ 4 ] = crc[ 3 ] ^ do_invert;
 23fcb82:	ea84 030b 	eor.w	r3, r4, fp
 23fcb86:	464a      	mov	r2, r9
 23fcb88:	46f3      	mov	fp, lr
 23fcb8a:	4631      	mov	r1, r6
 23fcb8c:	b2db      	uxtb	r3, r3
    for ( i = 0; i < 16; ++ i )
 23fcb8e:	d122      	bne.n	23fcbd6 <_ZL13temphum13_crct+0xae>
 23fcb90:	f88d 3004 	strb.w	r3, [sp, #4]
 23fcb94:	4669      	mov	r1, sp
    }

    ret_val = 0x00;
    aux_mask = 0x0001;
    
    for ( i = 0; i < 8; i ++ )
 23fcb96:	2300      	movs	r3, #0
    aux_mask = 0x0001;
 23fcb98:	2201      	movs	r2, #1
 23fcb9a:	f88d 9007 	strb.w	r9, [sp, #7]
 23fcb9e:	f88d a006 	strb.w	sl, [sp, #6]
 23fcba2:	f88d 8005 	strb.w	r8, [sp, #5]
 23fcba6:	f88d e003 	strb.w	lr, [sp, #3]
 23fcbaa:	f88d 7002 	strb.w	r7, [sp, #2]
 23fcbae:	f88d 6001 	strb.w	r6, [sp, #1]
 23fcbb2:	f88d 4000 	strb.w	r4, [sp]
    {
        if ( ( ( crc[ i ] & 0x01 ) == 0x01 ) )
 23fcbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
    for ( i = 0; i < 8; i ++ )
 23fcbba:	3301      	adds	r3, #1
        if ( ( ( crc[ i ] & 0x01 ) == 0x01 ) )
 23fcbbc:	07e4      	lsls	r4, r4, #31
        {
            ret_val |= aux_mask;
 23fcbbe:	bf48      	it	mi
 23fcbc0:	4310      	orrmi	r0, r2
    for ( i = 0; i < 8; i ++ )
 23fcbc2:	b2db      	uxtb	r3, r3
            ret_val |= aux_mask;
 23fcbc4:	bf48      	it	mi
 23fcbc6:	b2c0      	uxtbmi	r0, r0
        }
        aux_mask <<= 1;
 23fcbc8:	0052      	lsls	r2, r2, #1
    for ( i = 0; i < 8; i ++ )
 23fcbca:	2b08      	cmp	r3, #8
        aux_mask <<= 1;
 23fcbcc:	b292      	uxth	r2, r2
    for ( i = 0; i < 8; i ++ )
 23fcbce:	d1f2      	bne.n	23fcbb6 <_ZL13temphum13_crct+0x8e>
    }
    
    return ret_val;
}
 23fcbd0:	b007      	add	sp, #28
 23fcbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcbd6:	46be      	mov	lr, r7
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fcbd8:	4626      	mov	r6, r4
 23fcbda:	460f      	mov	r7, r1
 23fcbdc:	46d1      	mov	r9, sl
 23fcbde:	e7c4      	b.n	23fcb6a <_ZL13temphum13_crct+0x42>

023fcbe0 <_Z11Delay_100msv>:
inline void Delay_us(unsigned long us) {delayMicroseconds(us);}

//ms delays functions for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
 23fcbe0:	2064      	movs	r0, #100	; 0x64
 23fcbe2:	f000 bd5b 	b.w	23fd69c <delay>

023fcbe6 <temphum13_cfg_setup>:
    cfg->scl = HAL_PIN_NC;
 23fcbe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fcbea:	8003      	strh	r3, [r0, #0]
    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fcbec:	2300      	movs	r3, #0
 23fcbee:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fcbf0:	2340      	movs	r3, #64	; 0x40
 23fcbf2:	7203      	strb	r3, [r0, #8]
}
 23fcbf4:	4770      	bx	lr

023fcbf6 <temphum13_init>:
{
 23fcbf6:	b530      	push	{r4, r5, lr}
 23fcbf8:	460d      	mov	r5, r1
 23fcbfa:	4604      	mov	r4, r0
 23fcbfc:	b085      	sub	sp, #20
    i2c_master_configure_default( &i2c_cfg );
 23fcbfe:	a801      	add	r0, sp, #4
 23fcc00:	f7ff fe4e 	bl	23fc8a0 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fcc04:	686b      	ldr	r3, [r5, #4]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fcc06:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fcc08:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fcc0a:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fcc0c:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fcc0e:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fcc12:	786b      	ldrb	r3, [r5, #1]
 23fcc14:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fcc18:	7a2b      	ldrb	r3, [r5, #8]
 23fcc1a:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fcc1c:	f7ff fe52 	bl	23fc8c4 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fcc20:	3001      	adds	r0, #1
 23fcc22:	d00a      	beq.n	23fcc3a <temphum13_init+0x44>
    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fcc24:	7b21      	ldrb	r1, [r4, #12]
 23fcc26:	4620      	mov	r0, r4
 23fcc28:	f7ff fe6a 	bl	23fc900 <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fcc2c:	4620      	mov	r0, r4
 23fcc2e:	6869      	ldr	r1, [r5, #4]
 23fcc30:	f7ff fe58 	bl	23fc8e4 <_Z20i2c_master_set_speedP12i2c_master_tm>
    return TEMPHUM13_OK;
 23fcc34:	2000      	movs	r0, #0
}
 23fcc36:	b005      	add	sp, #20
 23fcc38:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23fcc3a:	20ff      	movs	r0, #255	; 0xff
 23fcc3c:	e7fb      	b.n	23fcc36 <temphum13_init+0x40>

023fcc3e <temphum13_generic_read>:
{
 23fcc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fcc40:	461e      	mov	r6, r3
 23fcc42:	4604      	mov	r4, r0
 23fcc44:	4615      	mov	r5, r2
 23fcc46:	f88d 1007 	strb.w	r1, [sp, #7]
    i2c_master_write( &ctx->i2c, &reg, 1 );
 23fcc4a:	2201      	movs	r2, #1
 23fcc4c:	f10d 0107 	add.w	r1, sp, #7
 23fcc50:	f7ff fe5c 	bl	23fc90c <_Z16i2c_master_writeP12i2c_master_tPhj>
    Delay_100ms( );
 23fcc54:	f7ff ffc4 	bl	23fcbe0 <_Z11Delay_100msv>
    i2c_master_read( &ctx->i2c,data_buf, len );
 23fcc58:	4632      	mov	r2, r6
 23fcc5a:	4629      	mov	r1, r5
 23fcc5c:	4620      	mov	r0, r4
 23fcc5e:	f7ff fe73 	bl	23fc948 <_Z15i2c_master_readP12i2c_master_tPhj>
    Delay_100ms();
 23fcc62:	f7ff ffbd 	bl	23fcbe0 <_Z11Delay_100msv>
}
 23fcc66:	b002      	add	sp, #8
 23fcc68:	bd70      	pop	{r4, r5, r6, pc}
 23fcc6a:	0000      	movs	r0, r0
 23fcc6c:	0000      	movs	r0, r0
	...

023fcc70 <temphum13_get_temperature>:
{
 23fcc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    temphum13_generic_read( ctx, aux_command, aux_buffer, 3 );
 23fcc72:	2303      	movs	r3, #3
 23fcc74:	21e3      	movs	r1, #227	; 0xe3
 23fcc76:	aa01      	add	r2, sp, #4
 23fcc78:	f7ff ffe1 	bl	23fcc3e <temphum13_generic_read>
    aux_temperature |= aux_buffer[ 1 ];
 23fcc7c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    if ( aux_buffer[ 2 ] == temphum13_crc( aux_temperature ) )
 23fcc80:	f89d 5006 	ldrb.w	r5, [sp, #6]
 23fcc84:	ba64      	rev16	r4, r4
 23fcc86:	b2a4      	uxth	r4, r4
 23fcc88:	4620      	mov	r0, r4
 23fcc8a:	f7ff ff4d 	bl	23fcb28 <_ZL13temphum13_crct>
 23fcc8e:	4285      	cmp	r5, r0
 23fcc90:	d11d      	bne.n	23fccce <temphum13_get_temperature+0x5e>
        aux_temperature &= 0xFFFC;
 23fcc92:	f024 0003 	bic.w	r0, r4, #3
        retval_temperature *= 175.72;
 23fcc96:	ee07 0a90 	vmov	s15, r0
 23fcc9a:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 23fcc9e:	ee17 0a90 	vmov	r0, s15
 23fcca2:	f7ff f885 	bl	23fbdb0 <__aeabi_f2d>
 23fcca6:	a30d      	add	r3, pc, #52	; (adr r3, 23fccdc <temphum13_get_temperature+0x6c>)
 23fcca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fccac:	f7ff f8d8 	bl	23fbe60 <__aeabi_dmul>
 23fccb0:	f7ff fae8 	bl	23fc284 <__aeabi_d2f>
        retval_temperature -= 46.85;
 23fccb4:	f7ff f87c 	bl	23fbdb0 <__aeabi_f2d>
 23fccb8:	a30a      	add	r3, pc, #40	; (adr r3, 23fcce4 <temphum13_get_temperature+0x74>)
 23fccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fccbe:	f7fe ff17 	bl	23fbaf0 <__aeabi_dsub>
 23fccc2:	f7ff fadf 	bl	23fc284 <__aeabi_d2f>
 23fccc6:	ee00 0a10 	vmov	s0, r0
}
 23fccca:	b003      	add	sp, #12
 23fcccc:	bd30      	pop	{r4, r5, pc}
    return 65536.00;
 23fccce:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23fccd8 <temphum13_get_temperature+0x68>
 23fccd2:	e7fa      	b.n	23fccca <temphum13_get_temperature+0x5a>
 23fccd4:	f3af 8000 	nop.w
 23fccd8:	47800000 	.word	0x47800000
 23fccdc:	3d70a3d7 	.word	0x3d70a3d7
 23fcce0:	4065f70a 	.word	0x4065f70a
 23fcce4:	cccccccd 	.word	0xcccccccd
 23fcce8:	40476ccc 	.word	0x40476ccc

023fccec <temphum13_get_humidity>:
{
 23fccec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    temphum13_generic_read( ctx, aux_command, aux_buffer, 3 );
 23fccee:	2303      	movs	r3, #3
 23fccf0:	21e5      	movs	r1, #229	; 0xe5
 23fccf2:	aa01      	add	r2, sp, #4
 23fccf4:	f7ff ffa3 	bl	23fcc3e <temphum13_generic_read>
    aux_humidity |= aux_buffer[ 1 ];
 23fccf8:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    if ( aux_buffer[ 2 ] == temphum13_crc( aux_humidity ) )
 23fccfc:	f89d 5006 	ldrb.w	r5, [sp, #6]
 23fcd00:	ba64      	rev16	r4, r4
 23fcd02:	b2a4      	uxth	r4, r4
 23fcd04:	4620      	mov	r0, r4
 23fcd06:	f7ff ff0f 	bl	23fcb28 <_ZL13temphum13_crct>
 23fcd0a:	4285      	cmp	r5, r0
        aux_humidity &= 0xFFFC;
 23fcd0c:	bf01      	itttt	eq
 23fcd0e:	f024 0303 	biceq.w	r3, r4, #3
 23fcd12:	ee07 3a90 	vmoveq	s15, r3
        retval_humidity -= 6.0;
 23fcd16:	eeb9 0a08 	vmoveq.f32	s0, #152	; 0xc0c00000 -6.0
        retval_humidity /= 65536;
 23fcd1a:	eefb 7ac8 	vcvteq.f32.u32	s15, s15, #16
        retval_humidity -= 6.0;
 23fcd1e:	bf0a      	itet	eq
 23fcd20:	ed9f 7a03 	vldreq	s14, [pc, #12]	; 23fcd30 <temphum13_get_humidity+0x44>
    return 65536.00;
 23fcd24:	ed9f 0a03 	vldrne	s0, [pc, #12]	; 23fcd34 <temphum13_get_humidity+0x48>
        retval_humidity -= 6.0;
 23fcd28:	eea7 0a87 	vfmaeq.f32	s0, s15, s14
}
 23fcd2c:	b003      	add	sp, #12
 23fcd2e:	bd30      	pop	{r4, r5, pc}
 23fcd30:	42fa0000 	.word	0x42fa0000
 23fcd34:	47800000 	.word	0x47800000

023fcd38 <temphum13_soft_reset>:
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fcd38:	23fe      	movs	r3, #254	; 0xfe
{
 23fcd3a:	b507      	push	{r0, r1, r2, lr}
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fcd3c:	2201      	movs	r2, #1
 23fcd3e:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fcd42:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fcd46:	f7ff fde1 	bl	23fc90c <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fcd4a:	b003      	add	sp, #12
 23fcd4c:	f85d fb04 	ldr.w	pc, [sp], #4

023fcd50 <temphum13_default_cfg>:
{
 23fcd50:	b507      	push	{r0, r1, r2, lr}
 23fcd52:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fcd54:	f7ff ff44 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd58:	f7ff ff42 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd5c:	f7ff ff40 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd60:	f7ff ff3e 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd64:	f7ff ff3c 	bl	23fcbe0 <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23fcd68:	9801      	ldr	r0, [sp, #4]
 23fcd6a:	f7ff ffe5 	bl	23fcd38 <temphum13_soft_reset>
    Delay_100ms( );
 23fcd6e:	f7ff ff37 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd72:	f7ff ff35 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd76:	f7ff ff33 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd7a:	f7ff ff31 	bl	23fcbe0 <_Z11Delay_100msv>
    Delay_100ms( );
 23fcd7e:	f7ff ff2f 	bl	23fcbe0 <_Z11Delay_100msv>
}
 23fcd82:	b003      	add	sp, #12
 23fcd84:	f85d fb04 	ldr.w	pc, [sp], #4

023fcd88 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcd88:	b509      	push	{r0, r3, lr}
 23fcd8a:	4804      	ldr	r0, [pc, #16]	; (23fcd9c <os_mutex_recursive_create+0x14>)
 23fcd8c:	6800      	ldr	r0, [r0, #0]
 23fcd8e:	4b04      	ldr	r3, [pc, #16]	; (23fcda0 <os_mutex_recursive_create+0x18>)
 23fcd90:	4403      	add	r3, r0
 23fcd92:	681b      	ldr	r3, [r3, #0]
 23fcd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcd96:	9302      	str	r3, [sp, #8]
 23fcd98:	bd09      	pop	{r0, r3, pc}
 23fcd9a:	0000      	.short	0x0000
 23fcd9c:	1007ad64 	.word	0x1007ad64
 23fcda0:	00000030 	.word	0x00000030

023fcda4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fcda4:	b509      	push	{r0, r3, lr}
 23fcda6:	4804      	ldr	r0, [pc, #16]	; (23fcdb8 <os_mutex_recursive_destroy+0x14>)
 23fcda8:	6800      	ldr	r0, [r0, #0]
 23fcdaa:	4b04      	ldr	r3, [pc, #16]	; (23fcdbc <os_mutex_recursive_destroy+0x18>)
 23fcdac:	4403      	add	r3, r0
 23fcdae:	681b      	ldr	r3, [r3, #0]
 23fcdb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fcdb2:	9302      	str	r3, [sp, #8]
 23fcdb4:	bd09      	pop	{r0, r3, pc}
 23fcdb6:	0000      	.short	0x0000
 23fcdb8:	1007ad64 	.word	0x1007ad64
 23fcdbc:	00000030 	.word	0x00000030

023fcdc0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fcdc0:	b509      	push	{r0, r3, lr}
 23fcdc2:	4804      	ldr	r0, [pc, #16]	; (23fcdd4 <os_mutex_recursive_lock+0x14>)
 23fcdc4:	6800      	ldr	r0, [r0, #0]
 23fcdc6:	4b04      	ldr	r3, [pc, #16]	; (23fcdd8 <os_mutex_recursive_lock+0x18>)
 23fcdc8:	4403      	add	r3, r0
 23fcdca:	681b      	ldr	r3, [r3, #0]
 23fcdcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fcdce:	9302      	str	r3, [sp, #8]
 23fcdd0:	bd09      	pop	{r0, r3, pc}
 23fcdd2:	0000      	.short	0x0000
 23fcdd4:	1007ad64 	.word	0x1007ad64
 23fcdd8:	00000030 	.word	0x00000030

023fcddc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fcddc:	b509      	push	{r0, r3, lr}
 23fcdde:	4804      	ldr	r0, [pc, #16]	; (23fcdf0 <os_mutex_recursive_unlock+0x14>)
 23fcde0:	6800      	ldr	r0, [r0, #0]
 23fcde2:	4b04      	ldr	r3, [pc, #16]	; (23fcdf4 <os_mutex_recursive_unlock+0x18>)
 23fcde4:	4403      	add	r3, r0
 23fcde6:	681b      	ldr	r3, [r3, #0]
 23fcde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fcdea:	9302      	str	r3, [sp, #8]
 23fcdec:	bd09      	pop	{r0, r3, pc}
 23fcdee:	0000      	.short	0x0000
 23fcdf0:	1007ad64 	.word	0x1007ad64
 23fcdf4:	00000030 	.word	0x00000030

023fcdf8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fcdf8:	b509      	push	{r0, r3, lr}
 23fcdfa:	4804      	ldr	r0, [pc, #16]	; (23fce0c <HAL_RNG_GetRandomNumber+0x14>)
 23fcdfc:	6800      	ldr	r0, [r0, #0]
 23fcdfe:	4b04      	ldr	r3, [pc, #16]	; (23fce10 <HAL_RNG_GetRandomNumber+0x18>)
 23fce00:	4403      	add	r3, r0
 23fce02:	681b      	ldr	r3, [r3, #0]
 23fce04:	685b      	ldr	r3, [r3, #4]
 23fce06:	9302      	str	r3, [sp, #8]
 23fce08:	bd09      	pop	{r0, r3, pc}
 23fce0a:	0000      	.short	0x0000
 23fce0c:	1007ad64 	.word	0x1007ad64
 23fce10:	00000000 	.word	0x00000000

023fce14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fce14:	b509      	push	{r0, r3, lr}
 23fce16:	4804      	ldr	r0, [pc, #16]	; (23fce28 <HAL_Delay_Microseconds+0x14>)
 23fce18:	6800      	ldr	r0, [r0, #0]
 23fce1a:	4b04      	ldr	r3, [pc, #16]	; (23fce2c <HAL_Delay_Microseconds+0x18>)
 23fce1c:	4403      	add	r3, r0
 23fce1e:	681b      	ldr	r3, [r3, #0]
 23fce20:	68db      	ldr	r3, [r3, #12]
 23fce22:	9302      	str	r3, [sp, #8]
 23fce24:	bd09      	pop	{r0, r3, pc}
 23fce26:	0000      	.short	0x0000
 23fce28:	1007ad64 	.word	0x1007ad64
 23fce2c:	00000000 	.word	0x00000000

023fce30 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fce30:	b509      	push	{r0, r3, lr}
 23fce32:	4804      	ldr	r0, [pc, #16]	; (23fce44 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fce34:	6800      	ldr	r0, [r0, #0]
 23fce36:	4b04      	ldr	r3, [pc, #16]	; (23fce48 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fce38:	4403      	add	r3, r0
 23fce3a:	681b      	ldr	r3, [r3, #0]
 23fce3c:	695b      	ldr	r3, [r3, #20]
 23fce3e:	9302      	str	r3, [sp, #8]
 23fce40:	bd09      	pop	{r0, r3, pc}
 23fce42:	0000      	.short	0x0000
 23fce44:	1007ad64 	.word	0x1007ad64
 23fce48:	00000000 	.word	0x00000000

023fce4c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fce4c:	b509      	push	{r0, r3, lr}
 23fce4e:	4804      	ldr	r0, [pc, #16]	; (23fce60 <hal_gpio_mode+0x14>)
 23fce50:	6800      	ldr	r0, [r0, #0]
 23fce52:	4b04      	ldr	r3, [pc, #16]	; (23fce64 <hal_gpio_mode+0x18>)
 23fce54:	4403      	add	r3, r0
 23fce56:	681b      	ldr	r3, [r3, #0]
 23fce58:	689b      	ldr	r3, [r3, #8]
 23fce5a:	9302      	str	r3, [sp, #8]
 23fce5c:	bd09      	pop	{r0, r3, pc}
 23fce5e:	0000      	.short	0x0000
 23fce60:	1007ad64 	.word	0x1007ad64
 23fce64:	00000014 	.word	0x00000014

023fce68 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fce68:	b509      	push	{r0, r3, lr}
 23fce6a:	4804      	ldr	r0, [pc, #16]	; (23fce7c <hal_gpio_get_mode+0x14>)
 23fce6c:	6800      	ldr	r0, [r0, #0]
 23fce6e:	4b04      	ldr	r3, [pc, #16]	; (23fce80 <hal_gpio_get_mode+0x18>)
 23fce70:	4403      	add	r3, r0
 23fce72:	681b      	ldr	r3, [r3, #0]
 23fce74:	68db      	ldr	r3, [r3, #12]
 23fce76:	9302      	str	r3, [sp, #8]
 23fce78:	bd09      	pop	{r0, r3, pc}
 23fce7a:	0000      	.short	0x0000
 23fce7c:	1007ad64 	.word	0x1007ad64
 23fce80:	00000014 	.word	0x00000014

023fce84 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fce84:	b509      	push	{r0, r3, lr}
 23fce86:	4804      	ldr	r0, [pc, #16]	; (23fce98 <hal_gpio_write+0x14>)
 23fce88:	6800      	ldr	r0, [r0, #0]
 23fce8a:	4b04      	ldr	r3, [pc, #16]	; (23fce9c <hal_gpio_write+0x18>)
 23fce8c:	4403      	add	r3, r0
 23fce8e:	681b      	ldr	r3, [r3, #0]
 23fce90:	691b      	ldr	r3, [r3, #16]
 23fce92:	9302      	str	r3, [sp, #8]
 23fce94:	bd09      	pop	{r0, r3, pc}
 23fce96:	0000      	.short	0x0000
 23fce98:	1007ad64 	.word	0x1007ad64
 23fce9c:	00000014 	.word	0x00000014

023fcea0 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fcea0:	b509      	push	{r0, r3, lr}
 23fcea2:	4804      	ldr	r0, [pc, #16]	; (23fceb4 <hal_i2c_set_speed+0x14>)
 23fcea4:	6800      	ldr	r0, [r0, #0]
 23fcea6:	4b04      	ldr	r3, [pc, #16]	; (23fceb8 <hal_i2c_set_speed+0x18>)
 23fcea8:	4403      	add	r3, r0
 23fceaa:	681b      	ldr	r3, [r3, #0]
 23fceac:	681b      	ldr	r3, [r3, #0]
 23fceae:	9302      	str	r3, [sp, #8]
 23fceb0:	bd09      	pop	{r0, r3, pc}
 23fceb2:	0000      	.short	0x0000
 23fceb4:	1007ad64 	.word	0x1007ad64
 23fceb8:	00000010 	.word	0x00000010

023fcebc <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fcebc:	b509      	push	{r0, r3, lr}
 23fcebe:	4804      	ldr	r0, [pc, #16]	; (23fced0 <hal_i2c_begin+0x14>)
 23fcec0:	6800      	ldr	r0, [r0, #0]
 23fcec2:	4b04      	ldr	r3, [pc, #16]	; (23fced4 <hal_i2c_begin+0x18>)
 23fcec4:	4403      	add	r3, r0
 23fcec6:	681b      	ldr	r3, [r3, #0]
 23fcec8:	68db      	ldr	r3, [r3, #12]
 23fceca:	9302      	str	r3, [sp, #8]
 23fcecc:	bd09      	pop	{r0, r3, pc}
 23fcece:	0000      	.short	0x0000
 23fced0:	1007ad64 	.word	0x1007ad64
 23fced4:	00000010 	.word	0x00000010

023fced8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fced8:	b509      	push	{r0, r3, lr}
 23fceda:	4804      	ldr	r0, [pc, #16]	; (23fceec <hal_i2c_begin_transmission+0x14>)
 23fcedc:	6800      	ldr	r0, [r0, #0]
 23fcede:	4b04      	ldr	r3, [pc, #16]	; (23fcef0 <hal_i2c_begin_transmission+0x18>)
 23fcee0:	4403      	add	r3, r0
 23fcee2:	681b      	ldr	r3, [r3, #0]
 23fcee4:	699b      	ldr	r3, [r3, #24]
 23fcee6:	9302      	str	r3, [sp, #8]
 23fcee8:	bd09      	pop	{r0, r3, pc}
 23fceea:	0000      	.short	0x0000
 23fceec:	1007ad64 	.word	0x1007ad64
 23fcef0:	00000010 	.word	0x00000010

023fcef4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fcef4:	b509      	push	{r0, r3, lr}
 23fcef6:	4804      	ldr	r0, [pc, #16]	; (23fcf08 <hal_i2c_end_transmission+0x14>)
 23fcef8:	6800      	ldr	r0, [r0, #0]
 23fcefa:	4b04      	ldr	r3, [pc, #16]	; (23fcf0c <hal_i2c_end_transmission+0x18>)
 23fcefc:	4403      	add	r3, r0
 23fcefe:	681b      	ldr	r3, [r3, #0]
 23fcf00:	69db      	ldr	r3, [r3, #28]
 23fcf02:	9302      	str	r3, [sp, #8]
 23fcf04:	bd09      	pop	{r0, r3, pc}
 23fcf06:	0000      	.short	0x0000
 23fcf08:	1007ad64 	.word	0x1007ad64
 23fcf0c:	00000010 	.word	0x00000010

023fcf10 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fcf10:	b509      	push	{r0, r3, lr}
 23fcf12:	4804      	ldr	r0, [pc, #16]	; (23fcf24 <hal_i2c_write+0x14>)
 23fcf14:	6800      	ldr	r0, [r0, #0]
 23fcf16:	4b04      	ldr	r3, [pc, #16]	; (23fcf28 <hal_i2c_write+0x18>)
 23fcf18:	4403      	add	r3, r0
 23fcf1a:	681b      	ldr	r3, [r3, #0]
 23fcf1c:	6a1b      	ldr	r3, [r3, #32]
 23fcf1e:	9302      	str	r3, [sp, #8]
 23fcf20:	bd09      	pop	{r0, r3, pc}
 23fcf22:	0000      	.short	0x0000
 23fcf24:	1007ad64 	.word	0x1007ad64
 23fcf28:	00000010 	.word	0x00000010

023fcf2c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcf2c:	b509      	push	{r0, r3, lr}
 23fcf2e:	4804      	ldr	r0, [pc, #16]	; (23fcf40 <hal_i2c_available+0x14>)
 23fcf30:	6800      	ldr	r0, [r0, #0]
 23fcf32:	4b04      	ldr	r3, [pc, #16]	; (23fcf44 <hal_i2c_available+0x18>)
 23fcf34:	4403      	add	r3, r0
 23fcf36:	681b      	ldr	r3, [r3, #0]
 23fcf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcf3a:	9302      	str	r3, [sp, #8]
 23fcf3c:	bd09      	pop	{r0, r3, pc}
 23fcf3e:	0000      	.short	0x0000
 23fcf40:	1007ad64 	.word	0x1007ad64
 23fcf44:	00000010 	.word	0x00000010

023fcf48 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fcf48:	b509      	push	{r0, r3, lr}
 23fcf4a:	4804      	ldr	r0, [pc, #16]	; (23fcf5c <hal_i2c_read+0x14>)
 23fcf4c:	6800      	ldr	r0, [r0, #0]
 23fcf4e:	4b04      	ldr	r3, [pc, #16]	; (23fcf60 <hal_i2c_read+0x18>)
 23fcf50:	4403      	add	r3, r0
 23fcf52:	681b      	ldr	r3, [r3, #0]
 23fcf54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcf56:	9302      	str	r3, [sp, #8]
 23fcf58:	bd09      	pop	{r0, r3, pc}
 23fcf5a:	0000      	.short	0x0000
 23fcf5c:	1007ad64 	.word	0x1007ad64
 23fcf60:	00000010 	.word	0x00000010

023fcf64 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fcf64:	b509      	push	{r0, r3, lr}
 23fcf66:	4804      	ldr	r0, [pc, #16]	; (23fcf78 <hal_i2c_peek+0x14>)
 23fcf68:	6800      	ldr	r0, [r0, #0]
 23fcf6a:	4b04      	ldr	r3, [pc, #16]	; (23fcf7c <hal_i2c_peek+0x18>)
 23fcf6c:	4403      	add	r3, r0
 23fcf6e:	681b      	ldr	r3, [r3, #0]
 23fcf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcf72:	9302      	str	r3, [sp, #8]
 23fcf74:	bd09      	pop	{r0, r3, pc}
 23fcf76:	0000      	.short	0x0000
 23fcf78:	1007ad64 	.word	0x1007ad64
 23fcf7c:	00000010 	.word	0x00000010

023fcf80 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fcf80:	b509      	push	{r0, r3, lr}
 23fcf82:	4804      	ldr	r0, [pc, #16]	; (23fcf94 <hal_i2c_flush+0x14>)
 23fcf84:	6800      	ldr	r0, [r0, #0]
 23fcf86:	4b04      	ldr	r3, [pc, #16]	; (23fcf98 <hal_i2c_flush+0x18>)
 23fcf88:	4403      	add	r3, r0
 23fcf8a:	681b      	ldr	r3, [r3, #0]
 23fcf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcf8e:	9302      	str	r3, [sp, #8]
 23fcf90:	bd09      	pop	{r0, r3, pc}
 23fcf92:	0000      	.short	0x0000
 23fcf94:	1007ad64 	.word	0x1007ad64
 23fcf98:	00000010 	.word	0x00000010

023fcf9c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fcf9c:	b509      	push	{r0, r3, lr}
 23fcf9e:	4804      	ldr	r0, [pc, #16]	; (23fcfb0 <hal_i2c_is_enabled+0x14>)
 23fcfa0:	6800      	ldr	r0, [r0, #0]
 23fcfa2:	4b04      	ldr	r3, [pc, #16]	; (23fcfb4 <hal_i2c_is_enabled+0x18>)
 23fcfa4:	4403      	add	r3, r0
 23fcfa6:	681b      	ldr	r3, [r3, #0]
 23fcfa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcfaa:	9302      	str	r3, [sp, #8]
 23fcfac:	bd09      	pop	{r0, r3, pc}
 23fcfae:	0000      	.short	0x0000
 23fcfb0:	1007ad64 	.word	0x1007ad64
 23fcfb4:	00000010 	.word	0x00000010

023fcfb8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fcfb8:	b509      	push	{r0, r3, lr}
 23fcfba:	4804      	ldr	r0, [pc, #16]	; (23fcfcc <hal_i2c_init+0x14>)
 23fcfbc:	6800      	ldr	r0, [r0, #0]
 23fcfbe:	4b04      	ldr	r3, [pc, #16]	; (23fcfd0 <hal_i2c_init+0x18>)
 23fcfc0:	4403      	add	r3, r0
 23fcfc2:	681b      	ldr	r3, [r3, #0]
 23fcfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcfc6:	9302      	str	r3, [sp, #8]
 23fcfc8:	bd09      	pop	{r0, r3, pc}
 23fcfca:	0000      	.short	0x0000
 23fcfcc:	1007ad64 	.word	0x1007ad64
 23fcfd0:	00000010 	.word	0x00000010

023fcfd4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fcfd4:	b509      	push	{r0, r3, lr}
 23fcfd6:	4804      	ldr	r0, [pc, #16]	; (23fcfe8 <hal_i2c_request_ex+0x14>)
 23fcfd8:	6800      	ldr	r0, [r0, #0]
 23fcfda:	4b04      	ldr	r3, [pc, #16]	; (23fcfec <hal_i2c_request_ex+0x18>)
 23fcfdc:	4403      	add	r3, r0
 23fcfde:	681b      	ldr	r3, [r3, #0]
 23fcfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fcfe2:	9302      	str	r3, [sp, #8]
 23fcfe4:	bd09      	pop	{r0, r3, pc}
 23fcfe6:	0000      	.short	0x0000
 23fcfe8:	1007ad64 	.word	0x1007ad64
 23fcfec:	00000010 	.word	0x00000010

023fcff0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fcff0:	b509      	push	{r0, r3, lr}
 23fcff2:	4804      	ldr	r0, [pc, #16]	; (23fd004 <inet_inet_ntop+0x14>)
 23fcff4:	6800      	ldr	r0, [r0, #0]
 23fcff6:	4b04      	ldr	r3, [pc, #16]	; (23fd008 <inet_inet_ntop+0x18>)
 23fcff8:	4403      	add	r3, r0
 23fcffa:	681b      	ldr	r3, [r3, #0]
 23fcffc:	695b      	ldr	r3, [r3, #20]
 23fcffe:	9302      	str	r3, [sp, #8]
 23fd000:	bd09      	pop	{r0, r3, pc}
 23fd002:	0000      	.short	0x0000
 23fd004:	1007ad64 	.word	0x1007ad64
 23fd008:	0000004c 	.word	0x0000004c

023fd00c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fd00c:	b509      	push	{r0, r3, lr}
 23fd00e:	4804      	ldr	r0, [pc, #16]	; (23fd020 <netdb_freeaddrinfo+0x14>)
 23fd010:	6800      	ldr	r0, [r0, #0]
 23fd012:	4b04      	ldr	r3, [pc, #16]	; (23fd024 <netdb_freeaddrinfo+0x18>)
 23fd014:	4403      	add	r3, r0
 23fd016:	681b      	ldr	r3, [r3, #0]
 23fd018:	689b      	ldr	r3, [r3, #8]
 23fd01a:	9302      	str	r3, [sp, #8]
 23fd01c:	bd09      	pop	{r0, r3, pc}
 23fd01e:	0000      	.short	0x0000
 23fd020:	1007ad64 	.word	0x1007ad64
 23fd024:	00000050 	.word	0x00000050

023fd028 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fd028:	b509      	push	{r0, r3, lr}
 23fd02a:	4804      	ldr	r0, [pc, #16]	; (23fd03c <netdb_getaddrinfo+0x14>)
 23fd02c:	6800      	ldr	r0, [r0, #0]
 23fd02e:	4b04      	ldr	r3, [pc, #16]	; (23fd040 <netdb_getaddrinfo+0x18>)
 23fd030:	4403      	add	r3, r0
 23fd032:	681b      	ldr	r3, [r3, #0]
 23fd034:	68db      	ldr	r3, [r3, #12]
 23fd036:	9302      	str	r3, [sp, #8]
 23fd038:	bd09      	pop	{r0, r3, pc}
 23fd03a:	0000      	.short	0x0000
 23fd03c:	1007ad64 	.word	0x1007ad64
 23fd040:	00000050 	.word	0x00000050

023fd044 <hal_spi_set_data_mode>:
DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fd044:	b509      	push	{r0, r3, lr}
 23fd046:	4804      	ldr	r0, [pc, #16]	; (23fd058 <hal_spi_set_data_mode+0x14>)
 23fd048:	6800      	ldr	r0, [r0, #0]
 23fd04a:	4b04      	ldr	r3, [pc, #16]	; (23fd05c <hal_spi_set_data_mode+0x18>)
 23fd04c:	4403      	add	r3, r0
 23fd04e:	681b      	ldr	r3, [r3, #0]
 23fd050:	68db      	ldr	r3, [r3, #12]
 23fd052:	9302      	str	r3, [sp, #8]
 23fd054:	bd09      	pop	{r0, r3, pc}
 23fd056:	0000      	.short	0x0000
 23fd058:	1007ad64 	.word	0x1007ad64
 23fd05c:	00000018 	.word	0x00000018

023fd060 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fd060:	b509      	push	{r0, r3, lr}
 23fd062:	4804      	ldr	r0, [pc, #16]	; (23fd074 <hal_spi_set_clock_divider+0x14>)
 23fd064:	6800      	ldr	r0, [r0, #0]
 23fd066:	4b04      	ldr	r3, [pc, #16]	; (23fd078 <hal_spi_set_clock_divider+0x18>)
 23fd068:	4403      	add	r3, r0
 23fd06a:	681b      	ldr	r3, [r3, #0]
 23fd06c:	691b      	ldr	r3, [r3, #16]
 23fd06e:	9302      	str	r3, [sp, #8]
 23fd070:	bd09      	pop	{r0, r3, pc}
 23fd072:	0000      	.short	0x0000
 23fd074:	1007ad64 	.word	0x1007ad64
 23fd078:	00000018 	.word	0x00000018

023fd07c <hal_spi_init>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fd07c:	b509      	push	{r0, r3, lr}
 23fd07e:	4804      	ldr	r0, [pc, #16]	; (23fd090 <hal_spi_init+0x14>)
 23fd080:	6800      	ldr	r0, [r0, #0]
 23fd082:	4b04      	ldr	r3, [pc, #16]	; (23fd094 <hal_spi_init+0x18>)
 23fd084:	4403      	add	r3, r0
 23fd086:	681b      	ldr	r3, [r3, #0]
 23fd088:	69db      	ldr	r3, [r3, #28]
 23fd08a:	9302      	str	r3, [sp, #8]
 23fd08c:	bd09      	pop	{r0, r3, pc}
 23fd08e:	0000      	.short	0x0000
 23fd090:	1007ad64 	.word	0x1007ad64
 23fd094:	00000018 	.word	0x00000018

023fd098 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fd098:	b509      	push	{r0, r3, lr}
 23fd09a:	4804      	ldr	r0, [pc, #16]	; (23fd0ac <hal_spi_is_enabled+0x14>)
 23fd09c:	6800      	ldr	r0, [r0, #0]
 23fd09e:	4b04      	ldr	r3, [pc, #16]	; (23fd0b0 <hal_spi_is_enabled+0x18>)
 23fd0a0:	4403      	add	r3, r0
 23fd0a2:	681b      	ldr	r3, [r3, #0]
 23fd0a4:	6a1b      	ldr	r3, [r3, #32]
 23fd0a6:	9302      	str	r3, [sp, #8]
 23fd0a8:	bd09      	pop	{r0, r3, pc}
 23fd0aa:	0000      	.short	0x0000
 23fd0ac:	1007ad64 	.word	0x1007ad64
 23fd0b0:	00000018 	.word	0x00000018

023fd0b4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fd0b4:	b509      	push	{r0, r3, lr}
 23fd0b6:	4804      	ldr	r0, [pc, #16]	; (23fd0c8 <hal_spi_info+0x14>)
 23fd0b8:	6800      	ldr	r0, [r0, #0]
 23fd0ba:	4b04      	ldr	r3, [pc, #16]	; (23fd0cc <hal_spi_info+0x18>)
 23fd0bc:	4403      	add	r3, r0
 23fd0be:	681b      	ldr	r3, [r3, #0]
 23fd0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd0c2:	9302      	str	r3, [sp, #8]
 23fd0c4:	bd09      	pop	{r0, r3, pc}
 23fd0c6:	0000      	.short	0x0000
 23fd0c8:	1007ad64 	.word	0x1007ad64
 23fd0cc:	00000018 	.word	0x00000018

023fd0d0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fd0d0:	b509      	push	{r0, r3, lr}
 23fd0d2:	4804      	ldr	r0, [pc, #16]	; (23fd0e4 <hal_spi_transfer_dma+0x14>)
 23fd0d4:	6800      	ldr	r0, [r0, #0]
 23fd0d6:	4b04      	ldr	r3, [pc, #16]	; (23fd0e8 <hal_spi_transfer_dma+0x18>)
 23fd0d8:	4403      	add	r3, r0
 23fd0da:	681b      	ldr	r3, [r3, #0]
 23fd0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd0de:	9302      	str	r3, [sp, #8]
 23fd0e0:	bd09      	pop	{r0, r3, pc}
 23fd0e2:	0000      	.short	0x0000
 23fd0e4:	1007ad64 	.word	0x1007ad64
 23fd0e8:	00000018 	.word	0x00000018

023fd0ec <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
 23fd0ec:	b509      	push	{r0, r3, lr}
 23fd0ee:	4804      	ldr	r0, [pc, #16]	; (23fd100 <hal_spi_begin_ext+0x14>)
 23fd0f0:	6800      	ldr	r0, [r0, #0]
 23fd0f2:	4b04      	ldr	r3, [pc, #16]	; (23fd104 <hal_spi_begin_ext+0x18>)
 23fd0f4:	4403      	add	r3, r0
 23fd0f6:	681b      	ldr	r3, [r3, #0]
 23fd0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd0fa:	9302      	str	r3, [sp, #8]
 23fd0fc:	bd09      	pop	{r0, r3, pc}
 23fd0fe:	0000      	.short	0x0000
 23fd100:	1007ad64 	.word	0x1007ad64
 23fd104:	00000018 	.word	0x00000018

023fd108 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fd108:	b509      	push	{r0, r3, lr}
 23fd10a:	4804      	ldr	r0, [pc, #16]	; (23fd11c <hal_spi_transfer_dma_status+0x14>)
 23fd10c:	6800      	ldr	r0, [r0, #0]
 23fd10e:	4b04      	ldr	r3, [pc, #16]	; (23fd120 <hal_spi_transfer_dma_status+0x18>)
 23fd110:	4403      	add	r3, r0
 23fd112:	681b      	ldr	r3, [r3, #0]
 23fd114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fd116:	9302      	str	r3, [sp, #8]
 23fd118:	bd09      	pop	{r0, r3, pc}
 23fd11a:	0000      	.short	0x0000
 23fd11c:	1007ad64 	.word	0x1007ad64
 23fd120:	00000018 	.word	0x00000018

023fd124 <hal_spi_acquire>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fd124:	b509      	push	{r0, r3, lr}
 23fd126:	4804      	ldr	r0, [pc, #16]	; (23fd138 <hal_spi_acquire+0x14>)
 23fd128:	6800      	ldr	r0, [r0, #0]
 23fd12a:	4b04      	ldr	r3, [pc, #16]	; (23fd13c <hal_spi_acquire+0x18>)
 23fd12c:	4403      	add	r3, r0
 23fd12e:	681b      	ldr	r3, [r3, #0]
 23fd130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd132:	9302      	str	r3, [sp, #8]
 23fd134:	bd09      	pop	{r0, r3, pc}
 23fd136:	0000      	.short	0x0000
 23fd138:	1007ad64 	.word	0x1007ad64
 23fd13c:	00000018 	.word	0x00000018

023fd140 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fd140:	b509      	push	{r0, r3, lr}
 23fd142:	4804      	ldr	r0, [pc, #16]	; (23fd154 <hal_spi_release+0x14>)
 23fd144:	6800      	ldr	r0, [r0, #0]
 23fd146:	4b04      	ldr	r3, [pc, #16]	; (23fd158 <hal_spi_release+0x18>)
 23fd148:	4403      	add	r3, r0
 23fd14a:	681b      	ldr	r3, [r3, #0]
 23fd14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd14e:	9302      	str	r3, [sp, #8]
 23fd150:	bd09      	pop	{r0, r3, pc}
 23fd152:	0000      	.short	0x0000
 23fd154:	1007ad64 	.word	0x1007ad64
 23fd158:	00000018 	.word	0x00000018

023fd15c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fd15c:	b509      	push	{r0, r3, lr}
 23fd15e:	4804      	ldr	r0, [pc, #16]	; (23fd170 <hal_usart_end+0x14>)
 23fd160:	6800      	ldr	r0, [r0, #0]
 23fd162:	4b04      	ldr	r3, [pc, #16]	; (23fd174 <hal_usart_end+0x18>)
 23fd164:	4403      	add	r3, r0
 23fd166:	681b      	ldr	r3, [r3, #0]
 23fd168:	689b      	ldr	r3, [r3, #8]
 23fd16a:	9302      	str	r3, [sp, #8]
 23fd16c:	bd09      	pop	{r0, r3, pc}
 23fd16e:	0000      	.short	0x0000
 23fd170:	1007ad64 	.word	0x1007ad64
 23fd174:	00000024 	.word	0x00000024

023fd178 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fd178:	b509      	push	{r0, r3, lr}
 23fd17a:	4804      	ldr	r0, [pc, #16]	; (23fd18c <hal_usart_write+0x14>)
 23fd17c:	6800      	ldr	r0, [r0, #0]
 23fd17e:	4b04      	ldr	r3, [pc, #16]	; (23fd190 <hal_usart_write+0x18>)
 23fd180:	4403      	add	r3, r0
 23fd182:	681b      	ldr	r3, [r3, #0]
 23fd184:	68db      	ldr	r3, [r3, #12]
 23fd186:	9302      	str	r3, [sp, #8]
 23fd188:	bd09      	pop	{r0, r3, pc}
 23fd18a:	0000      	.short	0x0000
 23fd18c:	1007ad64 	.word	0x1007ad64
 23fd190:	00000024 	.word	0x00000024

023fd194 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fd194:	b509      	push	{r0, r3, lr}
 23fd196:	4804      	ldr	r0, [pc, #16]	; (23fd1a8 <hal_usart_available+0x14>)
 23fd198:	6800      	ldr	r0, [r0, #0]
 23fd19a:	4b04      	ldr	r3, [pc, #16]	; (23fd1ac <hal_usart_available+0x18>)
 23fd19c:	4403      	add	r3, r0
 23fd19e:	681b      	ldr	r3, [r3, #0]
 23fd1a0:	691b      	ldr	r3, [r3, #16]
 23fd1a2:	9302      	str	r3, [sp, #8]
 23fd1a4:	bd09      	pop	{r0, r3, pc}
 23fd1a6:	0000      	.short	0x0000
 23fd1a8:	1007ad64 	.word	0x1007ad64
 23fd1ac:	00000024 	.word	0x00000024

023fd1b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fd1b0:	b509      	push	{r0, r3, lr}
 23fd1b2:	4804      	ldr	r0, [pc, #16]	; (23fd1c4 <hal_usart_read+0x14>)
 23fd1b4:	6800      	ldr	r0, [r0, #0]
 23fd1b6:	4b04      	ldr	r3, [pc, #16]	; (23fd1c8 <hal_usart_read+0x18>)
 23fd1b8:	4403      	add	r3, r0
 23fd1ba:	681b      	ldr	r3, [r3, #0]
 23fd1bc:	695b      	ldr	r3, [r3, #20]
 23fd1be:	9302      	str	r3, [sp, #8]
 23fd1c0:	bd09      	pop	{r0, r3, pc}
 23fd1c2:	0000      	.short	0x0000
 23fd1c4:	1007ad64 	.word	0x1007ad64
 23fd1c8:	00000024 	.word	0x00000024

023fd1cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fd1cc:	b509      	push	{r0, r3, lr}
 23fd1ce:	4804      	ldr	r0, [pc, #16]	; (23fd1e0 <hal_usart_peek+0x14>)
 23fd1d0:	6800      	ldr	r0, [r0, #0]
 23fd1d2:	4b04      	ldr	r3, [pc, #16]	; (23fd1e4 <hal_usart_peek+0x18>)
 23fd1d4:	4403      	add	r3, r0
 23fd1d6:	681b      	ldr	r3, [r3, #0]
 23fd1d8:	699b      	ldr	r3, [r3, #24]
 23fd1da:	9302      	str	r3, [sp, #8]
 23fd1dc:	bd09      	pop	{r0, r3, pc}
 23fd1de:	0000      	.short	0x0000
 23fd1e0:	1007ad64 	.word	0x1007ad64
 23fd1e4:	00000024 	.word	0x00000024

023fd1e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fd1e8:	b509      	push	{r0, r3, lr}
 23fd1ea:	4804      	ldr	r0, [pc, #16]	; (23fd1fc <hal_usart_flush+0x14>)
 23fd1ec:	6800      	ldr	r0, [r0, #0]
 23fd1ee:	4b04      	ldr	r3, [pc, #16]	; (23fd200 <hal_usart_flush+0x18>)
 23fd1f0:	4403      	add	r3, r0
 23fd1f2:	681b      	ldr	r3, [r3, #0]
 23fd1f4:	69db      	ldr	r3, [r3, #28]
 23fd1f6:	9302      	str	r3, [sp, #8]
 23fd1f8:	bd09      	pop	{r0, r3, pc}
 23fd1fa:	0000      	.short	0x0000
 23fd1fc:	1007ad64 	.word	0x1007ad64
 23fd200:	00000024 	.word	0x00000024

023fd204 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fd204:	b509      	push	{r0, r3, lr}
 23fd206:	4804      	ldr	r0, [pc, #16]	; (23fd218 <hal_usart_is_enabled+0x14>)
 23fd208:	6800      	ldr	r0, [r0, #0]
 23fd20a:	4b04      	ldr	r3, [pc, #16]	; (23fd21c <hal_usart_is_enabled+0x18>)
 23fd20c:	4403      	add	r3, r0
 23fd20e:	681b      	ldr	r3, [r3, #0]
 23fd210:	6a1b      	ldr	r3, [r3, #32]
 23fd212:	9302      	str	r3, [sp, #8]
 23fd214:	bd09      	pop	{r0, r3, pc}
 23fd216:	0000      	.short	0x0000
 23fd218:	1007ad64 	.word	0x1007ad64
 23fd21c:	00000024 	.word	0x00000024

023fd220 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fd220:	b509      	push	{r0, r3, lr}
 23fd222:	4804      	ldr	r0, [pc, #16]	; (23fd234 <hal_usart_available_data_for_write+0x14>)
 23fd224:	6800      	ldr	r0, [r0, #0]
 23fd226:	4b04      	ldr	r3, [pc, #16]	; (23fd238 <hal_usart_available_data_for_write+0x18>)
 23fd228:	4403      	add	r3, r0
 23fd22a:	681b      	ldr	r3, [r3, #0]
 23fd22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd22e:	9302      	str	r3, [sp, #8]
 23fd230:	bd09      	pop	{r0, r3, pc}
 23fd232:	0000      	.short	0x0000
 23fd234:	1007ad64 	.word	0x1007ad64
 23fd238:	00000024 	.word	0x00000024

023fd23c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fd23c:	b509      	push	{r0, r3, lr}
 23fd23e:	4804      	ldr	r0, [pc, #16]	; (23fd250 <hal_usart_begin_config+0x14>)
 23fd240:	6800      	ldr	r0, [r0, #0]
 23fd242:	4b04      	ldr	r3, [pc, #16]	; (23fd254 <hal_usart_begin_config+0x18>)
 23fd244:	4403      	add	r3, r0
 23fd246:	681b      	ldr	r3, [r3, #0]
 23fd248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd24a:	9302      	str	r3, [sp, #8]
 23fd24c:	bd09      	pop	{r0, r3, pc}
 23fd24e:	0000      	.short	0x0000
 23fd250:	1007ad64 	.word	0x1007ad64
 23fd254:	00000024 	.word	0x00000024

023fd258 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fd258:	b509      	push	{r0, r3, lr}
 23fd25a:	4804      	ldr	r0, [pc, #16]	; (23fd26c <hal_usart_init_ex+0x14>)
 23fd25c:	6800      	ldr	r0, [r0, #0]
 23fd25e:	4b04      	ldr	r3, [pc, #16]	; (23fd270 <hal_usart_init_ex+0x18>)
 23fd260:	4403      	add	r3, r0
 23fd262:	681b      	ldr	r3, [r3, #0]
 23fd264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd266:	9302      	str	r3, [sp, #8]
 23fd268:	bd09      	pop	{r0, r3, pc}
 23fd26a:	0000      	.short	0x0000
 23fd26c:	1007ad64 	.word	0x1007ad64
 23fd270:	00000024 	.word	0x00000024

023fd274 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd274:	b509      	push	{r0, r3, lr}
 23fd276:	4804      	ldr	r0, [pc, #16]	; (23fd288 <HAL_USB_USART_Init+0x14>)
 23fd278:	6800      	ldr	r0, [r0, #0]
 23fd27a:	4b04      	ldr	r3, [pc, #16]	; (23fd28c <HAL_USB_USART_Init+0x18>)
 23fd27c:	4403      	add	r3, r0
 23fd27e:	681b      	ldr	r3, [r3, #0]
 23fd280:	681b      	ldr	r3, [r3, #0]
 23fd282:	9302      	str	r3, [sp, #8]
 23fd284:	bd09      	pop	{r0, r3, pc}
 23fd286:	0000      	.short	0x0000
 23fd288:	1007ad64 	.word	0x1007ad64
 23fd28c:	00000034 	.word	0x00000034

023fd290 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd290:	b509      	push	{r0, r3, lr}
 23fd292:	4804      	ldr	r0, [pc, #16]	; (23fd2a4 <HAL_USB_USART_Begin+0x14>)
 23fd294:	6800      	ldr	r0, [r0, #0]
 23fd296:	4b04      	ldr	r3, [pc, #16]	; (23fd2a8 <HAL_USB_USART_Begin+0x18>)
 23fd298:	4403      	add	r3, r0
 23fd29a:	681b      	ldr	r3, [r3, #0]
 23fd29c:	685b      	ldr	r3, [r3, #4]
 23fd29e:	9302      	str	r3, [sp, #8]
 23fd2a0:	bd09      	pop	{r0, r3, pc}
 23fd2a2:	0000      	.short	0x0000
 23fd2a4:	1007ad64 	.word	0x1007ad64
 23fd2a8:	00000034 	.word	0x00000034

023fd2ac <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fd2ac:	b509      	push	{r0, r3, lr}
 23fd2ae:	4804      	ldr	r0, [pc, #16]	; (23fd2c0 <HAL_USB_USART_End+0x14>)
 23fd2b0:	6800      	ldr	r0, [r0, #0]
 23fd2b2:	4b04      	ldr	r3, [pc, #16]	; (23fd2c4 <HAL_USB_USART_End+0x18>)
 23fd2b4:	4403      	add	r3, r0
 23fd2b6:	681b      	ldr	r3, [r3, #0]
 23fd2b8:	689b      	ldr	r3, [r3, #8]
 23fd2ba:	9302      	str	r3, [sp, #8]
 23fd2bc:	bd09      	pop	{r0, r3, pc}
 23fd2be:	0000      	.short	0x0000
 23fd2c0:	1007ad64 	.word	0x1007ad64
 23fd2c4:	00000034 	.word	0x00000034

023fd2c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd2c8:	b509      	push	{r0, r3, lr}
 23fd2ca:	4804      	ldr	r0, [pc, #16]	; (23fd2dc <HAL_USB_USART_Available_Data+0x14>)
 23fd2cc:	6800      	ldr	r0, [r0, #0]
 23fd2ce:	4b04      	ldr	r3, [pc, #16]	; (23fd2e0 <HAL_USB_USART_Available_Data+0x18>)
 23fd2d0:	4403      	add	r3, r0
 23fd2d2:	681b      	ldr	r3, [r3, #0]
 23fd2d4:	691b      	ldr	r3, [r3, #16]
 23fd2d6:	9302      	str	r3, [sp, #8]
 23fd2d8:	bd09      	pop	{r0, r3, pc}
 23fd2da:	0000      	.short	0x0000
 23fd2dc:	1007ad64 	.word	0x1007ad64
 23fd2e0:	00000034 	.word	0x00000034

023fd2e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd2e4:	b509      	push	{r0, r3, lr}
 23fd2e6:	4804      	ldr	r0, [pc, #16]	; (23fd2f8 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd2e8:	6800      	ldr	r0, [r0, #0]
 23fd2ea:	4b04      	ldr	r3, [pc, #16]	; (23fd2fc <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd2ec:	4403      	add	r3, r0
 23fd2ee:	681b      	ldr	r3, [r3, #0]
 23fd2f0:	695b      	ldr	r3, [r3, #20]
 23fd2f2:	9302      	str	r3, [sp, #8]
 23fd2f4:	bd09      	pop	{r0, r3, pc}
 23fd2f6:	0000      	.short	0x0000
 23fd2f8:	1007ad64 	.word	0x1007ad64
 23fd2fc:	00000034 	.word	0x00000034

023fd300 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd300:	b509      	push	{r0, r3, lr}
 23fd302:	4804      	ldr	r0, [pc, #16]	; (23fd314 <HAL_USB_USART_Receive_Data+0x14>)
 23fd304:	6800      	ldr	r0, [r0, #0]
 23fd306:	4b04      	ldr	r3, [pc, #16]	; (23fd318 <HAL_USB_USART_Receive_Data+0x18>)
 23fd308:	4403      	add	r3, r0
 23fd30a:	681b      	ldr	r3, [r3, #0]
 23fd30c:	699b      	ldr	r3, [r3, #24]
 23fd30e:	9302      	str	r3, [sp, #8]
 23fd310:	bd09      	pop	{r0, r3, pc}
 23fd312:	0000      	.short	0x0000
 23fd314:	1007ad64 	.word	0x1007ad64
 23fd318:	00000034 	.word	0x00000034

023fd31c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd31c:	b509      	push	{r0, r3, lr}
 23fd31e:	4804      	ldr	r0, [pc, #16]	; (23fd330 <HAL_USB_USART_Send_Data+0x14>)
 23fd320:	6800      	ldr	r0, [r0, #0]
 23fd322:	4b04      	ldr	r3, [pc, #16]	; (23fd334 <HAL_USB_USART_Send_Data+0x18>)
 23fd324:	4403      	add	r3, r0
 23fd326:	681b      	ldr	r3, [r3, #0]
 23fd328:	69db      	ldr	r3, [r3, #28]
 23fd32a:	9302      	str	r3, [sp, #8]
 23fd32c:	bd09      	pop	{r0, r3, pc}
 23fd32e:	0000      	.short	0x0000
 23fd330:	1007ad64 	.word	0x1007ad64
 23fd334:	00000034 	.word	0x00000034

023fd338 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd338:	b509      	push	{r0, r3, lr}
 23fd33a:	4804      	ldr	r0, [pc, #16]	; (23fd34c <HAL_USB_USART_Flush_Data+0x14>)
 23fd33c:	6800      	ldr	r0, [r0, #0]
 23fd33e:	4b04      	ldr	r3, [pc, #16]	; (23fd350 <HAL_USB_USART_Flush_Data+0x18>)
 23fd340:	4403      	add	r3, r0
 23fd342:	681b      	ldr	r3, [r3, #0]
 23fd344:	6a1b      	ldr	r3, [r3, #32]
 23fd346:	9302      	str	r3, [sp, #8]
 23fd348:	bd09      	pop	{r0, r3, pc}
 23fd34a:	0000      	.short	0x0000
 23fd34c:	1007ad64 	.word	0x1007ad64
 23fd350:	00000034 	.word	0x00000034

023fd354 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd354:	b509      	push	{r0, r3, lr}
 23fd356:	4804      	ldr	r0, [pc, #16]	; (23fd368 <panic_+0x14>)
 23fd358:	6800      	ldr	r0, [r0, #0]
 23fd35a:	4b04      	ldr	r3, [pc, #16]	; (23fd36c <panic_+0x18>)
 23fd35c:	4403      	add	r3, r0
 23fd35e:	681b      	ldr	r3, [r3, #0]
 23fd360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd362:	9302      	str	r3, [sp, #8]
 23fd364:	bd09      	pop	{r0, r3, pc}
 23fd366:	0000      	.short	0x0000
 23fd368:	1007ad64 	.word	0x1007ad64
 23fd36c:	00000048 	.word	0x00000048

023fd370 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fd370:	b509      	push	{r0, r3, lr}
 23fd372:	4804      	ldr	r0, [pc, #16]	; (23fd384 <log_message_v+0x14>)
 23fd374:	6800      	ldr	r0, [r0, #0]
 23fd376:	4b04      	ldr	r3, [pc, #16]	; (23fd388 <log_message_v+0x18>)
 23fd378:	4403      	add	r3, r0
 23fd37a:	681b      	ldr	r3, [r3, #0]
 23fd37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd37e:	9302      	str	r3, [sp, #8]
 23fd380:	bd09      	pop	{r0, r3, pc}
 23fd382:	0000      	.short	0x0000
 23fd384:	1007ad64 	.word	0x1007ad64
 23fd388:	00000048 	.word	0x00000048

023fd38c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fd38c:	b509      	push	{r0, r3, lr}
 23fd38e:	4804      	ldr	r0, [pc, #16]	; (23fd3a0 <log_level_name+0x14>)
 23fd390:	6800      	ldr	r0, [r0, #0]
 23fd392:	4b04      	ldr	r3, [pc, #16]	; (23fd3a4 <log_level_name+0x18>)
 23fd394:	4403      	add	r3, r0
 23fd396:	681b      	ldr	r3, [r3, #0]
 23fd398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fd39a:	9302      	str	r3, [sp, #8]
 23fd39c:	bd09      	pop	{r0, r3, pc}
 23fd39e:	0000      	.short	0x0000
 23fd3a0:	1007ad64 	.word	0x1007ad64
 23fd3a4:	00000048 	.word	0x00000048

023fd3a8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fd3a8:	b509      	push	{r0, r3, lr}
 23fd3aa:	4804      	ldr	r0, [pc, #16]	; (23fd3bc <log_set_callbacks+0x14>)
 23fd3ac:	6800      	ldr	r0, [r0, #0]
 23fd3ae:	4b04      	ldr	r3, [pc, #16]	; (23fd3c0 <log_set_callbacks+0x18>)
 23fd3b0:	4403      	add	r3, r0
 23fd3b2:	681b      	ldr	r3, [r3, #0]
 23fd3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fd3b6:	9302      	str	r3, [sp, #8]
 23fd3b8:	bd09      	pop	{r0, r3, pc}
 23fd3ba:	0000      	.short	0x0000
 23fd3bc:	1007ad64 	.word	0x1007ad64
 23fd3c0:	00000048 	.word	0x00000048

023fd3c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd3c4:	b509      	push	{r0, r3, lr}
 23fd3c6:	4804      	ldr	r0, [pc, #16]	; (23fd3d8 <set_system_mode+0x14>)
 23fd3c8:	6800      	ldr	r0, [r0, #0]
 23fd3ca:	4b04      	ldr	r3, [pc, #16]	; (23fd3dc <set_system_mode+0x18>)
 23fd3cc:	4403      	add	r3, r0
 23fd3ce:	681b      	ldr	r3, [r3, #0]
 23fd3d0:	685b      	ldr	r3, [r3, #4]
 23fd3d2:	9302      	str	r3, [sp, #8]
 23fd3d4:	bd09      	pop	{r0, r3, pc}
 23fd3d6:	0000      	.short	0x0000
 23fd3d8:	1007ad64 	.word	0x1007ad64
 23fd3dc:	00000008 	.word	0x00000008

023fd3e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd3e0:	b509      	push	{r0, r3, lr}
 23fd3e2:	4804      	ldr	r0, [pc, #16]	; (23fd3f4 <system_delay_ms+0x14>)
 23fd3e4:	6800      	ldr	r0, [r0, #0]
 23fd3e6:	4b04      	ldr	r3, [pc, #16]	; (23fd3f8 <system_delay_ms+0x18>)
 23fd3e8:	4403      	add	r3, r0
 23fd3ea:	681b      	ldr	r3, [r3, #0]
 23fd3ec:	695b      	ldr	r3, [r3, #20]
 23fd3ee:	9302      	str	r3, [sp, #8]
 23fd3f0:	bd09      	pop	{r0, r3, pc}
 23fd3f2:	0000      	.short	0x0000
 23fd3f4:	1007ad64 	.word	0x1007ad64
 23fd3f8:	00000008 	.word	0x00000008

023fd3fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fd3fc:	b509      	push	{r0, r3, lr}
 23fd3fe:	4804      	ldr	r0, [pc, #16]	; (23fd410 <system_thread_set_state+0x14>)
 23fd400:	6800      	ldr	r0, [r0, #0]
 23fd402:	4b04      	ldr	r3, [pc, #16]	; (23fd414 <system_thread_set_state+0x18>)
 23fd404:	4403      	add	r3, r0
 23fd406:	681b      	ldr	r3, [r3, #0]
 23fd408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd40a:	9302      	str	r3, [sp, #8]
 23fd40c:	bd09      	pop	{r0, r3, pc}
 23fd40e:	0000      	.short	0x0000
 23fd410:	1007ad64 	.word	0x1007ad64
 23fd414:	00000008 	.word	0x00000008

023fd418 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd418:	b509      	push	{r0, r3, lr}
 23fd41a:	4804      	ldr	r0, [pc, #16]	; (23fd42c <system_ctrl_set_app_request_handler+0x14>)
 23fd41c:	6800      	ldr	r0, [r0, #0]
 23fd41e:	4b04      	ldr	r3, [pc, #16]	; (23fd430 <system_ctrl_set_app_request_handler+0x18>)
 23fd420:	4403      	add	r3, r0
 23fd422:	681b      	ldr	r3, [r3, #0]
 23fd424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd428:	9302      	str	r3, [sp, #8]
 23fd42a:	bd09      	pop	{r0, r3, pc}
 23fd42c:	1007ad64 	.word	0x1007ad64
 23fd430:	00000008 	.word	0x00000008

023fd434 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd434:	b509      	push	{r0, r3, lr}
 23fd436:	4804      	ldr	r0, [pc, #16]	; (23fd448 <system_ctrl_set_result+0x14>)
 23fd438:	6800      	ldr	r0, [r0, #0]
 23fd43a:	4b04      	ldr	r3, [pc, #16]	; (23fd44c <system_ctrl_set_result+0x18>)
 23fd43c:	4403      	add	r3, r0
 23fd43e:	681b      	ldr	r3, [r3, #0]
 23fd440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd444:	9302      	str	r3, [sp, #8]
 23fd446:	bd09      	pop	{r0, r3, pc}
 23fd448:	1007ad64 	.word	0x1007ad64
 23fd44c:	00000008 	.word	0x00000008

023fd450 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd450:	b509      	push	{r0, r3, lr}
 23fd452:	4804      	ldr	r0, [pc, #16]	; (23fd464 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd454:	6800      	ldr	r0, [r0, #0]
 23fd456:	4b04      	ldr	r3, [pc, #16]	; (23fd468 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd458:	4403      	add	r3, r0
 23fd45a:	681b      	ldr	r3, [r3, #0]
 23fd45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd45e:	9302      	str	r3, [sp, #8]
 23fd460:	bd09      	pop	{r0, r3, pc}
 23fd462:	0000      	.short	0x0000
 23fd464:	1007ad64 	.word	0x1007ad64
 23fd468:	0000002c 	.word	0x0000002c

023fd46c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fd46c:	b509      	push	{r0, r3, lr}
 23fd46e:	4804      	ldr	r0, [pc, #16]	; (23fd480 <spark_cloud_disconnect+0x14>)
 23fd470:	6800      	ldr	r0, [r0, #0]
 23fd472:	4b04      	ldr	r3, [pc, #16]	; (23fd484 <spark_cloud_disconnect+0x18>)
 23fd474:	4403      	add	r3, r0
 23fd476:	681b      	ldr	r3, [r3, #0]
 23fd478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd47a:	9302      	str	r3, [sp, #8]
 23fd47c:	bd09      	pop	{r0, r3, pc}
 23fd47e:	0000      	.short	0x0000
 23fd480:	1007ad64 	.word	0x1007ad64
 23fd484:	0000002c 	.word	0x0000002c

023fd488 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd488:	b509      	push	{r0, r3, lr}
 23fd48a:	4804      	ldr	r0, [pc, #16]	; (23fd49c <network_connect+0x14>)
 23fd48c:	6800      	ldr	r0, [r0, #0]
 23fd48e:	4b04      	ldr	r3, [pc, #16]	; (23fd4a0 <network_connect+0x18>)
 23fd490:	4403      	add	r3, r0
 23fd492:	681b      	ldr	r3, [r3, #0]
 23fd494:	685b      	ldr	r3, [r3, #4]
 23fd496:	9302      	str	r3, [sp, #8]
 23fd498:	bd09      	pop	{r0, r3, pc}
 23fd49a:	0000      	.short	0x0000
 23fd49c:	1007ad64 	.word	0x1007ad64
 23fd4a0:	00000028 	.word	0x00000028

023fd4a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd4a4:	b509      	push	{r0, r3, lr}
 23fd4a6:	4804      	ldr	r0, [pc, #16]	; (23fd4b8 <network_connecting+0x14>)
 23fd4a8:	6800      	ldr	r0, [r0, #0]
 23fd4aa:	4b04      	ldr	r3, [pc, #16]	; (23fd4bc <network_connecting+0x18>)
 23fd4ac:	4403      	add	r3, r0
 23fd4ae:	681b      	ldr	r3, [r3, #0]
 23fd4b0:	689b      	ldr	r3, [r3, #8]
 23fd4b2:	9302      	str	r3, [sp, #8]
 23fd4b4:	bd09      	pop	{r0, r3, pc}
 23fd4b6:	0000      	.short	0x0000
 23fd4b8:	1007ad64 	.word	0x1007ad64
 23fd4bc:	00000028 	.word	0x00000028

023fd4c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd4c0:	b509      	push	{r0, r3, lr}
 23fd4c2:	4804      	ldr	r0, [pc, #16]	; (23fd4d4 <network_disconnect+0x14>)
 23fd4c4:	6800      	ldr	r0, [r0, #0]
 23fd4c6:	4b04      	ldr	r3, [pc, #16]	; (23fd4d8 <network_disconnect+0x18>)
 23fd4c8:	4403      	add	r3, r0
 23fd4ca:	681b      	ldr	r3, [r3, #0]
 23fd4cc:	68db      	ldr	r3, [r3, #12]
 23fd4ce:	9302      	str	r3, [sp, #8]
 23fd4d0:	bd09      	pop	{r0, r3, pc}
 23fd4d2:	0000      	.short	0x0000
 23fd4d4:	1007ad64 	.word	0x1007ad64
 23fd4d8:	00000028 	.word	0x00000028

023fd4dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd4dc:	b509      	push	{r0, r3, lr}
 23fd4de:	4804      	ldr	r0, [pc, #16]	; (23fd4f0 <network_ready+0x14>)
 23fd4e0:	6800      	ldr	r0, [r0, #0]
 23fd4e2:	4b04      	ldr	r3, [pc, #16]	; (23fd4f4 <network_ready+0x18>)
 23fd4e4:	4403      	add	r3, r0
 23fd4e6:	681b      	ldr	r3, [r3, #0]
 23fd4e8:	691b      	ldr	r3, [r3, #16]
 23fd4ea:	9302      	str	r3, [sp, #8]
 23fd4ec:	bd09      	pop	{r0, r3, pc}
 23fd4ee:	0000      	.short	0x0000
 23fd4f0:	1007ad64 	.word	0x1007ad64
 23fd4f4:	00000028 	.word	0x00000028

023fd4f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd4f8:	b509      	push	{r0, r3, lr}
 23fd4fa:	4804      	ldr	r0, [pc, #16]	; (23fd50c <network_on+0x14>)
 23fd4fc:	6800      	ldr	r0, [r0, #0]
 23fd4fe:	4b04      	ldr	r3, [pc, #16]	; (23fd510 <network_on+0x18>)
 23fd500:	4403      	add	r3, r0
 23fd502:	681b      	ldr	r3, [r3, #0]
 23fd504:	695b      	ldr	r3, [r3, #20]
 23fd506:	9302      	str	r3, [sp, #8]
 23fd508:	bd09      	pop	{r0, r3, pc}
 23fd50a:	0000      	.short	0x0000
 23fd50c:	1007ad64 	.word	0x1007ad64
 23fd510:	00000028 	.word	0x00000028

023fd514 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd514:	b509      	push	{r0, r3, lr}
 23fd516:	4804      	ldr	r0, [pc, #16]	; (23fd528 <network_off+0x14>)
 23fd518:	6800      	ldr	r0, [r0, #0]
 23fd51a:	4b04      	ldr	r3, [pc, #16]	; (23fd52c <network_off+0x18>)
 23fd51c:	4403      	add	r3, r0
 23fd51e:	681b      	ldr	r3, [r3, #0]
 23fd520:	699b      	ldr	r3, [r3, #24]
 23fd522:	9302      	str	r3, [sp, #8]
 23fd524:	bd09      	pop	{r0, r3, pc}
 23fd526:	0000      	.short	0x0000
 23fd528:	1007ad64 	.word	0x1007ad64
 23fd52c:	00000028 	.word	0x00000028

023fd530 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd530:	b509      	push	{r0, r3, lr}
 23fd532:	4804      	ldr	r0, [pc, #16]	; (23fd544 <network_listen+0x14>)
 23fd534:	6800      	ldr	r0, [r0, #0]
 23fd536:	4b04      	ldr	r3, [pc, #16]	; (23fd548 <network_listen+0x18>)
 23fd538:	4403      	add	r3, r0
 23fd53a:	681b      	ldr	r3, [r3, #0]
 23fd53c:	69db      	ldr	r3, [r3, #28]
 23fd53e:	9302      	str	r3, [sp, #8]
 23fd540:	bd09      	pop	{r0, r3, pc}
 23fd542:	0000      	.short	0x0000
 23fd544:	1007ad64 	.word	0x1007ad64
 23fd548:	00000028 	.word	0x00000028

023fd54c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd54c:	b509      	push	{r0, r3, lr}
 23fd54e:	4804      	ldr	r0, [pc, #16]	; (23fd560 <network_listening+0x14>)
 23fd550:	6800      	ldr	r0, [r0, #0]
 23fd552:	4b04      	ldr	r3, [pc, #16]	; (23fd564 <network_listening+0x18>)
 23fd554:	4403      	add	r3, r0
 23fd556:	681b      	ldr	r3, [r3, #0]
 23fd558:	6a1b      	ldr	r3, [r3, #32]
 23fd55a:	9302      	str	r3, [sp, #8]
 23fd55c:	bd09      	pop	{r0, r3, pc}
 23fd55e:	0000      	.short	0x0000
 23fd560:	1007ad64 	.word	0x1007ad64
 23fd564:	00000028 	.word	0x00000028

023fd568 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd568:	b509      	push	{r0, r3, lr}
 23fd56a:	4804      	ldr	r0, [pc, #16]	; (23fd57c <network_set_listen_timeout+0x14>)
 23fd56c:	6800      	ldr	r0, [r0, #0]
 23fd56e:	4b04      	ldr	r3, [pc, #16]	; (23fd580 <network_set_listen_timeout+0x18>)
 23fd570:	4403      	add	r3, r0
 23fd572:	681b      	ldr	r3, [r3, #0]
 23fd574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd576:	9302      	str	r3, [sp, #8]
 23fd578:	bd09      	pop	{r0, r3, pc}
 23fd57a:	0000      	.short	0x0000
 23fd57c:	1007ad64 	.word	0x1007ad64
 23fd580:	00000028 	.word	0x00000028

023fd584 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd584:	b509      	push	{r0, r3, lr}
 23fd586:	4804      	ldr	r0, [pc, #16]	; (23fd598 <network_get_listen_timeout+0x14>)
 23fd588:	6800      	ldr	r0, [r0, #0]
 23fd58a:	4b04      	ldr	r3, [pc, #16]	; (23fd59c <network_get_listen_timeout+0x18>)
 23fd58c:	4403      	add	r3, r0
 23fd58e:	681b      	ldr	r3, [r3, #0]
 23fd590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd592:	9302      	str	r3, [sp, #8]
 23fd594:	bd09      	pop	{r0, r3, pc}
 23fd596:	0000      	.short	0x0000
 23fd598:	1007ad64 	.word	0x1007ad64
 23fd59c:	00000028 	.word	0x00000028

023fd5a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd5a0:	b509      	push	{r0, r3, lr}
 23fd5a2:	4804      	ldr	r0, [pc, #16]	; (23fd5b4 <network_is_on+0x14>)
 23fd5a4:	6800      	ldr	r0, [r0, #0]
 23fd5a6:	4b04      	ldr	r3, [pc, #16]	; (23fd5b8 <network_is_on+0x18>)
 23fd5a8:	4403      	add	r3, r0
 23fd5aa:	681b      	ldr	r3, [r3, #0]
 23fd5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd5ae:	9302      	str	r3, [sp, #8]
 23fd5b0:	bd09      	pop	{r0, r3, pc}
 23fd5b2:	0000      	.short	0x0000
 23fd5b4:	1007ad64 	.word	0x1007ad64
 23fd5b8:	00000028 	.word	0x00000028

023fd5bc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd5bc:	b509      	push	{r0, r3, lr}
 23fd5be:	4804      	ldr	r0, [pc, #16]	; (23fd5d0 <network_is_off+0x14>)
 23fd5c0:	6800      	ldr	r0, [r0, #0]
 23fd5c2:	4b04      	ldr	r3, [pc, #16]	; (23fd5d4 <network_is_off+0x18>)
 23fd5c4:	4403      	add	r3, r0
 23fd5c6:	681b      	ldr	r3, [r3, #0]
 23fd5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd5ca:	9302      	str	r3, [sp, #8]
 23fd5cc:	bd09      	pop	{r0, r3, pc}
 23fd5ce:	0000      	.short	0x0000
 23fd5d0:	1007ad64 	.word	0x1007ad64
 23fd5d4:	00000028 	.word	0x00000028

023fd5d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd5d8:	b509      	push	{r0, r3, lr}
 23fd5da:	4804      	ldr	r0, [pc, #16]	; (23fd5ec <malloc+0x14>)
 23fd5dc:	6800      	ldr	r0, [r0, #0]
 23fd5de:	4b04      	ldr	r3, [pc, #16]	; (23fd5f0 <malloc+0x18>)
 23fd5e0:	4403      	add	r3, r0
 23fd5e2:	681b      	ldr	r3, [r3, #0]
 23fd5e4:	681b      	ldr	r3, [r3, #0]
 23fd5e6:	9302      	str	r3, [sp, #8]
 23fd5e8:	bd09      	pop	{r0, r3, pc}
 23fd5ea:	0000      	.short	0x0000
 23fd5ec:	1007ad64 	.word	0x1007ad64
 23fd5f0:	00000004 	.word	0x00000004

023fd5f4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd5f4:	b509      	push	{r0, r3, lr}
 23fd5f6:	4804      	ldr	r0, [pc, #16]	; (23fd608 <free+0x14>)
 23fd5f8:	6800      	ldr	r0, [r0, #0]
 23fd5fa:	4b04      	ldr	r3, [pc, #16]	; (23fd60c <free+0x18>)
 23fd5fc:	4403      	add	r3, r0
 23fd5fe:	681b      	ldr	r3, [r3, #0]
 23fd600:	685b      	ldr	r3, [r3, #4]
 23fd602:	9302      	str	r3, [sp, #8]
 23fd604:	bd09      	pop	{r0, r3, pc}
 23fd606:	0000      	.short	0x0000
 23fd608:	1007ad64 	.word	0x1007ad64
 23fd60c:	00000004 	.word	0x00000004

023fd610 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd610:	b509      	push	{r0, r3, lr}
 23fd612:	4804      	ldr	r0, [pc, #16]	; (23fd624 <realloc+0x14>)
 23fd614:	6800      	ldr	r0, [r0, #0]
 23fd616:	4b04      	ldr	r3, [pc, #16]	; (23fd628 <realloc+0x18>)
 23fd618:	4403      	add	r3, r0
 23fd61a:	681b      	ldr	r3, [r3, #0]
 23fd61c:	689b      	ldr	r3, [r3, #8]
 23fd61e:	9302      	str	r3, [sp, #8]
 23fd620:	bd09      	pop	{r0, r3, pc}
 23fd622:	0000      	.short	0x0000
 23fd624:	1007ad64 	.word	0x1007ad64
 23fd628:	00000004 	.word	0x00000004

023fd62c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd62c:	b509      	push	{r0, r3, lr}
 23fd62e:	4804      	ldr	r0, [pc, #16]	; (23fd640 <vsnprintf+0x14>)
 23fd630:	6800      	ldr	r0, [r0, #0]
 23fd632:	4b04      	ldr	r3, [pc, #16]	; (23fd644 <vsnprintf+0x18>)
 23fd634:	4403      	add	r3, r0
 23fd636:	681b      	ldr	r3, [r3, #0]
 23fd638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd63a:	9302      	str	r3, [sp, #8]
 23fd63c:	bd09      	pop	{r0, r3, pc}
 23fd63e:	0000      	.short	0x0000
 23fd640:	1007ad64 	.word	0x1007ad64
 23fd644:	00000004 	.word	0x00000004

023fd648 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd648:	b509      	push	{r0, r3, lr}
 23fd64a:	4804      	ldr	r0, [pc, #16]	; (23fd65c <__errno+0x14>)
 23fd64c:	6800      	ldr	r0, [r0, #0]
 23fd64e:	4b04      	ldr	r3, [pc, #16]	; (23fd660 <__errno+0x18>)
 23fd650:	4403      	add	r3, r0
 23fd652:	681b      	ldr	r3, [r3, #0]
 23fd654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd656:	9302      	str	r3, [sp, #8]
 23fd658:	bd09      	pop	{r0, r3, pc}
 23fd65a:	0000      	.short	0x0000
 23fd65c:	1007ad64 	.word	0x1007ad64
 23fd660:	00000004 	.word	0x00000004

023fd664 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd664:	b509      	push	{r0, r3, lr}
 23fd666:	4804      	ldr	r0, [pc, #16]	; (23fd678 <__assert_func+0x14>)
 23fd668:	6800      	ldr	r0, [r0, #0]
 23fd66a:	4b04      	ldr	r3, [pc, #16]	; (23fd67c <__assert_func+0x18>)
 23fd66c:	4403      	add	r3, r0
 23fd66e:	681b      	ldr	r3, [r3, #0]
 23fd670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd672:	9302      	str	r3, [sp, #8]
 23fd674:	bd09      	pop	{r0, r3, pc}
 23fd676:	0000      	.short	0x0000
 23fd678:	1007ad64 	.word	0x1007ad64
 23fd67c:	00000004 	.word	0x00000004

023fd680 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd680:	b509      	push	{r0, r3, lr}
 23fd682:	4804      	ldr	r0, [pc, #16]	; (23fd694 <newlib_impure_ptr_callback+0x14>)
 23fd684:	6800      	ldr	r0, [r0, #0]
 23fd686:	4b04      	ldr	r3, [pc, #16]	; (23fd698 <newlib_impure_ptr_callback+0x18>)
 23fd688:	4403      	add	r3, r0
 23fd68a:	681b      	ldr	r3, [r3, #0]
 23fd68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd68e:	9302      	str	r3, [sp, #8]
 23fd690:	bd09      	pop	{r0, r3, pc}
 23fd692:	0000      	.short	0x0000
 23fd694:	1007ad64 	.word	0x1007ad64
 23fd698:	00000004 	.word	0x00000004

023fd69c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd69c:	2100      	movs	r1, #0
 23fd69e:	f7ff be9f 	b.w	23fd3e0 <system_delay_ms>

023fd6a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fd6a2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd6a4:	6843      	ldr	r3, [r0, #4]
    {
 23fd6a6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd6a8:	3b01      	subs	r3, #1
 23fd6aa:	6043      	str	r3, [r0, #4]
 23fd6ac:	b963      	cbnz	r3, 23fd6c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fd6ae:	6803      	ldr	r3, [r0, #0]
 23fd6b0:	689b      	ldr	r3, [r3, #8]
 23fd6b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd6b4:	68a3      	ldr	r3, [r4, #8]
 23fd6b6:	3b01      	subs	r3, #1
 23fd6b8:	60a3      	str	r3, [r4, #8]
 23fd6ba:	b92b      	cbnz	r3, 23fd6c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd6bc:	6823      	ldr	r3, [r4, #0]
 23fd6be:	4620      	mov	r0, r4
        }
    }
 23fd6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd6c4:	68db      	ldr	r3, [r3, #12]
 23fd6c6:	4718      	bx	r3
    }
 23fd6c8:	bd10      	pop	{r4, pc}

023fd6ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd6ca:	b570      	push	{r4, r5, r6, lr}
 23fd6cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd6ce:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd6d2:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd6d6:	42ae      	cmp	r6, r5
 23fd6d8:	d004      	beq.n	23fd6e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd6da:	4628      	mov	r0, r5
 23fd6dc:	f001 fca1 	bl	23ff022 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd6e0:	3510      	adds	r5, #16
 23fd6e2:	e7f8      	b.n	23fd6d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd6e4:	6820      	ldr	r0, [r4, #0]
 23fd6e6:	f7ff ff85 	bl	23fd5f4 <free>
    AllocatorT::free(data_);
}
 23fd6ea:	4620      	mov	r0, r4
 23fd6ec:	bd70      	pop	{r4, r5, r6, pc}

023fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fd6ee:	b510      	push	{r4, lr}
 23fd6f0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 23fd6f2:	6800      	ldr	r0, [r0, #0]
 23fd6f4:	b108      	cbz	r0, 23fd6fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fd6f6:	f7ff ffd4 	bl	23fd6a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fd6fa:	4620      	mov	r0, r4
 23fd6fc:	bd10      	pop	{r4, pc}
	...

023fd700 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd700:	2300      	movs	r3, #0
 23fd702:	4802      	ldr	r0, [pc, #8]	; (23fd70c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd704:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd706:	f7ff bb3f 	b.w	23fcd88 <os_mutex_recursive_create>
 23fd70a:	bf00      	nop
 23fd70c:	1007ae58 	.word	0x1007ae58

023fd710 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23fd710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23fd712:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23fd714:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23fd716:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23fd71a:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23fd71c:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23fd720:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23fd724:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23fd726:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23fd72a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23fd72e:	6843      	ldr	r3, [r0, #4]
 23fd730:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23fd732:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fd734:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23fd736:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fd73a:	f7ff fe97 	bl	23fd46c <spark_cloud_disconnect>
}
 23fd73e:	b005      	add	sp, #20
 23fd740:	f85d fb04 	ldr.w	pc, [sp], #4

023fd744 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd744:	2200      	movs	r2, #0
 23fd746:	6840      	ldr	r0, [r0, #4]
 23fd748:	4611      	mov	r1, r2
 23fd74a:	f7ff beff 	b.w	23fd54c <network_listening>

023fd74e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd74e:	2200      	movs	r2, #0
 23fd750:	6840      	ldr	r0, [r0, #4]
 23fd752:	4611      	mov	r1, r2
 23fd754:	f7ff bf16 	b.w	23fd584 <network_get_listen_timeout>

023fd758 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd758:	2200      	movs	r2, #0
 23fd75a:	6840      	ldr	r0, [r0, #4]
 23fd75c:	f7ff bf04 	b.w	23fd568 <network_set_listen_timeout>

023fd760 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd760:	2200      	movs	r2, #0
 23fd762:	6840      	ldr	r0, [r0, #4]
 23fd764:	f081 0101 	eor.w	r1, r1, #1
 23fd768:	f7ff bee2 	b.w	23fd530 <network_listen>

023fd76c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd76c:	2300      	movs	r3, #0
 23fd76e:	6840      	ldr	r0, [r0, #4]
 23fd770:	461a      	mov	r2, r3
 23fd772:	4619      	mov	r1, r3
 23fd774:	f7ff bece 	b.w	23fd514 <network_off>

023fd778 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd778:	2300      	movs	r3, #0
 23fd77a:	6840      	ldr	r0, [r0, #4]
 23fd77c:	461a      	mov	r2, r3
 23fd77e:	4619      	mov	r1, r3
 23fd780:	f7ff beba 	b.w	23fd4f8 <network_on>

023fd784 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd784:	2200      	movs	r2, #0
 23fd786:	6840      	ldr	r0, [r0, #4]
 23fd788:	4611      	mov	r1, r2
 23fd78a:	f7ff bea7 	b.w	23fd4dc <network_ready>

023fd78e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd78e:	2200      	movs	r2, #0
 23fd790:	6840      	ldr	r0, [r0, #4]
 23fd792:	4611      	mov	r1, r2
 23fd794:	f7ff be86 	b.w	23fd4a4 <network_connecting>

023fd798 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd798:	2200      	movs	r2, #0
 23fd79a:	2102      	movs	r1, #2
 23fd79c:	6840      	ldr	r0, [r0, #4]
 23fd79e:	f7ff be8f 	b.w	23fd4c0 <network_disconnect>

023fd7a2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd7a2:	2300      	movs	r3, #0
 23fd7a4:	6840      	ldr	r0, [r0, #4]
 23fd7a6:	461a      	mov	r2, r3
 23fd7a8:	f7ff be6e 	b.w	23fd488 <network_connect>

023fd7ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd7ac:	2203      	movs	r2, #3
 23fd7ae:	4b02      	ldr	r3, [pc, #8]	; (23fd7b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd7b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd7b2:	4a02      	ldr	r2, [pc, #8]	; (23fd7bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd7b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd7b6:	4770      	bx	lr
 23fd7b8:	1007ae5c 	.word	0x1007ae5c
 23fd7bc:	023ffbfc 	.word	0x023ffbfc

023fd7c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd7c0:	4770      	bx	lr

023fd7c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd7c4:	4606      	mov	r6, r0
 23fd7c6:	4615      	mov	r5, r2
 23fd7c8:	460c      	mov	r4, r1
 23fd7ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd7cc:	42bc      	cmp	r4, r7
 23fd7ce:	d006      	beq.n	23fd7de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd7d0:	6833      	ldr	r3, [r6, #0]
 23fd7d2:	4630      	mov	r0, r6
 23fd7d4:	689b      	ldr	r3, [r3, #8]
 23fd7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd7da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd7dc:	e7f6      	b.n	23fd7cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd7de:	4628      	mov	r0, r5
 23fd7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd7e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd7e2:	2200      	movs	r2, #0
 23fd7e4:	7c00      	ldrb	r0, [r0, #16]
 23fd7e6:	f7ff bb93 	b.w	23fcf10 <hal_i2c_write>

023fd7ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd7ea:	2100      	movs	r1, #0
 23fd7ec:	7c00      	ldrb	r0, [r0, #16]
 23fd7ee:	f7ff bb9d 	b.w	23fcf2c <hal_i2c_available>

023fd7f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd7f2:	2100      	movs	r1, #0
 23fd7f4:	7c00      	ldrb	r0, [r0, #16]
 23fd7f6:	f7ff bba7 	b.w	23fcf48 <hal_i2c_read>

023fd7fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd7fa:	2100      	movs	r1, #0
 23fd7fc:	7c00      	ldrb	r0, [r0, #16]
 23fd7fe:	f7ff bbb1 	b.w	23fcf64 <hal_i2c_peek>

023fd802 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd802:	2100      	movs	r1, #0
 23fd804:	7c00      	ldrb	r0, [r0, #16]
 23fd806:	f7ff bbbb 	b.w	23fcf80 <hal_i2c_flush>

023fd80a <_ZN7TwoWireD0Ev>:
 23fd80a:	b510      	push	{r4, lr}
 23fd80c:	4604      	mov	r4, r0
 23fd80e:	2114      	movs	r1, #20
 23fd810:	f7fe fdbb 	bl	23fc38a <_ZdlPvj>
 23fd814:	4620      	mov	r0, r4
 23fd816:	bd10      	pop	{r4, pc}

023fd818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd818:	b538      	push	{r3, r4, r5, lr}
 23fd81a:	4604      	mov	r4, r0
 23fd81c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd81e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd822:	2200      	movs	r2, #0
 23fd824:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd828:	4b09      	ldr	r3, [pc, #36]	; (23fd850 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd82a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd82c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd82e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd830:	4629      	mov	r1, r5
 23fd832:	f7ff fbc1 	bl	23fcfb8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd836:	30bf      	adds	r0, #191	; 0xbf
 23fd838:	d108      	bne.n	23fd84c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd83a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd83c:	07db      	lsls	r3, r3, #31
 23fd83e:	d505      	bpl.n	23fd84c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd840:	6868      	ldr	r0, [r5, #4]
 23fd842:	f7ff fed7 	bl	23fd5f4 <free>
    free(conf.tx_buffer);
 23fd846:	68e8      	ldr	r0, [r5, #12]
 23fd848:	f7ff fed4 	bl	23fd5f4 <free>
}
 23fd84c:	4620      	mov	r0, r4
 23fd84e:	bd38      	pop	{r3, r4, r5, pc}
 23fd850:	023ffc38 	.word	0x023ffc38

023fd854 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fd854:	2200      	movs	r2, #0
 23fd856:	7c00      	ldrb	r0, [r0, #16]
 23fd858:	f7ff bb22 	b.w	23fcea0 <hal_i2c_set_speed>

023fd85c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd85c:	2300      	movs	r3, #0
 23fd85e:	7c00      	ldrb	r0, [r0, #16]
 23fd860:	461a      	mov	r2, r3
 23fd862:	4619      	mov	r1, r3
 23fd864:	f7ff bb2a 	b.w	23fcebc <hal_i2c_begin>

023fd868 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd86a:	2200      	movs	r2, #0
 23fd86c:	2314      	movs	r3, #20
 23fd86e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd872:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd876:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd878:	7c00      	ldrb	r0, [r0, #16]
 23fd87a:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd87e:	684b      	ldr	r3, [r1, #4]
 23fd880:	9303      	str	r3, [sp, #12]
 23fd882:	68cb      	ldr	r3, [r1, #12]
 23fd884:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd886:	7a0b      	ldrb	r3, [r1, #8]
 23fd888:	a901      	add	r1, sp, #4
 23fd88a:	9305      	str	r3, [sp, #20]
 23fd88c:	f7ff fba2 	bl	23fcfd4 <hal_i2c_request_ex>
}
 23fd890:	b007      	add	sp, #28
 23fd892:	f85d fb04 	ldr.w	pc, [sp], #4

023fd896 <_ZN7TwoWire11requestFromEhjh>:
{
 23fd896:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd898:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd89a:	f88d 1000 	strb.w	r1, [sp]
 23fd89e:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd8a2:	bf18      	it	ne
 23fd8a4:	2301      	movne	r3, #1
 23fd8a6:	9103      	str	r1, [sp, #12]
 23fd8a8:	4669      	mov	r1, sp
    size_ = size;
 23fd8aa:	9201      	str	r2, [sp, #4]
 23fd8ac:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd8b0:	f7ff ffda 	bl	23fd868 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd8b4:	b005      	add	sp, #20
 23fd8b6:	f85d fb04 	ldr.w	pc, [sp], #4

023fd8ba <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd8ba:	2200      	movs	r2, #0
 23fd8bc:	7c00      	ldrb	r0, [r0, #16]
 23fd8be:	f7ff bb0b 	b.w	23fced8 <hal_i2c_begin_transmission>

023fd8c2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd8c2:	2200      	movs	r2, #0
 23fd8c4:	7c00      	ldrb	r0, [r0, #16]
 23fd8c6:	f7ff bb15 	b.w	23fcef4 <hal_i2c_end_transmission>

023fd8ca <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd8ca:	4770      	bx	lr

023fd8cc <_ZN9IPAddressD0Ev>:
 23fd8cc:	b510      	push	{r4, lr}
 23fd8ce:	4604      	mov	r4, r0
 23fd8d0:	2118      	movs	r1, #24
 23fd8d2:	f7fe fd5a 	bl	23fc38a <_ZdlPvj>
 23fd8d6:	4620      	mov	r0, r4
 23fd8d8:	bd10      	pop	{r4, pc}

023fd8da <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd8da:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd8dc:	7d03      	ldrb	r3, [r0, #20]
{
 23fd8de:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd8e0:	2b06      	cmp	r3, #6
 23fd8e2:	f04f 0400 	mov.w	r4, #0
{
 23fd8e6:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd8e8:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd8ec:	d012      	beq.n	23fd914 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd8ee:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd8f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd8f6:	220a      	movs	r2, #10
 23fd8f8:	4630      	mov	r0, r6
 23fd8fa:	f001 fad0 	bl	23fee9e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd8fe:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd900:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd902:	d019      	beq.n	23fd938 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd904:	2c00      	cmp	r4, #0
 23fd906:	d0f4      	beq.n	23fd8f2 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd908:	212e      	movs	r1, #46	; 0x2e
 23fd90a:	4630      	mov	r0, r6
 23fd90c:	f001 fac4 	bl	23fee98 <_ZN5Print5printEc>
 23fd910:	4404      	add	r4, r0
 23fd912:	e7ee      	b.n	23fd8f2 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd914:	232f      	movs	r3, #47	; 0x2f
 23fd916:	466a      	mov	r2, sp
 23fd918:	4639      	mov	r1, r7
 23fd91a:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd91c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd920:	f7ff fb66 	bl	23fcff0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd924:	4668      	mov	r0, sp
 23fd926:	f7fe fd07 	bl	23fc338 <strlen>
 23fd92a:	6833      	ldr	r3, [r6, #0]
 23fd92c:	4602      	mov	r2, r0
 23fd92e:	4669      	mov	r1, sp
 23fd930:	4630      	mov	r0, r6
 23fd932:	68db      	ldr	r3, [r3, #12]
 23fd934:	4798      	blx	r3
 23fd936:	4604      	mov	r4, r0
    }
    return n;
}
 23fd938:	4620      	mov	r0, r4
 23fd93a:	b00d      	add	sp, #52	; 0x34
 23fd93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fd940 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd940:	b510      	push	{r4, lr}
 23fd942:	4604      	mov	r4, r0
 23fd944:	4b04      	ldr	r3, [pc, #16]	; (23fd958 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd946:	2211      	movs	r2, #17
 23fd948:	2100      	movs	r1, #0
 23fd94a:	f840 3b04 	str.w	r3, [r0], #4
 23fd94e:	f001 ff7e 	bl	23ff84e <memset>
}
 23fd952:	4620      	mov	r0, r4
 23fd954:	bd10      	pop	{r4, pc}
 23fd956:	bf00      	nop
 23fd958:	023ffc60 	.word	0x023ffc60

023fd95c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd95c:	4603      	mov	r3, r0
 23fd95e:	4a07      	ldr	r2, [pc, #28]	; (23fd97c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd960:	b510      	push	{r4, lr}
 23fd962:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd966:	f101 0210 	add.w	r2, r1, #16
 23fd96a:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd96e:	4291      	cmp	r1, r2
 23fd970:	f843 4b04 	str.w	r4, [r3], #4
 23fd974:	d1f9      	bne.n	23fd96a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd976:	780a      	ldrb	r2, [r1, #0]
 23fd978:	701a      	strb	r2, [r3, #0]
}
 23fd97a:	bd10      	pop	{r4, pc}
 23fd97c:	023ffc60 	.word	0x023ffc60

023fd980 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd980:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd982:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd986:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd98a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd98e:	2304      	movs	r3, #4
 23fd990:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd994:	6041      	str	r1, [r0, #4]
 23fd996:	7503      	strb	r3, [r0, #20]
}
 23fd998:	bd10      	pop	{r4, pc}
	...

023fd99c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd99c:	b507      	push	{r0, r1, r2, lr}
 23fd99e:	4b06      	ldr	r3, [pc, #24]	; (23fd9b8 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd9a0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd9a2:	78cb      	ldrb	r3, [r1, #3]
 23fd9a4:	9300      	str	r3, [sp, #0]
 23fd9a6:	788b      	ldrb	r3, [r1, #2]
 23fd9a8:	784a      	ldrb	r2, [r1, #1]
 23fd9aa:	7809      	ldrb	r1, [r1, #0]
 23fd9ac:	f7ff ffe8 	bl	23fd980 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd9b0:	b003      	add	sp, #12
 23fd9b2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd9b6:	bf00      	nop
 23fd9b8:	023ffc60 	.word	0x023ffc60

023fd9bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd9bc:	2201      	movs	r2, #1
 23fd9be:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd9c2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd9c6:	4618      	mov	r0, r3
 23fd9c8:	2901      	cmp	r1, #1
 23fd9ca:	d108      	bne.n	23fd9de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd9cc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd9d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd9d4:	3a01      	subs	r2, #1
 23fd9d6:	f103 0310 	add.w	r3, r3, #16
 23fd9da:	d1f2      	bne.n	23fd9c2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd9dc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd9de:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd9e0:	bf04      	itt	eq
 23fd9e2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd9e6:	1852      	addeq	r2, r2, r1
 23fd9e8:	e7f4      	b.n	23fd9d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd9ea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd9ea:	b40e      	push	{r1, r2, r3}
 23fd9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd9ee:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9f0:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd9f2:	af00      	add	r7, sp, #0
 23fd9f4:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd9f8:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd9fc:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd9fe:	462b      	mov	r3, r5
 23fda00:	1878      	adds	r0, r7, r1
 23fda02:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fda04:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fda06:	f7ff fe11 	bl	23fd62c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fda0a:	280f      	cmp	r0, #15
 23fda0c:	687a      	ldr	r2, [r7, #4]
 23fda0e:	d91a      	bls.n	23fda46 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fda10:	f100 0308 	add.w	r3, r0, #8
 23fda14:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fda18:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fda1a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fda1e:	1c41      	adds	r1, r0, #1
 23fda20:	462b      	mov	r3, r5
 23fda22:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fda24:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fda26:	f7ff fe01 	bl	23fd62c <vsnprintf>
        if (n > 0) {
 23fda2a:	1e02      	subs	r2, r0, #0
 23fda2c:	dd04      	ble.n	23fda38 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fda2e:	6823      	ldr	r3, [r4, #0]
 23fda30:	4669      	mov	r1, sp
 23fda32:	4620      	mov	r0, r4
 23fda34:	689b      	ldr	r3, [r3, #8]
 23fda36:	4798      	blx	r3
 23fda38:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fda3a:	3720      	adds	r7, #32
 23fda3c:	46bd      	mov	sp, r7
 23fda3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fda42:	b003      	add	sp, #12
 23fda44:	4770      	bx	lr
    } else if (n > 0) {
 23fda46:	2800      	cmp	r0, #0
 23fda48:	d0f7      	beq.n	23fda3a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fda4a:	6823      	ldr	r3, [r4, #0]
 23fda4c:	4602      	mov	r2, r0
 23fda4e:	689b      	ldr	r3, [r3, #8]
 23fda50:	4620      	mov	r0, r4
 23fda52:	f107 0110 	add.w	r1, r7, #16
 23fda56:	4798      	blx	r3
}
 23fda58:	e7ef      	b.n	23fda3a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fda5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fda5a:	b538      	push	{r3, r4, r5, lr}
 23fda5c:	680b      	ldr	r3, [r1, #0]
 23fda5e:	4604      	mov	r4, r0
 23fda60:	6003      	str	r3, [r0, #0]
 23fda62:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fda64:	6843      	ldr	r3, [r0, #4]
 23fda66:	429d      	cmp	r5, r3
 23fda68:	d008      	beq.n	23fda7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fda6a:	b115      	cbz	r5, 23fda72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fda6c:	686b      	ldr	r3, [r5, #4]
 23fda6e:	3301      	adds	r3, #1
 23fda70:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fda72:	6860      	ldr	r0, [r4, #4]
 23fda74:	b108      	cbz	r0, 23fda7a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fda76:	f7ff fe14 	bl	23fd6a2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fda7a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fda7c:	bd38      	pop	{r3, r4, r5, pc}

023fda7e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fda7e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fda80:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fda82:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fda86:	2201      	movs	r2, #1
 23fda88:	689b      	ldr	r3, [r3, #8]
 23fda8a:	f10d 0107 	add.w	r1, sp, #7
 23fda8e:	4798      	blx	r3
}
 23fda90:	b003      	add	sp, #12
 23fda92:	f85d fb04 	ldr.w	pc, [sp], #4

023fda96 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fda96:	460b      	mov	r3, r1
 23fda98:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fda9a:	2200      	movs	r2, #0
 23fda9c:	b510      	push	{r4, lr}
 23fda9e:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdaa0:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fdaa4:	6083      	str	r3, [r0, #8]
    if (t) {
 23fdaa6:	b90b      	cbnz	r3, 23fdaac <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fdaa8:	4620      	mov	r0, r4
 23fdaaa:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fdaac:	f7ff ffd5 	bl	23fda5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fdab0:	e7fa      	b.n	23fdaa8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fdab2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fdab2:	6883      	ldr	r3, [r0, #8]
 23fdab4:	b1eb      	cbz	r3, 23fdaf2 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fdab6:	781a      	ldrb	r2, [r3, #0]
 23fdab8:	2a03      	cmp	r2, #3
 23fdaba:	d81a      	bhi.n	23fdaf2 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fdabc:	e8df f002 	tbb	[pc, r2]
 23fdac0:	1b021704 	.word	0x1b021704
 23fdac4:	2005      	movs	r0, #5
 23fdac6:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fdac8:	6802      	ldr	r2, [r0, #0]
 23fdaca:	685b      	ldr	r3, [r3, #4]
 23fdacc:	6852      	ldr	r2, [r2, #4]
 23fdace:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fdad0:	282d      	cmp	r0, #45	; 0x2d
 23fdad2:	d012      	beq.n	23fdafa <_ZNK5spark9JSONValue4typeEv+0x48>
 23fdad4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fdad8:	2b09      	cmp	r3, #9
 23fdada:	d90e      	bls.n	23fdafa <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fdadc:	2874      	cmp	r0, #116	; 0x74
 23fdade:	d00e      	beq.n	23fdafe <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fdae0:	2866      	cmp	r0, #102	; 0x66
 23fdae2:	d00c      	beq.n	23fdafe <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fdae4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fdae8:	4258      	negs	r0, r3
 23fdaea:	4158      	adcs	r0, r3
 23fdaec:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fdaee:	2006      	movs	r0, #6
 23fdaf0:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fdaf2:	2000      	movs	r0, #0
 23fdaf4:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fdaf6:	2004      	movs	r0, #4
 23fdaf8:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fdafa:	2003      	movs	r0, #3
 23fdafc:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fdafe:	2002      	movs	r0, #2
}
 23fdb00:	4770      	bx	lr

023fdb02 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fdb02:	b510      	push	{r4, lr}
 23fdb04:	4604      	mov	r4, r0
    switch (type()) {
 23fdb06:	f7ff ffd4 	bl	23fdab2 <_ZNK5spark9JSONValue4typeEv>
 23fdb0a:	2802      	cmp	r0, #2
 23fdb0c:	d00e      	beq.n	23fdb2c <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fdb0e:	1ec3      	subs	r3, r0, #3
 23fdb10:	b2db      	uxtb	r3, r3
 23fdb12:	2b01      	cmp	r3, #1
 23fdb14:	d814      	bhi.n	23fdb40 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fdb16:	6822      	ldr	r2, [r4, #0]
 23fdb18:	68a3      	ldr	r3, [r4, #8]
 23fdb1a:	6850      	ldr	r0, [r2, #4]
 23fdb1c:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fdb1e:	220a      	movs	r2, #10
}
 23fdb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fdb24:	2100      	movs	r1, #0
 23fdb26:	4418      	add	r0, r3
 23fdb28:	f001 bf92 	b.w	23ffa50 <strtol>
        const char* const s = d_->json + t_->start;
 23fdb2c:	6822      	ldr	r2, [r4, #0]
 23fdb2e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fdb30:	6852      	ldr	r2, [r2, #4]
 23fdb32:	685b      	ldr	r3, [r3, #4]
 23fdb34:	5cd0      	ldrb	r0, [r2, r3]
 23fdb36:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fdb3a:	4258      	negs	r0, r3
 23fdb3c:	4158      	adcs	r0, r3
}
 23fdb3e:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fdb40:	2000      	movs	r0, #0
 23fdb42:	e7fc      	b.n	23fdb3e <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fdb44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdb44:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdb46:	2300      	movs	r3, #0
 23fdb48:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdb4a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fdb4e:	480e      	ldr	r0, [pc, #56]	; (23fdb88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fdb50:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fdb54:	b1a9      	cbz	r1, 23fdb82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fdb56:	780b      	ldrb	r3, [r1, #0]
 23fdb58:	2b03      	cmp	r3, #3
 23fdb5a:	d006      	beq.n	23fdb6a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fdb5c:	b98b      	cbnz	r3, 23fdb82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fdb5e:	6813      	ldr	r3, [r2, #0]
 23fdb60:	6858      	ldr	r0, [r3, #4]
 23fdb62:	684b      	ldr	r3, [r1, #4]
 23fdb64:	5cc3      	ldrb	r3, [r0, r3]
 23fdb66:	2b6e      	cmp	r3, #110	; 0x6e
 23fdb68:	d007      	beq.n	23fdb7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fdb6a:	6813      	ldr	r3, [r2, #0]
 23fdb6c:	684d      	ldr	r5, [r1, #4]
 23fdb6e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fdb70:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fdb72:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fdb74:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fdb76:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fdb78:	60e3      	str	r3, [r4, #12]
 23fdb7a:	4611      	mov	r1, r2
 23fdb7c:	4620      	mov	r0, r4
 23fdb7e:	f7ff ff6c 	bl	23fda5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdb82:	4620      	mov	r0, r4
 23fdb84:	bd38      	pop	{r3, r4, r5, pc}
 23fdb86:	bf00      	nop
 23fdb88:	023ffcd2 	.word	0x023ffcd2

023fdb8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdb8c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdb8e:	2500      	movs	r5, #0
 23fdb90:	460b      	mov	r3, r1
 23fdb92:	4604      	mov	r4, r0
 23fdb94:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdb96:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fdb9a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fdb9e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fdba2:	b14b      	cbz	r3, 23fdbb8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fdba4:	781a      	ldrb	r2, [r3, #0]
 23fdba6:	2a01      	cmp	r2, #1
 23fdba8:	d106      	bne.n	23fdbb8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fdbaa:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fdbae:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fdbb0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fdbb2:	6143      	str	r3, [r0, #20]
 23fdbb4:	f7ff ff51 	bl	23fda5a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdbb8:	4620      	mov	r0, r4
 23fdbba:	bd38      	pop	{r3, r4, r5, pc}

023fdbbc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fdbbc:	b510      	push	{r4, lr}
    if (!n_) {
 23fdbbe:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fdbc0:	4604      	mov	r4, r0
    if (!n_) {
 23fdbc2:	b163      	cbz	r3, 23fdbde <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fdbc4:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fdbc6:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fdbc8:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fdbca:	3010      	adds	r0, #16
 23fdbcc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fdbce:	6120      	str	r0, [r4, #16]
    --n_;
 23fdbd0:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fdbd2:	b113      	cbz	r3, 23fdbda <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fdbd4:	f7ff fef2 	bl	23fd9bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fdbd8:	60a0      	str	r0, [r4, #8]
    return true;
 23fdbda:	2001      	movs	r0, #1
 23fdbdc:	e000      	b.n	23fdbe0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fdbde:	4618      	mov	r0, r3
}
 23fdbe0:	bd10      	pop	{r4, pc}

023fdbe2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdbe2:	b510      	push	{r4, lr}
    write('}');
 23fdbe4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdbe6:	4604      	mov	r4, r0
    write('}');
 23fdbe8:	f7ff ff49 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fdbec:	2301      	movs	r3, #1
}
 23fdbee:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdbf0:	7123      	strb	r3, [r4, #4]
}
 23fdbf2:	bd10      	pop	{r4, pc}

023fdbf4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fdbf4:	b508      	push	{r3, lr}
    switch (state_) {
 23fdbf6:	7903      	ldrb	r3, [r0, #4]
 23fdbf8:	2b01      	cmp	r3, #1
 23fdbfa:	d002      	beq.n	23fdc02 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fdbfc:	2b02      	cmp	r3, #2
 23fdbfe:	d004      	beq.n	23fdc0a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fdc00:	bd08      	pop	{r3, pc}
        write(',');
 23fdc02:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fdc04:	f7ff ff3b 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
}
 23fdc08:	e7fa      	b.n	23fdc00 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fdc0a:	213a      	movs	r1, #58	; 0x3a
 23fdc0c:	e7fa      	b.n	23fdc04 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fdc0e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fdc0e:	b510      	push	{r4, lr}
 23fdc10:	4604      	mov	r4, r0
    writeSeparator();
 23fdc12:	f7ff ffef 	bl	23fdbf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fdc16:	4620      	mov	r0, r4
 23fdc18:	217b      	movs	r1, #123	; 0x7b
 23fdc1a:	f7ff ff30 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fdc1e:	2300      	movs	r3, #0
}
 23fdc20:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fdc22:	7123      	strb	r3, [r4, #4]
}
 23fdc24:	bd10      	pop	{r4, pc}
	...

023fdc28 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fdc28:	b513      	push	{r0, r1, r4, lr}
 23fdc2a:	4604      	mov	r4, r0
 23fdc2c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fdc2e:	f7ff ffe1 	bl	23fdbf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fdc32:	6823      	ldr	r3, [r4, #0]
 23fdc34:	4620      	mov	r0, r4
 23fdc36:	68db      	ldr	r3, [r3, #12]
 23fdc38:	9a01      	ldr	r2, [sp, #4]
 23fdc3a:	4903      	ldr	r1, [pc, #12]	; (23fdc48 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fdc3c:	4798      	blx	r3
    state_ = NEXT;
 23fdc3e:	2301      	movs	r3, #1
}
 23fdc40:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdc42:	7123      	strb	r3, [r4, #4]
}
 23fdc44:	b002      	add	sp, #8
 23fdc46:	bd10      	pop	{r4, pc}
 23fdc48:	023ffc6c 	.word	0x023ffc6c

023fdc4c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fdc4c:	b513      	push	{r0, r1, r4, lr}
 23fdc4e:	4604      	mov	r4, r0
 23fdc50:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fdc52:	f7ff ffcf 	bl	23fdbf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fdc56:	6823      	ldr	r3, [r4, #0]
 23fdc58:	4620      	mov	r0, r4
 23fdc5a:	68db      	ldr	r3, [r3, #12]
 23fdc5c:	9a01      	ldr	r2, [sp, #4]
 23fdc5e:	4903      	ldr	r1, [pc, #12]	; (23fdc6c <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fdc60:	4798      	blx	r3
    state_ = NEXT;
 23fdc62:	2301      	movs	r3, #1
}
 23fdc64:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdc66:	7123      	strb	r3, [r4, #4]
}
 23fdc68:	b002      	add	sp, #8
 23fdc6a:	bd10      	pop	{r4, pc}
 23fdc6c:	023ffc6f 	.word	0x023ffc6f

023fdc70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fdc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdc74:	460d      	mov	r5, r1
 23fdc76:	4690      	mov	r8, r2
    write('"');
 23fdc78:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fdc7a:	4604      	mov	r4, r0
 23fdc7c:	462f      	mov	r7, r5
    write('"');
 23fdc7e:	f7ff fefe 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fdc82:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fdd28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fdc86:	44a8      	add	r8, r5
    while (s != end) {
 23fdc88:	4547      	cmp	r7, r8
 23fdc8a:	46ba      	mov	sl, r7
 23fdc8c:	d03d      	beq.n	23fdd0a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fdc8e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fdc92:	2e22      	cmp	r6, #34	; 0x22
 23fdc94:	d006      	beq.n	23fdca4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fdc96:	2e5c      	cmp	r6, #92	; 0x5c
 23fdc98:	d004      	beq.n	23fdca4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fdc9a:	4630      	mov	r0, r6
 23fdc9c:	f001 fda8 	bl	23ff7f0 <isprint>
 23fdca0:	2800      	cmp	r0, #0
 23fdca2:	d1f1      	bne.n	23fdc88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fdca4:	6823      	ldr	r3, [r4, #0]
 23fdca6:	4629      	mov	r1, r5
 23fdca8:	4620      	mov	r0, r4
 23fdcaa:	689b      	ldr	r3, [r3, #8]
 23fdcac:	ebaa 0205 	sub.w	r2, sl, r5
 23fdcb0:	4798      	blx	r3
            write('\\');
 23fdcb2:	215c      	movs	r1, #92	; 0x5c
 23fdcb4:	4620      	mov	r0, r4
 23fdcb6:	f7ff fee2 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fdcba:	2e0d      	cmp	r6, #13
 23fdcbc:	d80a      	bhi.n	23fdcd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fdcbe:	2e07      	cmp	r6, #7
 23fdcc0:	d91c      	bls.n	23fdcfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fdcc2:	f1a6 0308 	sub.w	r3, r6, #8
 23fdcc6:	2b05      	cmp	r3, #5
 23fdcc8:	d818      	bhi.n	23fdcfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fdcca:	e8df f003 	tbb	[pc, r3]
 23fdcce:	0f0d      	.short	0x0f0d
 23fdcd0:	15131711 	.word	0x15131711
 23fdcd4:	2e22      	cmp	r6, #34	; 0x22
 23fdcd6:	d001      	beq.n	23fdcdc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fdcd8:	2e5c      	cmp	r6, #92	; 0x5c
 23fdcda:	d10f      	bne.n	23fdcfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fdcdc:	4631      	mov	r1, r6
                write('b');
 23fdcde:	4620      	mov	r0, r4
 23fdce0:	f7ff fecd 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fdce4:	463d      	mov	r5, r7
    while (s != end) {
 23fdce6:	e7cf      	b.n	23fdc88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fdce8:	2162      	movs	r1, #98	; 0x62
 23fdcea:	e7f8      	b.n	23fdcde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fdcec:	2174      	movs	r1, #116	; 0x74
 23fdcee:	e7f6      	b.n	23fdcde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fdcf0:	216e      	movs	r1, #110	; 0x6e
 23fdcf2:	e7f4      	b.n	23fdcde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fdcf4:	2166      	movs	r1, #102	; 0x66
 23fdcf6:	e7f2      	b.n	23fdcde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fdcf8:	2172      	movs	r1, #114	; 0x72
 23fdcfa:	e7f0      	b.n	23fdcde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fdcfc:	6823      	ldr	r3, [r4, #0]
 23fdcfe:	4632      	mov	r2, r6
 23fdd00:	4649      	mov	r1, r9
 23fdd02:	4620      	mov	r0, r4
 23fdd04:	68db      	ldr	r3, [r3, #12]
 23fdd06:	4798      	blx	r3
                break;
 23fdd08:	e7ec      	b.n	23fdce4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fdd0a:	42bd      	cmp	r5, r7
 23fdd0c:	d005      	beq.n	23fdd1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fdd0e:	6823      	ldr	r3, [r4, #0]
 23fdd10:	4629      	mov	r1, r5
 23fdd12:	4620      	mov	r0, r4
 23fdd14:	689b      	ldr	r3, [r3, #8]
 23fdd16:	1b7a      	subs	r2, r7, r5
 23fdd18:	4798      	blx	r3
    }
    write('"');
 23fdd1a:	2122      	movs	r1, #34	; 0x22
 23fdd1c:	4620      	mov	r0, r4
 23fdd1e:	f7ff feae 	bl	23fda7e <_ZN5spark10JSONWriter5writeEc>
}
 23fdd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fdd26:	bf00      	nop
 23fdd28:	023ffc72 	.word	0x023ffc72

023fdd2c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fdd2c:	b513      	push	{r0, r1, r4, lr}
 23fdd2e:	4604      	mov	r4, r0
 23fdd30:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fdd34:	f7ff ff5e 	bl	23fdbf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fdd38:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fdd3c:	4620      	mov	r0, r4
 23fdd3e:	f7ff ff97 	bl	23fdc70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fdd42:	2302      	movs	r3, #2
}
 23fdd44:	4620      	mov	r0, r4
    state_ = VALUE;
 23fdd46:	7123      	strb	r3, [r4, #4]
}
 23fdd48:	b002      	add	sp, #8
 23fdd4a:	bd10      	pop	{r4, pc}

023fdd4c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fdd4c:	b513      	push	{r0, r1, r4, lr}
 23fdd4e:	4604      	mov	r4, r0
 23fdd50:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fdd54:	f7ff ff4e 	bl	23fdbf4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fdd58:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fdd5c:	4620      	mov	r0, r4
 23fdd5e:	f7ff ff87 	bl	23fdc70 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fdd62:	2301      	movs	r3, #1
}
 23fdd64:	4620      	mov	r0, r4
    state_ = NEXT;
 23fdd66:	7123      	strb	r3, [r4, #4]
}
 23fdd68:	b002      	add	sp, #8
 23fdd6a:	bd10      	pop	{r4, pc}

023fdd6c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fdd6c:	6880      	ldr	r0, [r0, #8]
 23fdd6e:	6803      	ldr	r3, [r0, #0]
 23fdd70:	68db      	ldr	r3, [r3, #12]
 23fdd72:	4718      	bx	r3

023fdd74 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fdd74:	4770      	bx	lr

023fdd76 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fdd76:	4608      	mov	r0, r1
 23fdd78:	b111      	cbz	r1, 23fdd80 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fdd7a:	680b      	ldr	r3, [r1, #0]
 23fdd7c:	685b      	ldr	r3, [r3, #4]
 23fdd7e:	4718      	bx	r3
}
 23fdd80:	4770      	bx	lr

023fdd82 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fdd82:	4770      	bx	lr

023fdd84 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fdd84:	4770      	bx	lr

023fdd86 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fdd86:	4770      	bx	lr

023fdd88 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fdd88:	4770      	bx	lr

023fdd8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fdd8a:	b538      	push	{r3, r4, r5, lr}
 23fdd8c:	4604      	mov	r4, r0
 23fdd8e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fdd90:	6800      	ldr	r0, [r0, #0]
 23fdd92:	212e      	movs	r1, #46	; 0x2e
 23fdd94:	f001 fd9f 	bl	23ff8d6 <strchrnul>
    size = s - category;
 23fdd98:	6823      	ldr	r3, [r4, #0]
 23fdd9a:	1ac3      	subs	r3, r0, r3
 23fdd9c:	602b      	str	r3, [r5, #0]
    if (size) {
 23fdd9e:	b123      	cbz	r3, 23fddaa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fdda0:	7803      	ldrb	r3, [r0, #0]
 23fdda2:	b103      	cbz	r3, 23fdda6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fdda4:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fdda6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdda8:	6020      	str	r0, [r4, #0]
}
 23fddaa:	4618      	mov	r0, r3
 23fddac:	bd38      	pop	{r3, r4, r5, pc}

023fddae <_ZN5spark16JSONStreamWriterD0Ev>:
 23fddae:	b510      	push	{r4, lr}
 23fddb0:	4604      	mov	r4, r0
 23fddb2:	210c      	movs	r1, #12
 23fddb4:	f7fe fae9 	bl	23fc38a <_ZdlPvj>
 23fddb8:	4620      	mov	r0, r4
 23fddba:	bd10      	pop	{r4, pc}

023fddbc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fddbc:	b510      	push	{r4, lr}
 23fddbe:	4604      	mov	r4, r0
 23fddc0:	2104      	movs	r1, #4
 23fddc2:	f7fe fae2 	bl	23fc38a <_ZdlPvj>
 23fddc6:	4620      	mov	r0, r4
 23fddc8:	bd10      	pop	{r4, pc}

023fddca <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fddca:	b510      	push	{r4, lr}
 23fddcc:	4604      	mov	r4, r0
 23fddce:	2104      	movs	r1, #4
 23fddd0:	f7fe fadb 	bl	23fc38a <_ZdlPvj>
 23fddd4:	4620      	mov	r0, r4
 23fddd6:	bd10      	pop	{r4, pc}

023fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fddd8:	f7fe bff2 	b.w	23fcdc0 <os_mutex_recursive_lock>

023fdddc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fdddc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fddde:	f7fe faa1 	bl	23fc324 <strcmp>
}
 23fdde2:	fab0 f080 	clz	r0, r0
 23fdde6:	0940      	lsrs	r0, r0, #5
 23fdde8:	bd08      	pop	{r3, pc}

023fddea <__tcf_1>:
 23fddea:	4770      	bx	lr

023fddec <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fddec:	b510      	push	{r4, lr}
 23fddee:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fddf0:	f001 fa82 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23fddf4:	4284      	cmp	r4, r0
 23fddf6:	d105      	bne.n	23fde04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fddf8:	f001 fa7e 	bl	23ff2f8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fddfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fde00:	f001 ba6e 	b.w	23ff2e0 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fde04:	f001 fc5a 	bl	23ff6bc <_Z22__fetch_global_Serial1v>
 23fde08:	4284      	cmp	r4, r0
 23fde0a:	d105      	bne.n	23fde18 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fde0c:	f001 fc56 	bl	23ff6bc <_Z22__fetch_global_Serial1v>
}
 23fde10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fde14:	f001 ba07 	b.w	23ff226 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fde18:	b12c      	cbz	r4, 23fde26 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fde1a:	6823      	ldr	r3, [r4, #0]
 23fde1c:	4620      	mov	r0, r4
}
 23fde1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fde22:	685b      	ldr	r3, [r3, #4]
 23fde24:	4718      	bx	r3
 23fde26:	bd10      	pop	{r4, pc}

023fde28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fde28:	680b      	ldr	r3, [r1, #0]
 23fde2a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fde2c:	684b      	ldr	r3, [r1, #4]
 23fde2e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fde30:	b113      	cbz	r3, 23fde38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fde32:	685a      	ldr	r2, [r3, #4]
 23fde34:	3201      	adds	r2, #1
 23fde36:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fde38:	4770      	bx	lr

023fde3a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fde3a:	b513      	push	{r0, r1, r4, lr}
 23fde3c:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fde3e:	4608      	mov	r0, r1
 23fde40:	9101      	str	r1, [sp, #4]
 23fde42:	f7fe fa79 	bl	23fc338 <strlen>
 23fde46:	4602      	mov	r2, r0
 23fde48:	4620      	mov	r0, r4
 23fde4a:	9901      	ldr	r1, [sp, #4]
}
 23fde4c:	b002      	add	sp, #8
 23fde4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fde52:	f7ff bf7b 	b.w	23fdd4c <_ZN5spark10JSONWriter5valueEPKcj>

023fde56 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fde56:	b513      	push	{r0, r1, r4, lr}
 23fde58:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fde5a:	4608      	mov	r0, r1
 23fde5c:	9101      	str	r1, [sp, #4]
 23fde5e:	f7fe fa6b 	bl	23fc338 <strlen>
 23fde62:	4602      	mov	r2, r0
 23fde64:	4620      	mov	r0, r4
 23fde66:	6823      	ldr	r3, [r4, #0]
 23fde68:	9901      	ldr	r1, [sp, #4]
 23fde6a:	68db      	ldr	r3, [r3, #12]
}
 23fde6c:	b002      	add	sp, #8
 23fde6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fde72:	4718      	bx	r3

023fde74 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fde74:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fde76:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fde78:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fde7c:	2201      	movs	r2, #1
 23fde7e:	68db      	ldr	r3, [r3, #12]
 23fde80:	f10d 0107 	add.w	r1, sp, #7
 23fde84:	4798      	blx	r3
}
 23fde86:	b003      	add	sp, #12
 23fde88:	f85d fb04 	ldr.w	pc, [sp], #4

023fde8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fde8c:	680a      	ldr	r2, [r1, #0]
 23fde8e:	b510      	push	{r4, lr}
 23fde90:	6002      	str	r2, [r0, #0]
 23fde92:	684a      	ldr	r2, [r1, #4]
 23fde94:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fde96:	2200      	movs	r2, #0
 23fde98:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fde9c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fde9e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdea0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdea2:	6084      	str	r4, [r0, #8]
 23fdea4:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdea6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fdea8:	60c4      	str	r4, [r0, #12]
 23fdeaa:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdeac:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdeae:	6104      	str	r4, [r0, #16]
 23fdeb0:	bd10      	pop	{r4, pc}
	...

023fdeb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdeb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fdeb8:	f04f 0a14 	mov.w	sl, #20
 23fdebc:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fdec0:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fdec2:	4645      	mov	r5, r8
 23fdec4:	fb0a f404 	mul.w	r4, sl, r4
 23fdec8:	9300      	str	r3, [sp, #0]
 23fdeca:	4b17      	ldr	r3, [pc, #92]	; (23fdf28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdecc:	10a4      	asrs	r4, r4, #2
 23fdece:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fded0:	2c00      	cmp	r4, #0
 23fded2:	dd21      	ble.n	23fdf18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fded4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fded6:	fb0a f006 	mul.w	r0, sl, r6
 23fdeda:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fdede:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fdee2:	463a      	mov	r2, r7
 23fdee4:	455f      	cmp	r7, fp
 23fdee6:	bf28      	it	cs
 23fdee8:	465a      	movcs	r2, fp
 23fdeea:	5828      	ldr	r0, [r5, r0]
 23fdeec:	9101      	str	r1, [sp, #4]
 23fdeee:	f001 fd04 	bl	23ff8fa <strncmp>
                if (cmp == 0) {
 23fdef2:	2800      	cmp	r0, #0
 23fdef4:	f04f 0301 	mov.w	r3, #1
 23fdef8:	9901      	ldr	r1, [sp, #4]
 23fdefa:	d10b      	bne.n	23fdf14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fdefc:	455f      	cmp	r7, fp
 23fdefe:	d103      	bne.n	23fdf08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fdf00:	9a00      	ldr	r2, [sp, #0]
 23fdf02:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdf04:	4634      	mov	r4, r6
 23fdf06:	e7e3      	b.n	23fded0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fdf08:	d9fc      	bls.n	23fdf04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fdf0a:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fdf0c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fdf10:	3e01      	subs	r6, #1
 23fdf12:	e7f7      	b.n	23fdf04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fdf14:	dbf9      	blt.n	23fdf0a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fdf16:	e7f5      	b.n	23fdf04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fdf18:	eba5 0508 	sub.w	r5, r5, r8
}
 23fdf1c:	4802      	ldr	r0, [pc, #8]	; (23fdf28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdf1e:	10ad      	asrs	r5, r5, #2
 23fdf20:	4368      	muls	r0, r5
 23fdf22:	b003      	add	sp, #12
 23fdf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdf28:	cccccccd 	.word	0xcccccccd

023fdf2c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdf2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fdf2e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fdf30:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdf32:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fdf34:	b303      	cbz	r3, 23fdf78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fdf36:	b1f9      	cbz	r1, 23fdf78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fdf38:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fdf3a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fdf3e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fdf40:	a903      	add	r1, sp, #12
 23fdf42:	a801      	add	r0, sp, #4
 23fdf44:	f7ff ff21 	bl	23fdd8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdf48:	4601      	mov	r1, r0
 23fdf4a:	b1a8      	cbz	r0, 23fdf78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf4c:	f10d 030b 	add.w	r3, sp, #11
 23fdf50:	4620      	mov	r0, r4
 23fdf52:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fdf54:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdf58:	f7ff ffac 	bl	23fdeb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fdf5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fdf60:	b153      	cbz	r3, 23fdf78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fdf62:	6823      	ldr	r3, [r4, #0]
 23fdf64:	2414      	movs	r4, #20
 23fdf66:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fdf6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fdf6e:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fdf70:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fdf72:	bfa8      	it	ge
 23fdf74:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fdf76:	e7e3      	b.n	23fdf40 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fdf78:	4628      	mov	r0, r5
 23fdf7a:	b004      	add	sp, #16
 23fdf7c:	bd70      	pop	{r4, r5, r6, pc}

023fdf7e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fdf7e:	b40e      	push	{r1, r2, r3}
 23fdf80:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdf82:	b08c      	sub	sp, #48	; 0x30
 23fdf84:	af00      	add	r7, sp, #0
 23fdf86:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fdf8a:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdf8e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf90:	462b      	mov	r3, r5
 23fdf92:	2120      	movs	r1, #32
 23fdf94:	f107 0010 	add.w	r0, r7, #16
 23fdf98:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdf9a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdf9c:	f7ff fb46 	bl	23fd62c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fdfa0:	281f      	cmp	r0, #31
 23fdfa2:	687a      	ldr	r2, [r7, #4]
 23fdfa4:	d91a      	bls.n	23fdfdc <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fdfa6:	f100 0308 	add.w	r3, r0, #8
 23fdfaa:	f023 0307 	bic.w	r3, r3, #7
        }
 23fdfae:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fdfb0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdfb4:	1c41      	adds	r1, r0, #1
 23fdfb6:	462b      	mov	r3, r5
 23fdfb8:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdfba:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdfbc:	f7ff fb36 	bl	23fd62c <vsnprintf>
        if (n > 0) {
 23fdfc0:	1e02      	subs	r2, r0, #0
 23fdfc2:	dd04      	ble.n	23fdfce <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fdfc4:	6823      	ldr	r3, [r4, #0]
 23fdfc6:	4669      	mov	r1, sp
 23fdfc8:	4620      	mov	r0, r4
 23fdfca:	68db      	ldr	r3, [r3, #12]
 23fdfcc:	4798      	blx	r3
 23fdfce:	46b5      	mov	sp, r6
}
 23fdfd0:	3730      	adds	r7, #48	; 0x30
 23fdfd2:	46bd      	mov	sp, r7
 23fdfd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdfd8:	b003      	add	sp, #12
 23fdfda:	4770      	bx	lr
    } else if (n > 0) {
 23fdfdc:	2800      	cmp	r0, #0
 23fdfde:	d0f7      	beq.n	23fdfd0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fdfe0:	6823      	ldr	r3, [r4, #0]
 23fdfe2:	4602      	mov	r2, r0
 23fdfe4:	68db      	ldr	r3, [r3, #12]
 23fdfe6:	4620      	mov	r0, r4
 23fdfe8:	f107 0110 	add.w	r1, r7, #16
 23fdfec:	4798      	blx	r3
}
 23fdfee:	e7ef      	b.n	23fdfd0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fdff0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fdff0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fdff2:	4c08      	ldr	r4, [pc, #32]	; (23fe014 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fdff4:	e8d4 3f8f 	ldab	r3, [r4]
 23fdff8:	07db      	lsls	r3, r3, #31
 23fdffa:	d409      	bmi.n	23fe010 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdffc:	4620      	mov	r0, r4
 23fdffe:	f7fe f9d3 	bl	23fc3a8 <__cxa_guard_acquire>
 23fe002:	b128      	cbz	r0, 23fe010 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fe004:	4620      	mov	r0, r4
 23fe006:	f7fe f9d4 	bl	23fc3b2 <__cxa_guard_release>
 23fe00a:	4803      	ldr	r0, [pc, #12]	; (23fe018 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fe00c:	f001 fbea 	bl	23ff7e4 <atexit>
}
 23fe010:	4802      	ldr	r0, [pc, #8]	; (23fe01c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fe012:	bd10      	pop	{r4, pc}
 23fe014:	1007ae68 	.word	0x1007ae68
 23fe018:	023fdd83 	.word	0x023fdd83
 23fe01c:	1007ad68 	.word	0x1007ad68

023fe020 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fe020:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fe022:	4c08      	ldr	r4, [pc, #32]	; (23fe044 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fe024:	e8d4 3f8f 	ldab	r3, [r4]
 23fe028:	07db      	lsls	r3, r3, #31
 23fe02a:	d409      	bmi.n	23fe040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fe02c:	4620      	mov	r0, r4
 23fe02e:	f7fe f9bb 	bl	23fc3a8 <__cxa_guard_acquire>
 23fe032:	b128      	cbz	r0, 23fe040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fe034:	4620      	mov	r0, r4
 23fe036:	f7fe f9bc 	bl	23fc3b2 <__cxa_guard_release>
 23fe03a:	4803      	ldr	r0, [pc, #12]	; (23fe048 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fe03c:	f001 fbd2 	bl	23ff7e4 <atexit>
    return &factory;
}
 23fe040:	4802      	ldr	r0, [pc, #8]	; (23fe04c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fe042:	bd10      	pop	{r4, pc}
 23fe044:	1007ae6c 	.word	0x1007ae6c
 23fe048:	023fddeb 	.word	0x023fddeb
 23fe04c:	1007ad6c 	.word	0x1007ad6c

023fe050 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fe050:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fe052:	2500      	movs	r5, #0
 23fe054:	4604      	mov	r4, r0
 23fe056:	e9c0 5500 	strd	r5, r5, [r0]
 23fe05a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fe05e:	6085      	str	r5, [r0, #8]
 23fe060:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fe062:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fe066:	f7fe fe8f 	bl	23fcd88 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fe06a:	f7ff ffc1 	bl	23fdff0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fe06e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fe070:	f7ff ffd6 	bl	23fe020 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fe074:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fe076:	6220      	str	r0, [r4, #32]
}
 23fe078:	4620      	mov	r0, r4
 23fe07a:	bd38      	pop	{r3, r4, r5, pc}

023fe07c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fe07c:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fe07e:	4c0a      	ldr	r4, [pc, #40]	; (23fe0a8 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fe080:	e8d4 3f8f 	ldab	r3, [r4]
 23fe084:	07db      	lsls	r3, r3, #31
 23fe086:	d40c      	bmi.n	23fe0a2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fe088:	4620      	mov	r0, r4
 23fe08a:	f7fe f98d 	bl	23fc3a8 <__cxa_guard_acquire>
 23fe08e:	b140      	cbz	r0, 23fe0a2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fe090:	4806      	ldr	r0, [pc, #24]	; (23fe0ac <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe092:	f7ff ffdd 	bl	23fe050 <_ZN5spark10LogManagerC1Ev>
 23fe096:	4620      	mov	r0, r4
 23fe098:	f7fe f98b 	bl	23fc3b2 <__cxa_guard_release>
 23fe09c:	4804      	ldr	r0, [pc, #16]	; (23fe0b0 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fe09e:	f001 fba1 	bl	23ff7e4 <atexit>
    return &mgr;
}
 23fe0a2:	4802      	ldr	r0, [pc, #8]	; (23fe0ac <_ZN5spark10LogManager8instanceEv+0x30>)
 23fe0a4:	bd10      	pop	{r4, pc}
 23fe0a6:	bf00      	nop
 23fe0a8:	1007ae64 	.word	0x1007ae64
 23fe0ac:	1007ae74 	.word	0x1007ae74
 23fe0b0:	023fe5cd 	.word	0x023fe5cd

023fe0b4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fe0b4:	2300      	movs	r3, #0
 23fe0b6:	4a02      	ldr	r2, [pc, #8]	; (23fe0c0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fe0b8:	4902      	ldr	r1, [pc, #8]	; (23fe0c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fe0ba:	4803      	ldr	r0, [pc, #12]	; (23fe0c8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fe0bc:	f7ff b974 	b.w	23fd3a8 <log_set_callbacks>
 23fe0c0:	023fe3b5 	.word	0x023fe3b5
 23fe0c4:	023fe341 	.word	0x023fe341
 23fe0c8:	023fe2c1 	.word	0x023fe2c1

023fe0cc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fe0cc:	2300      	movs	r3, #0
 23fe0ce:	461a      	mov	r2, r3
 23fe0d0:	4619      	mov	r1, r3
 23fe0d2:	4618      	mov	r0, r3
 23fe0d4:	f7ff b968 	b.w	23fd3a8 <log_set_callbacks>

023fe0d8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fe0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe0da:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fe0dc:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe0de:	4668      	mov	r0, sp
 23fe0e0:	f7ff fea2 	bl	23fde28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe0e4:	466a      	mov	r2, sp
 23fe0e6:	4629      	mov	r1, r5
 23fe0e8:	4620      	mov	r0, r4
 23fe0ea:	f7ff fd4f 	bl	23fdb8c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fe0ee:	a801      	add	r0, sp, #4
 23fe0f0:	f7ff fafd 	bl	23fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe0f4:	4620      	mov	r0, r4
 23fe0f6:	b003      	add	sp, #12
 23fe0f8:	bd30      	pop	{r4, r5, pc}

023fe0fa <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fe0fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe0fc:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fe0fe:	68cd      	ldr	r5, [r1, #12]
 23fe100:	4668      	mov	r0, sp
 23fe102:	f7ff fe91 	bl	23fde28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe106:	466a      	mov	r2, sp
 23fe108:	4629      	mov	r1, r5
 23fe10a:	4620      	mov	r0, r4
 23fe10c:	f7ff fd1a 	bl	23fdb44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe110:	a801      	add	r0, sp, #4
 23fe112:	f7ff faec 	bl	23fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe116:	4620      	mov	r0, r4
 23fe118:	b003      	add	sp, #12
 23fe11a:	bd30      	pop	{r4, r5, pc}

023fe11c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fe11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe11e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fe120:	690d      	ldr	r5, [r1, #16]
 23fe122:	4668      	mov	r0, sp
 23fe124:	f7ff fe80 	bl	23fde28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fe128:	466a      	mov	r2, sp
 23fe12a:	4629      	mov	r1, r5
 23fe12c:	4620      	mov	r0, r4
 23fe12e:	f7ff fcb2 	bl	23fda96 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fe132:	a801      	add	r0, sp, #4
 23fe134:	f7ff fadb 	bl	23fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe138:	4620      	mov	r0, r4
 23fe13a:	b003      	add	sp, #12
 23fe13c:	bd30      	pop	{r4, r5, pc}
	...

023fe140 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fe140:	b570      	push	{r4, r5, r6, lr}
 23fe142:	b08a      	sub	sp, #40	; 0x28
 23fe144:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fe146:	4601      	mov	r1, r0
 23fe148:	a804      	add	r0, sp, #16
 23fe14a:	f7ff ffc5 	bl	23fe0d8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fe14e:	4e14      	ldr	r6, [pc, #80]	; (23fe1a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fe150:	a804      	add	r0, sp, #16
 23fe152:	f7ff fd33 	bl	23fdbbc <_ZN5spark18JSONObjectIterator4nextEv>
 23fe156:	b1e8      	cbz	r0, 23fe194 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fe158:	4668      	mov	r0, sp
 23fe15a:	a904      	add	r1, sp, #16
 23fe15c:	f7ff ffcd 	bl	23fe0fa <_ZNK5spark18JSONObjectIterator4nameEv>
 23fe160:	4631      	mov	r1, r6
 23fe162:	9802      	ldr	r0, [sp, #8]
 23fe164:	f7ff fe3a 	bl	23fdddc <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fe168:	4604      	mov	r4, r0
 23fe16a:	b110      	cbz	r0, 23fe172 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fe16c:	1e2c      	subs	r4, r5, #0
 23fe16e:	bf18      	it	ne
 23fe170:	2401      	movne	r4, #1
 23fe172:	a801      	add	r0, sp, #4
 23fe174:	f7ff fabb 	bl	23fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe178:	2c00      	cmp	r4, #0
 23fe17a:	d0e9      	beq.n	23fe150 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fe17c:	4668      	mov	r0, sp
 23fe17e:	a904      	add	r1, sp, #16
 23fe180:	f7ff ffcc 	bl	23fe11c <_ZNK5spark18JSONObjectIterator5valueEv>
 23fe184:	4668      	mov	r0, sp
 23fe186:	f7ff fcbc 	bl	23fdb02 <_ZNK5spark9JSONValue5toIntEv>
 23fe18a:	6028      	str	r0, [r5, #0]
 23fe18c:	a801      	add	r0, sp, #4
 23fe18e:	f7ff faae 	bl	23fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe192:	e7dd      	b.n	23fe150 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fe194:	a805      	add	r0, sp, #20
 23fe196:	f7ff faaa 	bl	23fd6ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe19a:	b00a      	add	sp, #40	; 0x28
 23fe19c:	bd70      	pop	{r4, r5, r6, pc}
 23fe19e:	bf00      	nop
 23fe1a0:	023ffc78 	.word	0x023ffc78

023fe1a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe1a6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fe1a8:	4913      	ldr	r1, [pc, #76]	; (23fe1f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fe1aa:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fe1ac:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fe1ae:	f7fe f8b9 	bl	23fc324 <strcmp>
 23fe1b2:	b950      	cbnz	r0, 23fe1ca <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fe1b4:	f001 f8a0 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23fe1b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe1bc:	f001 f88c 	bl	23ff2d8 <_ZN9USBSerial5beginEl>
}
 23fe1c0:	b003      	add	sp, #12
 23fe1c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fe1c6:	f001 b897 	b.w	23ff2f8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fe1ca:	4620      	mov	r0, r4
 23fe1cc:	490b      	ldr	r1, [pc, #44]	; (23fe1fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fe1ce:	f7fe f8a9 	bl	23fc324 <strcmp>
 23fe1d2:	b978      	cbnz	r0, 23fe1f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fe1d4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fe1d8:	a901      	add	r1, sp, #4
 23fe1da:	4628      	mov	r0, r5
        int baud = 9600;
 23fe1dc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fe1de:	f7ff ffaf 	bl	23fe140 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fe1e2:	f001 fa6b 	bl	23ff6bc <_Z22__fetch_global_Serial1v>
 23fe1e6:	9901      	ldr	r1, [sp, #4]
 23fe1e8:	f001 f81a 	bl	23ff220 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fe1ec:	f001 fa66 	bl	23ff6bc <_Z22__fetch_global_Serial1v>
}
 23fe1f0:	b003      	add	sp, #12
 23fe1f2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fe1f4:	2000      	movs	r0, #0
 23fe1f6:	e7fb      	b.n	23fe1f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fe1f8:	023ffc7d 	.word	0x023ffc7d
 23fe1fc:	023ffc84 	.word	0x023ffc84

023fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe200:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fe202:	2614      	movs	r6, #20
 23fe204:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe208:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe20a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe20e:	42ae      	cmp	r6, r5
 23fe210:	d005      	beq.n	23fe21e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fe212:	f105 0008 	add.w	r0, r5, #8
 23fe216:	f7ff fff3 	bl	23fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe21a:	3514      	adds	r5, #20
 23fe21c:	e7f7      	b.n	23fe20e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fe21e:	6820      	ldr	r0, [r4, #0]
 23fe220:	f7ff f9e8 	bl	23fd5f4 <free>
}
 23fe224:	4620      	mov	r0, r4
 23fe226:	bd70      	pop	{r4, r5, r6, pc}

023fe228 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fe228:	b510      	push	{r4, lr}
 23fe22a:	4604      	mov	r4, r0
 23fe22c:	300c      	adds	r0, #12
 23fe22e:	f7ff ffe7 	bl	23fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe232:	4620      	mov	r0, r4
 23fe234:	f7ff fa49 	bl	23fd6ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe238:	4620      	mov	r0, r4
 23fe23a:	bd10      	pop	{r4, pc}

023fe23c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fe23c:	b510      	push	{r4, lr}
 23fe23e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fe240:	4b03      	ldr	r3, [pc, #12]	; (23fe250 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fe242:	f840 3b04 	str.w	r3, [r0], #4
 23fe246:	f7ff ffef 	bl	23fe228 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fe24a:	4620      	mov	r0, r4
 23fe24c:	bd10      	pop	{r4, pc}
 23fe24e:	bf00      	nop
 23fe250:	023ffbcc 	.word	0x023ffbcc

023fe254 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fe254:	b510      	push	{r4, lr}
 23fe256:	4604      	mov	r4, r0
 23fe258:	f7ff fff0 	bl	23fe23c <_ZN5spark16StreamLogHandlerD1Ev>
 23fe25c:	4620      	mov	r0, r4
 23fe25e:	2124      	movs	r1, #36	; 0x24
 23fe260:	f7fe f893 	bl	23fc38a <_ZdlPvj>
 23fe264:	4620      	mov	r0, r4
 23fe266:	bd10      	pop	{r4, pc}

023fe268 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fe268:	b510      	push	{r4, lr}
 23fe26a:	4604      	mov	r4, r0
 23fe26c:	4b02      	ldr	r3, [pc, #8]	; (23fe278 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fe26e:	6003      	str	r3, [r0, #0]
 23fe270:	f7ff ffe4 	bl	23fe23c <_ZN5spark16StreamLogHandlerD1Ev>
 23fe274:	4620      	mov	r0, r4
 23fe276:	bd10      	pop	{r4, pc}
 23fe278:	023ffd24 	.word	0x023ffd24

023fe27c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fe27c:	b510      	push	{r4, lr}
 23fe27e:	4604      	mov	r4, r0
 23fe280:	f7ff fff2 	bl	23fe268 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fe284:	4620      	mov	r0, r4
 23fe286:	2124      	movs	r1, #36	; 0x24
 23fe288:	f7fe f87f 	bl	23fc38a <_ZdlPvj>
 23fe28c:	4620      	mov	r0, r4
 23fe28e:	bd10      	pop	{r4, pc}

023fe290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fe290:	2200      	movs	r2, #0
 23fe292:	e9c0 2200 	strd	r2, r2, [r0]
 23fe296:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fe298:	b510      	push	{r4, lr}
 23fe29a:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe29c:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe29e:	6004      	str	r4, [r0, #0]
 23fe2a0:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2a2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe2a4:	6044      	str	r4, [r0, #4]
 23fe2a6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe2a8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe2aa:	6084      	str	r4, [r0, #8]
}
 23fe2ac:	bd10      	pop	{r4, pc}

023fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fe2ae:	b510      	push	{r4, lr}
 23fe2b0:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fe2b2:	6803      	ldr	r3, [r0, #0]
 23fe2b4:	6818      	ldr	r0, [r3, #0]
 23fe2b6:	f7fe fd91 	bl	23fcddc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fe2ba:	4620      	mov	r0, r4
 23fe2bc:	bd10      	pop	{r4, pc}
	...

023fe2c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fe2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe2c4:	b087      	sub	sp, #28
 23fe2c6:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fe2c8:	4b1c      	ldr	r3, [pc, #112]	; (23fe33c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fe2ca:	4680      	mov	r8, r0
 23fe2cc:	685b      	ldr	r3, [r3, #4]
 23fe2ce:	4689      	mov	r9, r1
 23fe2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe2d4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fe2d6:	b96b      	cbnz	r3, 23fe2f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fe2d8:	f7ff fed0 	bl	23fe07c <_ZN5spark10LogManager8instanceEv>
 23fe2dc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe2de:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fe2e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe2e4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fe2e6:	f7ff fd77 	bl	23fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fe2ea:	7b23      	ldrb	r3, [r4, #12]
 23fe2ec:	b12b      	cbz	r3, 23fe2fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fe2ee:	a805      	add	r0, sp, #20
 23fe2f0:	f7ff ffdd 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fe2f4:	b007      	add	sp, #28
 23fe2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fe2fa:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fe2fc:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fe300:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fe302:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe306:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe30a:	45aa      	cmp	sl, r5
 23fe30c:	d012      	beq.n	23fe334 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fe30e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fe312:	4631      	mov	r1, r6
 23fe314:	1d38      	adds	r0, r7, #4
 23fe316:	f7ff fe09 	bl	23fdf2c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe31a:	4581      	cmp	r9, r0
 23fe31c:	d3f5      	bcc.n	23fe30a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fe31e:	9a03      	ldr	r2, [sp, #12]
 23fe320:	683b      	ldr	r3, [r7, #0]
 23fe322:	9200      	str	r2, [sp, #0]
 23fe324:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fe328:	464a      	mov	r2, r9
 23fe32a:	4633      	mov	r3, r6
 23fe32c:	4641      	mov	r1, r8
 23fe32e:	4638      	mov	r0, r7
 23fe330:	47d8      	blx	fp
 23fe332:	e7ea      	b.n	23fe30a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fe334:	2300      	movs	r3, #0
 23fe336:	7323      	strb	r3, [r4, #12]
 23fe338:	e7d9      	b.n	23fe2ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fe33a:	bf00      	nop
 23fe33c:	e000ed00 	.word	0xe000ed00

023fe340 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fe340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe344:	469b      	mov	fp, r3
 23fe346:	4b1a      	ldr	r3, [pc, #104]	; (23fe3b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fe348:	4680      	mov	r8, r0
 23fe34a:	685b      	ldr	r3, [r3, #4]
 23fe34c:	4689      	mov	r9, r1
 23fe34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fe352:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fe354:	b96b      	cbnz	r3, 23fe372 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fe356:	f7ff fe91 	bl	23fe07c <_ZN5spark10LogManager8instanceEv>
 23fe35a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe35c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe360:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe362:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe364:	f7ff fd38 	bl	23fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fe368:	7b23      	ldrb	r3, [r4, #12]
 23fe36a:	b12b      	cbz	r3, 23fe378 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fe36c:	a801      	add	r0, sp, #4
 23fe36e:	f7ff ff9e 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe372:	b003      	add	sp, #12
 23fe374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fe378:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fe37a:	b2f6      	uxtb	r6, r6
 23fe37c:	7323      	strb	r3, [r4, #12]
 23fe37e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fe382:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe386:	4555      	cmp	r5, sl
 23fe388:	d00e      	beq.n	23fe3a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fe38a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fe38e:	4659      	mov	r1, fp
 23fe390:	1d38      	adds	r0, r7, #4
 23fe392:	f7ff fdcb 	bl	23fdf2c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fe396:	4286      	cmp	r6, r0
 23fe398:	d3f5      	bcc.n	23fe386 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fe39a:	683b      	ldr	r3, [r7, #0]
 23fe39c:	464a      	mov	r2, r9
 23fe39e:	4641      	mov	r1, r8
 23fe3a0:	4638      	mov	r0, r7
 23fe3a2:	68db      	ldr	r3, [r3, #12]
 23fe3a4:	4798      	blx	r3
 23fe3a6:	e7ee      	b.n	23fe386 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fe3a8:	2300      	movs	r3, #0
 23fe3aa:	7323      	strb	r3, [r4, #12]
 23fe3ac:	e7de      	b.n	23fe36c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fe3ae:	bf00      	nop
 23fe3b0:	e000ed00 	.word	0xe000ed00

023fe3b4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fe3b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fe3b8:	4b16      	ldr	r3, [pc, #88]	; (23fe414 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fe3ba:	4605      	mov	r5, r0
 23fe3bc:	685b      	ldr	r3, [r3, #4]
 23fe3be:	460f      	mov	r7, r1
 23fe3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fe3c4:	bb1b      	cbnz	r3, 23fe40e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fe3c6:	f7ff fe59 	bl	23fe07c <_ZN5spark10LogManager8instanceEv>
 23fe3ca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe3cc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe3d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe3d2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe3d4:	f7ff fd00 	bl	23fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fe3d8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fe3dc:	2446      	movs	r4, #70	; 0x46
 23fe3de:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe3e2:	45b0      	cmp	r8, r6
 23fe3e4:	d109      	bne.n	23fe3fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fe3e6:	a801      	add	r0, sp, #4
 23fe3e8:	f7ff ff61 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fe3ec:	42a5      	cmp	r5, r4
 23fe3ee:	bfb4      	ite	lt
 23fe3f0:	2000      	movlt	r0, #0
 23fe3f2:	2001      	movge	r0, #1
}
 23fe3f4:	b002      	add	sp, #8
 23fe3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fe3fa:	f856 0b04 	ldr.w	r0, [r6], #4
 23fe3fe:	4639      	mov	r1, r7
 23fe400:	3004      	adds	r0, #4
 23fe402:	f7ff fd93 	bl	23fdf2c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fe406:	4284      	cmp	r4, r0
 23fe408:	bfa8      	it	ge
 23fe40a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fe40c:	e7e9      	b.n	23fe3e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fe40e:	2000      	movs	r0, #0
 23fe410:	e7f0      	b.n	23fe3f4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fe412:	bf00      	nop
 23fe414:	e000ed00 	.word	0xe000ed00

023fe418 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe41a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fe41e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe420:	4604      	mov	r4, r0
 23fe422:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe424:	db0d      	blt.n	23fe442 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fe426:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fe428:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe42a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe42c:	dd04      	ble.n	23fe438 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fe42e:	00b9      	lsls	r1, r7, #2
 23fe430:	f7ff f8ee 	bl	23fd610 <realloc>
            if (!d) {
 23fe434:	b918      	cbnz	r0, 23fe43e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fe436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fe438:	f7ff f8dc 	bl	23fd5f4 <free>
        T* d = nullptr;
 23fe43c:	2000      	movs	r0, #0
        data_ = d;
 23fe43e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe440:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe442:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe444:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe446:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fe44a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe44c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fe450:	1d08      	adds	r0, r1, #4
 23fe452:	f001 f9e2 	bl	23ff81a <memmove>
    new(p) T(std::move(value));
 23fe456:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe45a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe45c:	2001      	movs	r0, #1
    ++size_;
 23fe45e:	3301      	adds	r3, #1
 23fe460:	6063      	str	r3, [r4, #4]
    return true;
 23fe462:	e7e8      	b.n	23fe436 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe464 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe466:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe468:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe46c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe46e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe470:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe472:	f7ff fcb1 	bl	23fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe476:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe47a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe47e:	4293      	cmp	r3, r2
 23fe480:	4619      	mov	r1, r3
 23fe482:	d00a      	beq.n	23fe49a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe484:	6809      	ldr	r1, [r1, #0]
 23fe486:	3304      	adds	r3, #4
 23fe488:	42a9      	cmp	r1, r5
 23fe48a:	d1f8      	bne.n	23fe47e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe48c:	a801      	add	r0, sp, #4
 23fe48e:	f7ff ff0e 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe492:	2500      	movs	r5, #0
}
 23fe494:	4628      	mov	r0, r5
 23fe496:	b003      	add	sp, #12
 23fe498:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe49a:	4629      	mov	r1, r5
 23fe49c:	4620      	mov	r0, r4
 23fe49e:	f7ff ffbb 	bl	23fe418 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe4a2:	4605      	mov	r5, r0
 23fe4a4:	2800      	cmp	r0, #0
 23fe4a6:	d0f1      	beq.n	23fe48c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe4a8:	6863      	ldr	r3, [r4, #4]
 23fe4aa:	2b01      	cmp	r3, #1
 23fe4ac:	d101      	bne.n	23fe4b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe4ae:	f7ff fe01 	bl	23fe0b4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe4b2:	a801      	add	r0, sp, #4
 23fe4b4:	f7ff fefb 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe4b8:	e7ec      	b.n	23fe494 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe4ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe4ba:	460b      	mov	r3, r1
 23fe4bc:	b570      	push	{r4, r5, r6, lr}
 23fe4be:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe4c0:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe4c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe4c8:	4282      	cmp	r2, r0
 23fe4ca:	d00f      	beq.n	23fe4ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe4cc:	4601      	mov	r1, r0
            if (*p == value) {
 23fe4ce:	681d      	ldr	r5, [r3, #0]
 23fe4d0:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe4d4:	42ae      	cmp	r6, r5
 23fe4d6:	d107      	bne.n	23fe4e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe4d8:	1a52      	subs	r2, r2, r1
 23fe4da:	f001 f99e 	bl	23ff81a <memmove>
    return true;
 23fe4de:	2001      	movs	r0, #1
    --size_;
 23fe4e0:	6863      	ldr	r3, [r4, #4]
 23fe4e2:	3b01      	subs	r3, #1
 23fe4e4:	6063      	str	r3, [r4, #4]
}
 23fe4e6:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe4e8:	4608      	mov	r0, r1
 23fe4ea:	e7ed      	b.n	23fe4c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe4ec:	2000      	movs	r0, #0
 23fe4ee:	e7fa      	b.n	23fe4e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe4f0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe4f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe4f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe4f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe4fa:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe4fc:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe4fe:	f7ff fc6b 	bl	23fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe502:	4620      	mov	r0, r4
 23fe504:	a901      	add	r1, sp, #4
 23fe506:	f7ff ffd8 	bl	23fe4ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe50a:	b118      	cbz	r0, 23fe514 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe50c:	6863      	ldr	r3, [r4, #4]
 23fe50e:	b90b      	cbnz	r3, 23fe514 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe510:	f7ff fddc 	bl	23fe0cc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe514:	a803      	add	r0, sp, #12
 23fe516:	f7ff feca 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe51a:	b004      	add	sp, #16
 23fe51c:	bd10      	pop	{r4, pc}

023fe51e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe51e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe520:	b570      	push	{r4, r5, r6, lr}
 23fe522:	4604      	mov	r4, r0
 23fe524:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe528:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe52c:	42ae      	cmp	r6, r5
 23fe52e:	d015      	beq.n	23fe55c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe530:	4620      	mov	r0, r4
 23fe532:	f105 0110 	add.w	r1, r5, #16
 23fe536:	f7ff ffc0 	bl	23fe4ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe53a:	6863      	ldr	r3, [r4, #4]
 23fe53c:	b90b      	cbnz	r3, 23fe542 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe53e:	f7ff fdc5 	bl	23fe0cc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe542:	69e0      	ldr	r0, [r4, #28]
 23fe544:	6929      	ldr	r1, [r5, #16]
 23fe546:	6803      	ldr	r3, [r0, #0]
 23fe548:	68db      	ldr	r3, [r3, #12]
 23fe54a:	4798      	blx	r3
        if (h.stream) {
 23fe54c:	6969      	ldr	r1, [r5, #20]
 23fe54e:	b119      	cbz	r1, 23fe558 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe550:	6a20      	ldr	r0, [r4, #32]
 23fe552:	6803      	ldr	r3, [r0, #0]
 23fe554:	68db      	ldr	r3, [r3, #12]
 23fe556:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe558:	3518      	adds	r5, #24
 23fe55a:	e7e7      	b.n	23fe52c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe55c:	2618      	movs	r6, #24
 23fe55e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe562:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe566:	42ae      	cmp	r6, r5
 23fe568:	d004      	beq.n	23fe574 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe56a:	4628      	mov	r0, r5
 23fe56c:	f000 fd59 	bl	23ff022 <_ZN6StringD1Ev>
 23fe570:	3518      	adds	r5, #24
 23fe572:	e7f8      	b.n	23fe566 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe574:	2300      	movs	r3, #0
 23fe576:	6163      	str	r3, [r4, #20]
}
 23fe578:	bd70      	pop	{r4, r5, r6, pc}

023fe57a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe57c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe57e:	f7ff fda5 	bl	23fe0cc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe582:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe586:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe588:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe58a:	f7ff fc25 	bl	23fddd8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe58e:	4620      	mov	r0, r4
 23fe590:	f7ff ffc5 	bl	23fe51e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe594:	a801      	add	r0, sp, #4
 23fe596:	f7ff fe8a 	bl	23fe2ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe59a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe59c:	b108      	cbz	r0, 23fe5a2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe59e:	f7fe fc01 	bl	23fcda4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe5a2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe5a6:	2618      	movs	r6, #24
 23fe5a8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe5ac:	42ae      	cmp	r6, r5
 23fe5ae:	d004      	beq.n	23fe5ba <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe5b0:	4628      	mov	r0, r5
 23fe5b2:	f000 fd36 	bl	23ff022 <_ZN6StringD1Ev>
 23fe5b6:	3518      	adds	r5, #24
 23fe5b8:	e7f8      	b.n	23fe5ac <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe5ba:	6920      	ldr	r0, [r4, #16]
 23fe5bc:	f7ff f81a 	bl	23fd5f4 <free>
 23fe5c0:	6820      	ldr	r0, [r4, #0]
 23fe5c2:	f7ff f817 	bl	23fd5f4 <free>
}
 23fe5c6:	4620      	mov	r0, r4
 23fe5c8:	b002      	add	sp, #8
 23fe5ca:	bd70      	pop	{r4, r5, r6, pc}

023fe5cc <__tcf_2>:
    static LogManager mgr;
 23fe5cc:	4801      	ldr	r0, [pc, #4]	; (23fe5d4 <__tcf_2+0x8>)
 23fe5ce:	f7ff bfd4 	b.w	23fe57a <_ZN5spark10LogManagerD1Ev>
 23fe5d2:	bf00      	nop
 23fe5d4:	1007ae74 	.word	0x1007ae74

023fe5d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe5d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe5dc:	4604      	mov	r4, r0
 23fe5de:	460d      	mov	r5, r1
 23fe5e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe5e2:	d915      	bls.n	23fe610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe5e4:	4290      	cmp	r0, r2
 23fe5e6:	d214      	bcs.n	23fe612 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe5e8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe5ec:	1a75      	subs	r5, r6, r1
 23fe5ee:	f1a1 0714 	sub.w	r7, r1, #20
 23fe5f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe5f4:	42b7      	cmp	r7, r6
 23fe5f6:	d01a      	beq.n	23fe62e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe5f8:	b11c      	cbz	r4, 23fe602 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe5fa:	4631      	mov	r1, r6
 23fe5fc:	4620      	mov	r0, r4
 23fe5fe:	f7ff fc45 	bl	23fde8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe602:	f106 0008 	add.w	r0, r6, #8
 23fe606:	f7ff fdfb 	bl	23fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe60a:	3e14      	subs	r6, #20
 23fe60c:	3c14      	subs	r4, #20
 23fe60e:	e7f1      	b.n	23fe5f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe610:	d00d      	beq.n	23fe62e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe612:	42b5      	cmp	r5, r6
 23fe614:	d00b      	beq.n	23fe62e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe616:	b11c      	cbz	r4, 23fe620 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe618:	4629      	mov	r1, r5
 23fe61a:	4620      	mov	r0, r4
 23fe61c:	f7ff fc36 	bl	23fde8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe620:	f105 0008 	add.w	r0, r5, #8
 23fe624:	f7ff fdec 	bl	23fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe628:	3514      	adds	r5, #20
 23fe62a:	3414      	adds	r4, #20
 23fe62c:	e7f1      	b.n	23fe612 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe630 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe630:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe634:	4604      	mov	r4, r0
 23fe636:	460d      	mov	r5, r1
 23fe638:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe63a:	d914      	bls.n	23fe666 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe63c:	4290      	cmp	r0, r2
 23fe63e:	d213      	bcs.n	23fe668 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe640:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe644:	1a75      	subs	r5, r6, r1
 23fe646:	f1a1 0710 	sub.w	r7, r1, #16
 23fe64a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe64c:	42b7      	cmp	r7, r6
 23fe64e:	d018      	beq.n	23fe682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe650:	b11c      	cbz	r4, 23fe65a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe652:	4631      	mov	r1, r6
 23fe654:	4620      	mov	r0, r4
 23fe656:	f000 fd4c 	bl	23ff0f2 <_ZN6StringC1EOS_>
                end->~T();
 23fe65a:	4630      	mov	r0, r6
 23fe65c:	f000 fce1 	bl	23ff022 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe660:	3e10      	subs	r6, #16
 23fe662:	3c10      	subs	r4, #16
 23fe664:	e7f2      	b.n	23fe64c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe666:	d00c      	beq.n	23fe682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe668:	42b5      	cmp	r5, r6
 23fe66a:	d00a      	beq.n	23fe682 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe66c:	b11c      	cbz	r4, 23fe676 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe66e:	4629      	mov	r1, r5
 23fe670:	4620      	mov	r0, r4
 23fe672:	f000 fd3e 	bl	23ff0f2 <_ZN6StringC1EOS_>
                p->~T();
 23fe676:	4628      	mov	r0, r5
 23fe678:	f000 fcd3 	bl	23ff022 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe67c:	3510      	adds	r5, #16
 23fe67e:	3410      	adds	r4, #16
 23fe680:	e7f2      	b.n	23fe668 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe684:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe686:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe688:	4605      	mov	r5, r0
        if (n > 0) {
 23fe68a:	dd11      	ble.n	23fe6b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe68c:	0130      	lsls	r0, r6, #4
 23fe68e:	f7fe ffa3 	bl	23fd5d8 <malloc>
            if (!d) {
 23fe692:	4604      	mov	r4, r0
 23fe694:	b158      	cbz	r0, 23fe6ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe696:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe69a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe69e:	f7ff ffc7 	bl	23fe630 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe6a2:	6828      	ldr	r0, [r5, #0]
 23fe6a4:	f7fe ffa6 	bl	23fd5f4 <free>
        return true;
 23fe6a8:	2001      	movs	r0, #1
        data_ = d;
 23fe6aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe6ac:	60ae      	str	r6, [r5, #8]
    }
 23fe6ae:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe6b0:	2400      	movs	r4, #0
 23fe6b2:	e7f6      	b.n	23fe6a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe6b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe6b8:	4690      	mov	r8, r2
        capacity_(0) {
 23fe6ba:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe6bc:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe6be:	b095      	sub	sp, #84	; 0x54
 23fe6c0:	9103      	str	r1, [sp, #12]
    return size_;
 23fe6c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe6c6:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe6c8:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe6ca:	e9c0 3300 	strd	r3, r3, [r0]
 23fe6ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe6d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe6d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe6da:	7602      	strb	r2, [r0, #24]
 23fe6dc:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe6de:	dc23      	bgt.n	23fe728 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe6e0:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe6e4:	2314      	movs	r3, #20
 23fe6e6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe6ea:	42af      	cmp	r7, r5
 23fe6ec:	d03b      	beq.n	23fe766 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe6ee:	4629      	mov	r1, r5
 23fe6f0:	a80b      	add	r0, sp, #44	; 0x2c
 23fe6f2:	f000 fcfe 	bl	23ff0f2 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe6f6:	a90b      	add	r1, sp, #44	; 0x2c
 23fe6f8:	a80f      	add	r0, sp, #60	; 0x3c
 23fe6fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe6fc:	f000 fcf9 	bl	23ff0f2 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe700:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe704:	4299      	cmp	r1, r3
 23fe706:	da1b      	bge.n	23fe740 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe708:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe70c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe710:	4631      	mov	r1, r6
 23fe712:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe716:	f106 0010 	add.w	r0, r6, #16
 23fe71a:	f7ff ff89 	bl	23fe630 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe71e:	b9ee      	cbnz	r6, 23fe75c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe722:	3301      	adds	r3, #1
 23fe724:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe726:	e011      	b.n	23fe74c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe728:	a808      	add	r0, sp, #32
 23fe72a:	f7ff ffab 	bl	23fe684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe72e:	2800      	cmp	r0, #0
 23fe730:	d1d6      	bne.n	23fe6e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe732:	a808      	add	r0, sp, #32
 23fe734:	f7fe ffc9 	bl	23fd6ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe738:	4620      	mov	r0, r4
 23fe73a:	b015      	add	sp, #84	; 0x54
 23fe73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe740:	3101      	adds	r1, #1
 23fe742:	a808      	add	r0, sp, #32
 23fe744:	f7ff ff9e 	bl	23fe684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe748:	2800      	cmp	r0, #0
 23fe74a:	d1dd      	bne.n	23fe708 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe74c:	a80f      	add	r0, sp, #60	; 0x3c
 23fe74e:	f000 fc68 	bl	23ff022 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe752:	a80b      	add	r0, sp, #44	; 0x2c
 23fe754:	f000 fc65 	bl	23ff022 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe758:	3514      	adds	r5, #20
 23fe75a:	e7c6      	b.n	23fe6ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe75c:	4630      	mov	r0, r6
 23fe75e:	a90f      	add	r1, sp, #60	; 0x3c
 23fe760:	f000 fcc7 	bl	23ff0f2 <_ZN6StringC1EOS_>
 23fe764:	e7dc      	b.n	23fe720 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe766:	2600      	movs	r6, #0
 23fe768:	f04f 0914 	mov.w	r9, #20
 23fe76c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe770:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe772:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe776:	429e      	cmp	r6, r3
 23fe778:	da7c      	bge.n	23fe874 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fe77a:	0133      	lsls	r3, r6, #4
 23fe77c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe77e:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe780:	b90b      	cbnz	r3, 23fe786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe782:	3601      	adds	r6, #1
 23fe784:	e7f5      	b.n	23fe772 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe786:	2300      	movs	r3, #0
 23fe788:	9307      	str	r3, [sp, #28]
 23fe78a:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe78e:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe790:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe792:	a907      	add	r1, sp, #28
 23fe794:	a806      	add	r0, sp, #24
 23fe796:	f7ff faf8 	bl	23fdd8a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe79a:	4682      	mov	sl, r0
 23fe79c:	2800      	cmp	r0, #0
 23fe79e:	d0f0      	beq.n	23fe782 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe7a0:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe7a4:	4601      	mov	r1, r0
            bool found = false;
 23fe7a6:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe7aa:	4628      	mov	r0, r5
 23fe7ac:	9a07      	ldr	r2, [sp, #28]
 23fe7ae:	f10d 0317 	add.w	r3, sp, #23
 23fe7b2:	f7ff fb7f 	bl	23fdeb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe7b6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe7ba:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe7bc:	2f00      	cmp	r7, #0
 23fe7be:	d14a      	bne.n	23fe856 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe7c0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe7c4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe7c8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe7cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe7d0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe7d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe7d8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe7da:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe7de:	4293      	cmp	r3, r2
 23fe7e0:	db17      	blt.n	23fe812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe7e2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe7e6:	f1ba 0f00 	cmp.w	sl, #0
 23fe7ea:	dd30      	ble.n	23fe84e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe7ec:	fb09 f00a 	mul.w	r0, r9, sl
 23fe7f0:	f7fe fef2 	bl	23fd5d8 <malloc>
            if (!d) {
 23fe7f4:	4683      	mov	fp, r0
 23fe7f6:	b360      	cbz	r0, 23fe852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe7f8:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe7fc:	fb09 1202 	mla	r2, r9, r2, r1
 23fe800:	f7ff feea 	bl	23fe5d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe804:	6828      	ldr	r0, [r5, #0]
 23fe806:	f7fe fef5 	bl	23fd5f4 <free>
        data_ = d;
 23fe80a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe80e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe812:	682b      	ldr	r3, [r5, #0]
 23fe814:	9a01      	ldr	r2, [sp, #4]
 23fe816:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe81a:	686a      	ldr	r2, [r5, #4]
 23fe81c:	4651      	mov	r1, sl
 23fe81e:	fb09 3202 	mla	r2, r9, r2, r3
 23fe822:	f10a 0014 	add.w	r0, sl, #20
 23fe826:	f7ff fed7 	bl	23fe5d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe82a:	f1ba 0f00 	cmp.w	sl, #0
 23fe82e:	d003      	beq.n	23fe838 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe830:	4650      	mov	r0, sl
 23fe832:	a90f      	add	r1, sp, #60	; 0x3c
 23fe834:	f7ff fb2a 	bl	23fde8c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe838:	686b      	ldr	r3, [r5, #4]
 23fe83a:	3301      	adds	r3, #1
 23fe83c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe83e:	a811      	add	r0, sp, #68	; 0x44
 23fe840:	f7ff fcde 	bl	23fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe844:	b13f      	cbz	r7, 23fe856 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe846:	a80b      	add	r0, sp, #44	; 0x2c
 23fe848:	f7ff fcda 	bl	23fe200 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe84c:	e771      	b.n	23fe732 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe84e:	46bb      	mov	fp, r7
 23fe850:	e7d8      	b.n	23fe804 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe852:	2701      	movs	r7, #1
 23fe854:	e7f3      	b.n	23fe83e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe856:	9b01      	ldr	r3, [sp, #4]
 23fe858:	682d      	ldr	r5, [r5, #0]
 23fe85a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe85e:	9b06      	ldr	r3, [sp, #24]
 23fe860:	781b      	ldrb	r3, [r3, #0]
 23fe862:	b92b      	cbnz	r3, 23fe870 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe864:	f8d8 3000 	ldr.w	r3, [r8]
 23fe868:	9a02      	ldr	r2, [sp, #8]
 23fe86a:	4413      	add	r3, r2
 23fe86c:	7c1b      	ldrb	r3, [r3, #16]
 23fe86e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe870:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe872:	e78e      	b.n	23fe792 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe874:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe876:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe878:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe87a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe87c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe87e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe882:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe884:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe886:	60a2      	str	r2, [r4, #8]
 23fe888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe88a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe88c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe88e:	60e2      	str	r2, [r4, #12]
 23fe890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe892:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe894:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe896:	6122      	str	r2, [r4, #16]
 23fe898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe89a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe89c:	9b03      	ldr	r3, [sp, #12]
 23fe89e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe8a0:	6162      	str	r2, [r4, #20]
 23fe8a2:	7623      	strb	r3, [r4, #24]
 23fe8a4:	e7cf      	b.n	23fe846 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe8a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe8aa:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe8ac:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe8ae:	4617      	mov	r7, r2
 23fe8b0:	b087      	sub	sp, #28
 23fe8b2:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe8b4:	4668      	mov	r0, sp
 23fe8b6:	4619      	mov	r1, r3
 23fe8b8:	f7fd fec2 	bl	23fc640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe8bc:	4b0b      	ldr	r3, [pc, #44]	; (23fe8ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe8be:	4669      	mov	r1, sp
 23fe8c0:	f846 3b04 	str.w	r3, [r6], #4
 23fe8c4:	a803      	add	r0, sp, #12
 23fe8c6:	f7fd febb 	bl	23fc640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe8ca:	4639      	mov	r1, r7
 23fe8cc:	aa03      	add	r2, sp, #12
 23fe8ce:	4630      	mov	r0, r6
 23fe8d0:	f7ff fef0 	bl	23fe6b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe8d4:	a803      	add	r0, sp, #12
 23fe8d6:	f7fd fe72 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe8da:	4668      	mov	r0, sp
 23fe8dc:	f7fd fe6f 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe8e0:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe8e2:	4b03      	ldr	r3, [pc, #12]	; (23fe8f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe8e4:	6225      	str	r5, [r4, #32]
 23fe8e6:	6023      	str	r3, [r4, #0]
}
 23fe8e8:	b007      	add	sp, #28
 23fe8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe8ec:	023ffbcc 	.word	0x023ffbcc
 23fe8f0:	023ffd0c 	.word	0x023ffd0c

023fe8f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe8f6:	460f      	mov	r7, r1
 23fe8f8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe8fa:	4638      	mov	r0, r7
 23fe8fc:	491c      	ldr	r1, [pc, #112]	; (23fe970 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe8fe:	4616      	mov	r6, r2
 23fe900:	461d      	mov	r5, r3
 23fe902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe904:	f7fd fd0e 	bl	23fc324 <strcmp>
 23fe908:	b9c0      	cbnz	r0, 23fe93c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe90a:	b1a4      	cbz	r4, 23fe936 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe90c:	4629      	mov	r1, r5
 23fe90e:	a801      	add	r0, sp, #4
 23fe910:	f7ff fcbe 	bl	23fe290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe914:	2024      	movs	r0, #36	; 0x24
 23fe916:	4917      	ldr	r1, [pc, #92]	; (23fe974 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe918:	f000 ff60 	bl	23ff7dc <_ZnwjRKSt9nothrow_t>
 23fe91c:	4605      	mov	r5, r0
 23fe91e:	b130      	cbz	r0, 23fe92e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe920:	ab01      	add	r3, sp, #4
 23fe922:	4632      	mov	r2, r6
 23fe924:	4621      	mov	r1, r4
 23fe926:	f7ff ffbf 	bl	23fe8a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe92a:	4b13      	ldr	r3, [pc, #76]	; (23fe978 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe92c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe92e:	a801      	add	r0, sp, #4
 23fe930:	f7fd fe45 	bl	23fc5be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe934:	462c      	mov	r4, r5
}
 23fe936:	4620      	mov	r0, r4
 23fe938:	b005      	add	sp, #20
 23fe93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe93c:	4638      	mov	r0, r7
 23fe93e:	490f      	ldr	r1, [pc, #60]	; (23fe97c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe940:	f7fd fcf0 	bl	23fc324 <strcmp>
 23fe944:	b990      	cbnz	r0, 23fe96c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe946:	2c00      	cmp	r4, #0
 23fe948:	d0f5      	beq.n	23fe936 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe94a:	4629      	mov	r1, r5
 23fe94c:	a801      	add	r0, sp, #4
 23fe94e:	f7ff fc9f 	bl	23fe290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe952:	2024      	movs	r0, #36	; 0x24
 23fe954:	4907      	ldr	r1, [pc, #28]	; (23fe974 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe956:	f000 ff41 	bl	23ff7dc <_ZnwjRKSt9nothrow_t>
 23fe95a:	4605      	mov	r5, r0
 23fe95c:	2800      	cmp	r0, #0
 23fe95e:	d0e6      	beq.n	23fe92e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe960:	4632      	mov	r2, r6
 23fe962:	4621      	mov	r1, r4
 23fe964:	ab01      	add	r3, sp, #4
 23fe966:	f7ff ff9f 	bl	23fe8a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe96a:	e7e0      	b.n	23fe92e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe96c:	2400      	movs	r4, #0
 23fe96e:	e7e2      	b.n	23fe936 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe970:	023ffc8c 	.word	0x023ffc8c
 23fe974:	023ffe60 	.word	0x023ffe60
 23fe978:	023ffd24 	.word	0x023ffd24
 23fe97c:	023ffc90 	.word	0x023ffc90

023fe980 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe980:	4b01      	ldr	r3, [pc, #4]	; (23fe988 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe982:	4a02      	ldr	r2, [pc, #8]	; (23fe98c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe984:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe986:	4770      	bx	lr
 23fe988:	1007ae70 	.word	0x1007ae70
 23fe98c:	023ffca1 	.word	0x023ffca1

023fe990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe994:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe996:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe99a:	4604      	mov	r4, r0
 23fe99c:	460e      	mov	r6, r1
 23fe99e:	4617      	mov	r7, r2
 23fe9a0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe9a2:	f000 fca9 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23fe9a6:	4581      	cmp	r9, r0
 23fe9a8:	d04d      	beq.n	23fea46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe9aa:	792b      	ldrb	r3, [r5, #4]
 23fe9ac:	0719      	lsls	r1, r3, #28
 23fe9ae:	d504      	bpl.n	23fe9ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe9b0:	4620      	mov	r0, r4
 23fe9b2:	696a      	ldr	r2, [r5, #20]
 23fe9b4:	4954      	ldr	r1, [pc, #336]	; (23feb08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe9b6:	f7ff fae2 	bl	23fdf7e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe9ba:	f1b8 0f00 	cmp.w	r8, #0
 23fe9be:	d00d      	beq.n	23fe9dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe9c0:	215b      	movs	r1, #91	; 0x5b
 23fe9c2:	4620      	mov	r0, r4
 23fe9c4:	f7ff fa56 	bl	23fde74 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe9c8:	4641      	mov	r1, r8
 23fe9ca:	4620      	mov	r0, r4
 23fe9cc:	f7ff fa43 	bl	23fde56 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe9d0:	6823      	ldr	r3, [r4, #0]
 23fe9d2:	2202      	movs	r2, #2
 23fe9d4:	4620      	mov	r0, r4
 23fe9d6:	68db      	ldr	r3, [r3, #12]
 23fe9d8:	494c      	ldr	r1, [pc, #304]	; (23feb0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe9da:	4798      	blx	r3
    if (attr.has_file) {
 23fe9dc:	792b      	ldrb	r3, [r5, #4]
 23fe9de:	07da      	lsls	r2, r3, #31
 23fe9e0:	d524      	bpl.n	23fea2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe9e2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe9e6:	212f      	movs	r1, #47	; 0x2f
 23fe9e8:	4640      	mov	r0, r8
 23fe9ea:	f000 ff9a 	bl	23ff922 <strrchr>
    if (s1) {
 23fe9ee:	b108      	cbz	r0, 23fe9f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe9f0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe9f4:	4641      	mov	r1, r8
 23fe9f6:	4620      	mov	r0, r4
 23fe9f8:	f7ff fa2d 	bl	23fde56 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe9fc:	792b      	ldrb	r3, [r5, #4]
 23fe9fe:	079b      	lsls	r3, r3, #30
 23fea00:	d508      	bpl.n	23fea14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fea02:	213a      	movs	r1, #58	; 0x3a
 23fea04:	4620      	mov	r0, r4
 23fea06:	f7ff fa35 	bl	23fde74 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fea0a:	4620      	mov	r0, r4
 23fea0c:	68ea      	ldr	r2, [r5, #12]
 23fea0e:	4940      	ldr	r1, [pc, #256]	; (23feb10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fea10:	f7ff fab5 	bl	23fdf7e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fea14:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fea16:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fea18:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fea1c:	4620      	mov	r0, r4
            write(", ", 2);
 23fea1e:	f04f 0202 	mov.w	r2, #2
 23fea22:	68db      	ldr	r3, [r3, #12]
 23fea24:	bf14      	ite	ne
 23fea26:	493b      	ldrne	r1, [pc, #236]	; (23feb14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fea28:	493b      	ldreq	r1, [pc, #236]	; (23feb18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fea2a:	4798      	blx	r3
    if (attr.has_function) {
 23fea2c:	792b      	ldrb	r3, [r5, #4]
 23fea2e:	0758      	lsls	r0, r3, #29
 23fea30:	d51d      	bpl.n	23fea6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fea32:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fea34:	460b      	mov	r3, r1
 23fea36:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fea38:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fea3c:	b160      	cbz	r0, 23fea58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fea3e:	2820      	cmp	r0, #32
 23fea40:	d108      	bne.n	23fea54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fea42:	4619      	mov	r1, r3
 23fea44:	e7f7      	b.n	23fea36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fea46:	4835      	ldr	r0, [pc, #212]	; (23feb1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fea48:	f000 f983 	bl	23fed52 <_ZN5spark12NetworkClass9listeningEv>
 23fea4c:	2800      	cmp	r0, #0
 23fea4e:	d0ac      	beq.n	23fe9aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fea50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fea54:	2828      	cmp	r0, #40	; 0x28
 23fea56:	d1ee      	bne.n	23fea36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fea58:	6823      	ldr	r3, [r4, #0]
 23fea5a:	1a52      	subs	r2, r2, r1
 23fea5c:	4620      	mov	r0, r4
 23fea5e:	68db      	ldr	r3, [r3, #12]
 23fea60:	4798      	blx	r3
        write("(): ", 4);
 23fea62:	6823      	ldr	r3, [r4, #0]
 23fea64:	2204      	movs	r2, #4
 23fea66:	4620      	mov	r0, r4
 23fea68:	68db      	ldr	r3, [r3, #12]
 23fea6a:	492d      	ldr	r1, [pc, #180]	; (23feb20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fea6c:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fea6e:	2100      	movs	r1, #0
 23fea70:	4638      	mov	r0, r7
 23fea72:	f7fe fc8b 	bl	23fd38c <log_level_name>
 23fea76:	4601      	mov	r1, r0
    write(s);
 23fea78:	4620      	mov	r0, r4
 23fea7a:	f7ff f9ec 	bl	23fde56 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fea7e:	6823      	ldr	r3, [r4, #0]
 23fea80:	2202      	movs	r2, #2
 23fea82:	4620      	mov	r0, r4
 23fea84:	68db      	ldr	r3, [r3, #12]
 23fea86:	4924      	ldr	r1, [pc, #144]	; (23feb18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fea88:	4798      	blx	r3
    if (msg) {
 23fea8a:	b11e      	cbz	r6, 23fea94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fea8c:	4631      	mov	r1, r6
 23fea8e:	4620      	mov	r0, r4
 23fea90:	f7ff f9e1 	bl	23fde56 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fea94:	792b      	ldrb	r3, [r5, #4]
 23fea96:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fea9a:	d02c      	beq.n	23feaf6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fea9c:	6823      	ldr	r3, [r4, #0]
 23fea9e:	4921      	ldr	r1, [pc, #132]	; (23feb24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23feaa0:	68db      	ldr	r3, [r3, #12]
 23feaa2:	2202      	movs	r2, #2
 23feaa4:	4620      	mov	r0, r4
 23feaa6:	4798      	blx	r3
        if (attr.has_code) {
 23feaa8:	792b      	ldrb	r3, [r5, #4]
 23feaaa:	06d9      	lsls	r1, r3, #27
 23feaac:	d50a      	bpl.n	23feac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23feaae:	6823      	ldr	r3, [r4, #0]
 23feab0:	2207      	movs	r2, #7
 23feab2:	4620      	mov	r0, r4
 23feab4:	491c      	ldr	r1, [pc, #112]	; (23feb28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23feab6:	68db      	ldr	r3, [r3, #12]
 23feab8:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23feaba:	4620      	mov	r0, r4
 23feabc:	69aa      	ldr	r2, [r5, #24]
 23feabe:	491b      	ldr	r1, [pc, #108]	; (23feb2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23feac0:	f7ff fa5d 	bl	23fdf7e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23feac4:	792b      	ldrb	r3, [r5, #4]
 23feac6:	069a      	lsls	r2, r3, #26
 23feac8:	d511      	bpl.n	23feaee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23feaca:	06db      	lsls	r3, r3, #27
 23feacc:	d505      	bpl.n	23feada <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23feace:	6823      	ldr	r3, [r4, #0]
 23fead0:	2202      	movs	r2, #2
 23fead2:	4620      	mov	r0, r4
 23fead4:	68db      	ldr	r3, [r3, #12]
 23fead6:	490f      	ldr	r1, [pc, #60]	; (23feb14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fead8:	4798      	blx	r3
            write("details = ", 10);
 23feada:	6823      	ldr	r3, [r4, #0]
 23feadc:	4620      	mov	r0, r4
 23feade:	4914      	ldr	r1, [pc, #80]	; (23feb30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23feae0:	220a      	movs	r2, #10
 23feae2:	68db      	ldr	r3, [r3, #12]
 23feae4:	4798      	blx	r3
            write(attr.details);
 23feae6:	4620      	mov	r0, r4
 23feae8:	69e9      	ldr	r1, [r5, #28]
 23feaea:	f7ff f9b4 	bl	23fde56 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23feaee:	215d      	movs	r1, #93	; 0x5d
 23feaf0:	4620      	mov	r0, r4
 23feaf2:	f7ff f9bf 	bl	23fde74 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23feaf6:	6823      	ldr	r3, [r4, #0]
 23feaf8:	4620      	mov	r0, r4
}
 23feafa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23feafe:	2202      	movs	r2, #2
 23feb00:	68db      	ldr	r3, [r3, #12]
 23feb02:	490c      	ldr	r1, [pc, #48]	; (23feb34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23feb04:	4718      	bx	r3
 23feb06:	bf00      	nop
 23feb08:	023ffca5 	.word	0x023ffca5
 23feb0c:	023ffcac 	.word	0x023ffcac
 23feb10:	023ffc6c 	.word	0x023ffc6c
 23feb14:	023ffcaf 	.word	0x023ffcaf
 23feb18:	023ffcb4 	.word	0x023ffcb4
 23feb1c:	1007ae9c 	.word	0x1007ae9c
 23feb20:	023ffcb2 	.word	0x023ffcb2
 23feb24:	023ffcb7 	.word	0x023ffcb7
 23feb28:	023ffcba 	.word	0x023ffcba
 23feb2c:	023ffcc2 	.word	0x023ffcc2
 23feb30:	023ffcc5 	.word	0x023ffcc5
 23feb34:	023ffcd0 	.word	0x023ffcd0

023feb38 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23feb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feb3c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23feb3e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23feb40:	460d      	mov	r5, r1
 23feb42:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23feb44:	f000 fbd8 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23feb48:	4287      	cmp	r7, r0
 23feb4a:	d007      	beq.n	23feb5c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23feb4c:	6a20      	ldr	r0, [r4, #32]
 23feb4e:	4632      	mov	r2, r6
 23feb50:	6803      	ldr	r3, [r0, #0]
 23feb52:	4629      	mov	r1, r5
}
 23feb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23feb58:	68db      	ldr	r3, [r3, #12]
 23feb5a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23feb5c:	4803      	ldr	r0, [pc, #12]	; (23feb6c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23feb5e:	f000 f8f8 	bl	23fed52 <_ZN5spark12NetworkClass9listeningEv>
 23feb62:	2800      	cmp	r0, #0
 23feb64:	d0f2      	beq.n	23feb4c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23feb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23feb6a:	bf00      	nop
 23feb6c:	1007ae9c 	.word	0x1007ae9c

023feb70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23feb70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feb74:	b085      	sub	sp, #20
    return stream_;
 23feb76:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23feb7a:	4605      	mov	r5, r0
 23feb7c:	460f      	mov	r7, r1
 23feb7e:	4690      	mov	r8, r2
 23feb80:	461e      	mov	r6, r3
 23feb82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23feb84:	f000 fbb8 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23feb88:	4581      	cmp	r9, r0
 23feb8a:	d105      	bne.n	23feb98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23feb8c:	4849      	ldr	r0, [pc, #292]	; (23fecb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23feb8e:	f000 f8e0 	bl	23fed52 <_ZN5spark12NetworkClass9listeningEv>
 23feb92:	2800      	cmp	r0, #0
 23feb94:	f040 808a 	bne.w	23fecac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23feb98:	f04f 0900 	mov.w	r9, #0
 23feb9c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23feb9e:	4a46      	ldr	r2, [pc, #280]	; (23fecb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23feba0:	a801      	add	r0, sp, #4
 23feba2:	9201      	str	r2, [sp, #4]
 23feba4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23feba6:	f88d 9008 	strb.w	r9, [sp, #8]
 23febaa:	f7ff f830 	bl	23fdc0e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23febae:	4649      	mov	r1, r9
 23febb0:	4640      	mov	r0, r8
 23febb2:	f7fe fbeb 	bl	23fd38c <log_level_name>
 23febb6:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23febb8:	4940      	ldr	r1, [pc, #256]	; (23fecbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23febba:	2201      	movs	r2, #1
 23febbc:	a801      	add	r0, sp, #4
 23febbe:	f7ff f8b5 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23febc2:	4641      	mov	r1, r8
 23febc4:	f7ff f939 	bl	23fde3a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23febc8:	b13f      	cbz	r7, 23febda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23febca:	493d      	ldr	r1, [pc, #244]	; (23fecc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23febcc:	2201      	movs	r2, #1
 23febce:	a801      	add	r0, sp, #4
 23febd0:	f7ff f8ac 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23febd4:	4639      	mov	r1, r7
 23febd6:	f7ff f930 	bl	23fde3a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23febda:	b13e      	cbz	r6, 23febec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23febdc:	4939      	ldr	r1, [pc, #228]	; (23fecc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23febde:	2201      	movs	r2, #1
 23febe0:	a801      	add	r0, sp, #4
 23febe2:	f7ff f8a3 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23febe6:	4631      	mov	r1, r6
 23febe8:	f7ff f927 	bl	23fde3a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23febec:	7923      	ldrb	r3, [r4, #4]
 23febee:	07df      	lsls	r7, r3, #31
 23febf0:	d50e      	bpl.n	23fec10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23febf2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23febf4:	212f      	movs	r1, #47	; 0x2f
 23febf6:	4630      	mov	r0, r6
 23febf8:	f000 fe93 	bl	23ff922 <strrchr>
    if (s1) {
 23febfc:	b100      	cbz	r0, 23fec00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23febfe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fec00:	4931      	ldr	r1, [pc, #196]	; (23fecc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fec02:	2201      	movs	r2, #1
 23fec04:	a801      	add	r0, sp, #4
 23fec06:	f7ff f891 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23fec0a:	4631      	mov	r1, r6
 23fec0c:	f7ff f915 	bl	23fde3a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fec10:	7923      	ldrb	r3, [r4, #4]
 23fec12:	079e      	lsls	r6, r3, #30
 23fec14:	d507      	bpl.n	23fec26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fec16:	492d      	ldr	r1, [pc, #180]	; (23feccc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fec18:	2202      	movs	r2, #2
 23fec1a:	a801      	add	r0, sp, #4
 23fec1c:	f7ff f886 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23fec20:	68e1      	ldr	r1, [r4, #12]
 23fec22:	f7ff f801 	bl	23fdc28 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fec26:	7923      	ldrb	r3, [r4, #4]
 23fec28:	0758      	lsls	r0, r3, #29
 23fec2a:	d514      	bpl.n	23fec56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fec2c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fec2e:	4633      	mov	r3, r6
 23fec30:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fec32:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fec36:	b12a      	cbz	r2, 23fec44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fec38:	2a20      	cmp	r2, #32
 23fec3a:	d101      	bne.n	23fec40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fec3c:	461e      	mov	r6, r3
 23fec3e:	e7f7      	b.n	23fec30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fec40:	2a28      	cmp	r2, #40	; 0x28
 23fec42:	d1f5      	bne.n	23fec30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fec44:	2202      	movs	r2, #2
 23fec46:	4922      	ldr	r1, [pc, #136]	; (23fecd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fec48:	a801      	add	r0, sp, #4
 23fec4a:	f7ff f86f 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23fec4e:	4631      	mov	r1, r6
 23fec50:	1bba      	subs	r2, r7, r6
 23fec52:	f7ff f87b 	bl	23fdd4c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fec56:	7923      	ldrb	r3, [r4, #4]
 23fec58:	0719      	lsls	r1, r3, #28
 23fec5a:	d507      	bpl.n	23fec6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fec5c:	491d      	ldr	r1, [pc, #116]	; (23fecd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fec5e:	2201      	movs	r2, #1
 23fec60:	a801      	add	r0, sp, #4
 23fec62:	f7ff f863 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23fec66:	6961      	ldr	r1, [r4, #20]
 23fec68:	f7fe fff0 	bl	23fdc4c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fec6c:	7923      	ldrb	r3, [r4, #4]
 23fec6e:	06da      	lsls	r2, r3, #27
 23fec70:	d508      	bpl.n	23fec84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fec72:	2204      	movs	r2, #4
 23fec74:	4918      	ldr	r1, [pc, #96]	; (23fecd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fec76:	eb0d 0002 	add.w	r0, sp, r2
 23fec7a:	f7ff f857 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23fec7e:	69a1      	ldr	r1, [r4, #24]
 23fec80:	f7fe ffd2 	bl	23fdc28 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fec84:	7923      	ldrb	r3, [r4, #4]
 23fec86:	069b      	lsls	r3, r3, #26
 23fec88:	d507      	bpl.n	23fec9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fec8a:	4914      	ldr	r1, [pc, #80]	; (23fecdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fec8c:	2206      	movs	r2, #6
 23fec8e:	a801      	add	r0, sp, #4
 23fec90:	f7ff f84c 	bl	23fdd2c <_ZN5spark10JSONWriter4nameEPKcj>
 23fec94:	69e1      	ldr	r1, [r4, #28]
 23fec96:	f7ff f8d0 	bl	23fde3a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fec9a:	a801      	add	r0, sp, #4
 23fec9c:	f7fe ffa1 	bl	23fdbe2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23feca0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23feca2:	2202      	movs	r2, #2
 23feca4:	6803      	ldr	r3, [r0, #0]
 23feca6:	490e      	ldr	r1, [pc, #56]	; (23fece0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23feca8:	68db      	ldr	r3, [r3, #12]
 23fecaa:	4798      	blx	r3
}
 23fecac:	b005      	add	sp, #20
 23fecae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fecb2:	bf00      	nop
 23fecb4:	1007ae9c 	.word	0x1007ae9c
 23fecb8:	023ffcf4 	.word	0x023ffcf4
 23fecbc:	023ffc82 	.word	0x023ffc82
 23fecc0:	023ffcd3 	.word	0x023ffcd3
 23fecc4:	023ffecf 	.word	0x023ffecf
 23fecc8:	023ffcd5 	.word	0x023ffcd5
 23feccc:	023ffcd7 	.word	0x023ffcd7
 23fecd0:	023ffcda 	.word	0x023ffcda
 23fecd4:	023ffcdd 	.word	0x023ffcdd
 23fecd8:	023ffcdf 	.word	0x023ffcdf
 23fecdc:	023ffce4 	.word	0x023ffce4
 23fece0:	023ffcd0 	.word	0x023ffcd0

023fece4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fece4:	2300      	movs	r3, #0
 23fece6:	6840      	ldr	r0, [r0, #4]
 23fece8:	461a      	mov	r2, r3
 23fecea:	f7fe bbcd 	b.w	23fd488 <network_connect>

023fecee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fecee:	2200      	movs	r2, #0
 23fecf0:	2102      	movs	r1, #2
 23fecf2:	6840      	ldr	r0, [r0, #4]
 23fecf4:	f7fe bbe4 	b.w	23fd4c0 <network_disconnect>

023fecf8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fecf8:	2200      	movs	r2, #0
 23fecfa:	6840      	ldr	r0, [r0, #4]
 23fecfc:	4611      	mov	r1, r2
 23fecfe:	f7fe bbd1 	b.w	23fd4a4 <network_connecting>

023fed02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fed02:	2200      	movs	r2, #0
 23fed04:	6840      	ldr	r0, [r0, #4]
 23fed06:	4611      	mov	r1, r2
 23fed08:	f7fe bbe8 	b.w	23fd4dc <network_ready>

023fed0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fed0c:	2300      	movs	r3, #0
 23fed0e:	6840      	ldr	r0, [r0, #4]
 23fed10:	461a      	mov	r2, r3
 23fed12:	4619      	mov	r1, r3
 23fed14:	f7fe bbf0 	b.w	23fd4f8 <network_on>

023fed18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fed18:	2300      	movs	r3, #0
 23fed1a:	6840      	ldr	r0, [r0, #4]
 23fed1c:	461a      	mov	r2, r3
 23fed1e:	4619      	mov	r1, r3
 23fed20:	f7fe bbf8 	b.w	23fd514 <network_off>

023fed24 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fed24:	2100      	movs	r1, #0
 23fed26:	6840      	ldr	r0, [r0, #4]
 23fed28:	f7fe bc3a 	b.w	23fd5a0 <network_is_on>

023fed2c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fed2c:	2100      	movs	r1, #0
 23fed2e:	6840      	ldr	r0, [r0, #4]
 23fed30:	f7fe bc44 	b.w	23fd5bc <network_is_off>

023fed34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fed34:	2200      	movs	r2, #0
 23fed36:	6840      	ldr	r0, [r0, #4]
 23fed38:	f081 0101 	eor.w	r1, r1, #1
 23fed3c:	f7fe bbf8 	b.w	23fd530 <network_listen>

023fed40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fed40:	2200      	movs	r2, #0
 23fed42:	6840      	ldr	r0, [r0, #4]
 23fed44:	f7fe bc10 	b.w	23fd568 <network_set_listen_timeout>

023fed48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fed48:	2200      	movs	r2, #0
 23fed4a:	6840      	ldr	r0, [r0, #4]
 23fed4c:	4611      	mov	r1, r2
 23fed4e:	f7fe bc19 	b.w	23fd584 <network_get_listen_timeout>

023fed52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fed52:	2200      	movs	r2, #0
 23fed54:	6840      	ldr	r0, [r0, #4]
 23fed56:	4611      	mov	r1, r2
 23fed58:	f7fe bbf8 	b.w	23fd54c <network_listening>

023fed5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fed5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fed60:	b095      	sub	sp, #84	; 0x54
 23fed62:	4614      	mov	r4, r2
 23fed64:	460d      	mov	r5, r1
 23fed66:	4607      	mov	r7, r0
    IPAddress addr;
 23fed68:	f7fe fdea 	bl	23fd940 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fed6c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fed6e:	221c      	movs	r2, #28
 23fed70:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fed72:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fed74:	f000 fd6b 	bl	23ff84e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fed78:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fed7a:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fed7c:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fed7e:	2100      	movs	r1, #0
 23fed80:	466b      	mov	r3, sp
 23fed82:	aa0c      	add	r2, sp, #48	; 0x30
 23fed84:	f7fe f950 	bl	23fd028 <netdb_getaddrinfo>
    if (!r) {
 23fed88:	4604      	mov	r4, r0
 23fed8a:	2800      	cmp	r0, #0
 23fed8c:	d14b      	bne.n	23fee26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fed8e:	4602      	mov	r2, r0
 23fed90:	2101      	movs	r1, #1
 23fed92:	6868      	ldr	r0, [r5, #4]
 23fed94:	f7fe fba2 	bl	23fd4dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fed98:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fed9a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fed9c:	4622      	mov	r2, r4
 23fed9e:	6868      	ldr	r0, [r5, #4]
 23feda0:	f7fe fb9c 	bl	23fd4dc <network_ready>
        bool ok = false;
 23feda4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23feda6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23feda8:	9e00      	ldr	r6, [sp, #0]
 23fedaa:	2e00      	cmp	r6, #0
 23fedac:	d03b      	beq.n	23fee26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fedae:	2900      	cmp	r1, #0
 23fedb0:	d139      	bne.n	23fee26 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fedb2:	6873      	ldr	r3, [r6, #4]
 23fedb4:	2b02      	cmp	r3, #2
 23fedb6:	d003      	beq.n	23fedc0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fedb8:	2b0a      	cmp	r3, #10
 23fedba:	d011      	beq.n	23fede0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fedbc:	69f6      	ldr	r6, [r6, #28]
 23fedbe:	e7f4      	b.n	23fedaa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fedc0:	f1b8 0f00 	cmp.w	r8, #0
 23fedc4:	d0fa      	beq.n	23fedbc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fedc6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fedc8:	a806      	add	r0, sp, #24
 23fedca:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fedcc:	1d3c      	adds	r4, r7, #4
 23fedce:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fedd0:	f7fe fde4 	bl	23fd99c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fedd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fedd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fedd8:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fedda:	4641      	mov	r1, r8
 23feddc:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fedde:	e7ed      	b.n	23fedbc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fede0:	f1b9 0f00 	cmp.w	r9, #0
 23fede4:	d0ea      	beq.n	23fedbc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fede6:	2210      	movs	r2, #16
 23fede8:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fedea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fedec:	f000 fd2f 	bl	23ff84e <memset>
                    a.v = 6;
 23fedf0:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fedf2:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fedf4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fedf8:	f104 0308 	add.w	r3, r4, #8
 23fedfc:	3418      	adds	r4, #24
 23fedfe:	462a      	mov	r2, r5
 23fee00:	6818      	ldr	r0, [r3, #0]
 23fee02:	6859      	ldr	r1, [r3, #4]
 23fee04:	3308      	adds	r3, #8
 23fee06:	c203      	stmia	r2!, {r0, r1}
 23fee08:	42a3      	cmp	r3, r4
 23fee0a:	4615      	mov	r5, r2
 23fee0c:	d1f7      	bne.n	23fedfe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fee0e:	a901      	add	r1, sp, #4
 23fee10:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fee12:	1d3c      	adds	r4, r7, #4
 23fee14:	ad07      	add	r5, sp, #28
 23fee16:	f7fe fda1 	bl	23fd95c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fee1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fee1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fee1e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fee20:	4649      	mov	r1, r9
 23fee22:	7023      	strb	r3, [r4, #0]
                    break;
 23fee24:	e7ca      	b.n	23fedbc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fee26:	9800      	ldr	r0, [sp, #0]
 23fee28:	f7fe f8f0 	bl	23fd00c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fee2c:	4638      	mov	r0, r7
 23fee2e:	b015      	add	sp, #84	; 0x54
 23fee30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fee34 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fee34:	4b02      	ldr	r3, [pc, #8]	; (23fee40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fee36:	4a03      	ldr	r2, [pc, #12]	; (23fee44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fee38:	601a      	str	r2, [r3, #0]
 23fee3a:	2200      	movs	r2, #0
 23fee3c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fee3e:	4770      	bx	lr
 23fee40:	1007ae9c 	.word	0x1007ae9c
 23fee44:	023ffd6c 	.word	0x023ffd6c

023fee48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fee4a:	4606      	mov	r6, r0
 23fee4c:	460d      	mov	r5, r1
  size_t n = 0;
 23fee4e:	2400      	movs	r4, #0
 23fee50:	188f      	adds	r7, r1, r2
  while (size--) {
 23fee52:	42bd      	cmp	r5, r7
 23fee54:	d00c      	beq.n	23fee70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fee56:	6833      	ldr	r3, [r6, #0]
 23fee58:	4630      	mov	r0, r6
 23fee5a:	689b      	ldr	r3, [r3, #8]
 23fee5c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fee60:	4798      	blx	r3
     if (chunk>=0)
 23fee62:	1e03      	subs	r3, r0, #0
 23fee64:	db01      	blt.n	23fee6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fee66:	441c      	add	r4, r3
  while (size--) {
 23fee68:	e7f3      	b.n	23fee52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fee6a:	2c00      	cmp	r4, #0
 23fee6c:	bf08      	it	eq
 23fee6e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fee70:	4620      	mov	r0, r4
 23fee72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fee74 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fee74:	b513      	push	{r0, r1, r4, lr}
 23fee76:	4604      	mov	r4, r0
    }
 23fee78:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fee7a:	b159      	cbz	r1, 23fee94 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fee7c:	9101      	str	r1, [sp, #4]
 23fee7e:	f7fd fa5b 	bl	23fc338 <strlen>
 23fee82:	4602      	mov	r2, r0
 23fee84:	4620      	mov	r0, r4
 23fee86:	6823      	ldr	r3, [r4, #0]
 23fee88:	9901      	ldr	r1, [sp, #4]
 23fee8a:	68db      	ldr	r3, [r3, #12]
    }
 23fee8c:	b002      	add	sp, #8
 23fee8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fee92:	4718      	bx	r3
    }
 23fee94:	b002      	add	sp, #8
 23fee96:	bd10      	pop	{r4, pc}

023fee98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fee98:	6803      	ldr	r3, [r0, #0]
 23fee9a:	689b      	ldr	r3, [r3, #8]
 23fee9c:	4718      	bx	r3

023fee9e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fee9e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23feea0:	2a01      	cmp	r2, #1
 23feea2:	bf98      	it	ls
 23feea4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23feea6:	b530      	push	{r4, r5, lr}
 23feea8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23feeaa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23feeae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23feeb0:	460d      	mov	r5, r1
 23feeb2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23feeb6:	fb01 5312 	mls	r3, r1, r2, r5
 23feeba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23feebe:	2b09      	cmp	r3, #9
 23feec0:	bf94      	ite	ls
 23feec2:	3330      	addls	r3, #48	; 0x30
 23feec4:	3337      	addhi	r3, #55	; 0x37
 23feec6:	b2db      	uxtb	r3, r3
  } while(n);
 23feec8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23feeca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23feece:	d9ef      	bls.n	23feeb0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23feed0:	4621      	mov	r1, r4
 23feed2:	f7ff ffcf 	bl	23fee74 <_ZN5Print5writeEPKc>
}
 23feed6:	b00b      	add	sp, #44	; 0x2c
 23feed8:	bd30      	pop	{r4, r5, pc}
	...

023feedc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23feedc:	2200      	movs	r2, #0
 23feede:	4b01      	ldr	r3, [pc, #4]	; (23feee4 <_GLOBAL__sub_I_RGB+0x8>)
 23feee0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23feee2:	4770      	bx	lr
 23feee4:	1007aea4 	.word	0x1007aea4

023feee8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23feee8:	2100      	movs	r1, #0
 23feeea:	f7fe b929 	b.w	23fd140 <hal_spi_release>

023feeee <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23feeee:	2100      	movs	r1, #0
 23feef0:	f7fe b918 	b.w	23fd124 <hal_spi_acquire>

023feef4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23feef4:	b510      	push	{r4, lr}
 23feef6:	4604      	mov	r4, r0
 23feef8:	4608      	mov	r0, r1
{
    _spi = spi;
 23feefa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23feefc:	f7fe f8be 	bl	23fd07c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fef00:	2300      	movs	r3, #0
}
 23fef02:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fef04:	6063      	str	r3, [r4, #4]
}
 23fef06:	bd10      	pop	{r4, pc}

023fef08 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
 23fef08:	b513      	push	{r0, r1, r4, lr}
 23fef0a:	4604      	mov	r4, r0
    if (!lock())
 23fef0c:	7800      	ldrb	r0, [r0, #0]
{
 23fef0e:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
 23fef12:	f7ff ffec 	bl	23feeee <_ZN8SPIClass4lockEv.isra.0>
 23fef16:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fef1a:	4603      	mov	r3, r0
 23fef1c:	b948      	cbnz	r0, 23fef32 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
 23fef1e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
 23fef20:	9000      	str	r0, [sp, #0]
 23fef22:	f7fe f8e3 	bl	23fd0ec <hal_spi_begin_ext>
        unlock();
 23fef26:	9800      	ldr	r0, [sp, #0]
    }
}
 23fef28:	b002      	add	sp, #8
 23fef2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fef2e:	f7ff bfdb 	b.w	23feee8 <_ZN8SPIClass6unlockEv.isra.0>
 23fef32:	b002      	add	sp, #8
 23fef34:	bd10      	pop	{r4, pc}

023fef36 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fef36:	b513      	push	{r0, r1, r4, lr}
 23fef38:	4604      	mov	r4, r0
    if (!lock())
 23fef3a:	7800      	ldrb	r0, [r0, #0]
{
 23fef3c:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fef3e:	f7ff ffd6 	bl	23feeee <_ZN8SPIClass4lockEv.isra.0>
 23fef42:	9901      	ldr	r1, [sp, #4]
 23fef44:	b948      	cbnz	r0, 23fef5a <_ZN8SPIClass11setDataModeEh+0x24>
 23fef46:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fef48:	9001      	str	r0, [sp, #4]
 23fef4a:	f7fe f87b 	bl	23fd044 <hal_spi_set_data_mode>
        unlock();
 23fef4e:	9801      	ldr	r0, [sp, #4]
    }
}
 23fef50:	b002      	add	sp, #8
 23fef52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fef56:	f7ff bfc7 	b.w	23feee8 <_ZN8SPIClass6unlockEv.isra.0>
 23fef5a:	b002      	add	sp, #8
 23fef5c:	bd10      	pop	{r4, pc}

023fef5e <_ZN8SPIClass16beginTransactionEv>:

int32_t SPIClass::beginTransaction()
{
    return lock();
 23fef5e:	7800      	ldrb	r0, [r0, #0]
 23fef60:	f7ff bfc5 	b.w	23feeee <_ZN8SPIClass4lockEv.isra.0>

023fef64 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fef64:	7800      	ldrb	r0, [r0, #0]
 23fef66:	f7ff bfbf 	b.w	23feee8 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fef6c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fef6c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fef6e:	2400      	movs	r4, #0
 23fef70:	0840      	lsrs	r0, r0, #1
 23fef72:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fef74:	6818      	ldr	r0, [r3, #0]
 23fef76:	b2e5      	uxtb	r5, r4
 23fef78:	4288      	cmp	r0, r1
 23fef7a:	d906      	bls.n	23fef8a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fef7c:	3401      	adds	r4, #1
 23fef7e:	2c08      	cmp	r4, #8
 23fef80:	d002      	beq.n	23fef88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fef82:	0840      	lsrs	r0, r0, #1
 23fef84:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fef86:	e7f5      	b.n	23fef74 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fef88:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fef8a:	4b02      	ldr	r3, [pc, #8]	; (23fef94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fef8c:	5d5b      	ldrb	r3, [r3, r5]
 23fef8e:	7013      	strb	r3, [r2, #0]
}
 23fef90:	bd30      	pop	{r4, r5, pc}
 23fef92:	bf00      	nop
 23fef94:	023ffda0 	.word	0x023ffda0

023fef98 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fef98:	2300      	movs	r3, #0
{
 23fef9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fef9e:	4604      	mov	r4, r0
 23fefa0:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fefa2:	7800      	ldrb	r0, [r0, #0]
{
 23fefa4:	460e      	mov	r6, r1
 23fefa6:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fefa8:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fefaa:	f7ff ffa0 	bl	23feeee <_ZN8SPIClass4lockEv.isra.0>
 23fefae:	4605      	mov	r5, r0
 23fefb0:	bb00      	cbnz	r0, 23feff4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fefb2:	4601      	mov	r1, r0
 23fefb4:	2214      	movs	r2, #20
 23fefb6:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fefb8:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fefbc:	f000 fc47 	bl	23ff84e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fefc0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fefc2:	462a      	mov	r2, r5
 23fefc4:	4640      	mov	r0, r8
 23fefc6:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fefc8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fefcc:	f7fe f872 	bl	23fd0b4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fefd0:	fb07 f106 	mul.w	r1, r7, r6
 23fefd4:	9804      	ldr	r0, [sp, #16]
 23fefd6:	ab02      	add	r3, sp, #8
 23fefd8:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fefdc:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fefe0:	f7ff ffc4 	bl	23fef6c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fefe4:	7820      	ldrb	r0, [r4, #0]
 23fefe6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fefea:	f7fe f839 	bl	23fd060 <hal_spi_set_clock_divider>
        unlock();
 23fefee:	7820      	ldrb	r0, [r4, #0]
 23feff0:	f7ff ff7a 	bl	23feee8 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23feff4:	9802      	ldr	r0, [sp, #8]
 23feff6:	b008      	add	sp, #32
 23feff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023feffc <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23feffc:	b530      	push	{r4, r5, lr}
 23feffe:	b087      	sub	sp, #28
 23ff000:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23ff002:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23ff004:	9500      	str	r5, [sp, #0]
 23ff006:	7800      	ldrb	r0, [r0, #0]
 23ff008:	f7fe f862 	bl	23fd0d0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23ff00c:	b93d      	cbnz	r5, 23ff01e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23ff00e:	7820      	ldrb	r0, [r4, #0]
 23ff010:	a902      	add	r1, sp, #8
 23ff012:	f7fe f879 	bl	23fd108 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23ff016:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ff01a:	07db      	lsls	r3, r3, #31
 23ff01c:	d4f7      	bmi.n	23ff00e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23ff01e:	b007      	add	sp, #28
 23ff020:	bd30      	pop	{r4, r5, pc}

023ff022 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff022:	b510      	push	{r4, lr}
 23ff024:	4604      	mov	r4, r0
{
	free(buffer);
 23ff026:	6800      	ldr	r0, [r0, #0]
 23ff028:	f7fe fae4 	bl	23fd5f4 <free>
}
 23ff02c:	4620      	mov	r0, r4
 23ff02e:	bd10      	pop	{r4, pc}

023ff030 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff030:	b510      	push	{r4, lr}
 23ff032:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff034:	6800      	ldr	r0, [r0, #0]
 23ff036:	b108      	cbz	r0, 23ff03c <_ZN6String10invalidateEv+0xc>
 23ff038:	f7fe fadc 	bl	23fd5f4 <free>
	buffer = NULL;
 23ff03c:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff03e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff042:	6023      	str	r3, [r4, #0]
}
 23ff044:	bd10      	pop	{r4, pc}

023ff046 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff046:	b538      	push	{r3, r4, r5, lr}
 23ff048:	4604      	mov	r4, r0
 23ff04a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff04c:	6800      	ldr	r0, [r0, #0]
 23ff04e:	3101      	adds	r1, #1
 23ff050:	f7fe fade 	bl	23fd610 <realloc>
	if (newbuffer) {
 23ff054:	b110      	cbz	r0, 23ff05c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff056:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff05a:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff05c:	bd38      	pop	{r3, r4, r5, pc}

023ff05e <_ZN6String7reserveEj>:
{
 23ff05e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff060:	6803      	ldr	r3, [r0, #0]
{
 23ff062:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff064:	b123      	cbz	r3, 23ff070 <_ZN6String7reserveEj+0x12>
 23ff066:	6843      	ldr	r3, [r0, #4]
 23ff068:	428b      	cmp	r3, r1
 23ff06a:	d301      	bcc.n	23ff070 <_ZN6String7reserveEj+0x12>
 23ff06c:	2001      	movs	r0, #1
}
 23ff06e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff070:	4620      	mov	r0, r4
 23ff072:	f7ff ffe8 	bl	23ff046 <_ZN6String12changeBufferEj>
 23ff076:	2800      	cmp	r0, #0
 23ff078:	d0f9      	beq.n	23ff06e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff07a:	68a3      	ldr	r3, [r4, #8]
 23ff07c:	2b00      	cmp	r3, #0
 23ff07e:	d1f5      	bne.n	23ff06c <_ZN6String7reserveEj+0xe>
 23ff080:	6822      	ldr	r2, [r4, #0]
 23ff082:	7013      	strb	r3, [r2, #0]
 23ff084:	e7f2      	b.n	23ff06c <_ZN6String7reserveEj+0xe>

023ff086 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff086:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff088:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff08a:	4611      	mov	r1, r2
 23ff08c:	9201      	str	r2, [sp, #4]
{
 23ff08e:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff090:	f7ff ffe5 	bl	23ff05e <_ZN6String7reserveEj>
 23ff094:	9a01      	ldr	r2, [sp, #4]
 23ff096:	b928      	cbnz	r0, 23ff0a4 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff098:	4620      	mov	r0, r4
 23ff09a:	f7ff ffc9 	bl	23ff030 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff09e:	4620      	mov	r0, r4
 23ff0a0:	b003      	add	sp, #12
 23ff0a2:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff0a4:	4629      	mov	r1, r5
	len = length;
 23ff0a6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff0a8:	6820      	ldr	r0, [r4, #0]
 23ff0aa:	f000 fba9 	bl	23ff800 <memcpy>
	buffer[len] = 0;
 23ff0ae:	2100      	movs	r1, #0
 23ff0b0:	6822      	ldr	r2, [r4, #0]
 23ff0b2:	68a3      	ldr	r3, [r4, #8]
 23ff0b4:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff0b6:	e7f2      	b.n	23ff09e <_ZN6String4copyEPKcj+0x18>

023ff0b8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23ff0b8:	b538      	push	{r3, r4, r5, lr}
 23ff0ba:	4605      	mov	r5, r0
	if (buffer) {
 23ff0bc:	6800      	ldr	r0, [r0, #0]
{
 23ff0be:	460c      	mov	r4, r1
	if (buffer) {
 23ff0c0:	b168      	cbz	r0, 23ff0de <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23ff0c2:	686a      	ldr	r2, [r5, #4]
 23ff0c4:	688b      	ldr	r3, [r1, #8]
 23ff0c6:	429a      	cmp	r2, r3
 23ff0c8:	d307      	bcc.n	23ff0da <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23ff0ca:	6809      	ldr	r1, [r1, #0]
 23ff0cc:	f000 fc0d 	bl	23ff8ea <strcpy>
			len = rhs.len;
 23ff0d0:	68a3      	ldr	r3, [r4, #8]
 23ff0d2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23ff0d4:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23ff0d6:	60a3      	str	r3, [r4, #8]
}
 23ff0d8:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23ff0da:	f7fe fa8b 	bl	23fd5f4 <free>
	buffer = rhs.buffer;
 23ff0de:	6823      	ldr	r3, [r4, #0]
 23ff0e0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23ff0e2:	6863      	ldr	r3, [r4, #4]
 23ff0e4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23ff0e6:	68a3      	ldr	r3, [r4, #8]
 23ff0e8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23ff0ea:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23ff0ec:	e9c4 3300 	strd	r3, r3, [r4]
 23ff0f0:	e7f1      	b.n	23ff0d6 <_ZN6String4moveERS_+0x1e>

023ff0f2 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23ff0f2:	2300      	movs	r3, #0
String::String(String &&rval)
 23ff0f4:	b510      	push	{r4, lr}
 23ff0f6:	4604      	mov	r4, r0
	capacity = 0;
 23ff0f8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff0fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff0fe:	7303      	strb	r3, [r0, #12]
	move(rval);
 23ff100:	f7ff ffda 	bl	23ff0b8 <_ZN6String4moveERS_>
}
 23ff104:	4620      	mov	r0, r4
 23ff106:	bd10      	pop	{r4, pc}

023ff108 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff108:	4288      	cmp	r0, r1
{
 23ff10a:	b510      	push	{r4, lr}
 23ff10c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff10e:	d005      	beq.n	23ff11c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff110:	680b      	ldr	r3, [r1, #0]
 23ff112:	b12b      	cbz	r3, 23ff120 <_ZN6StringaSERKS_+0x18>
 23ff114:	688a      	ldr	r2, [r1, #8]
 23ff116:	4619      	mov	r1, r3
 23ff118:	f7ff ffb5 	bl	23ff086 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff11c:	4620      	mov	r0, r4
 23ff11e:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff120:	f7ff ff86 	bl	23ff030 <_ZN6String10invalidateEv>
 23ff124:	e7fa      	b.n	23ff11c <_ZN6StringaSERKS_+0x14>

023ff126 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff126:	2300      	movs	r3, #0
String::String(const String &value)
 23ff128:	b510      	push	{r4, lr}
 23ff12a:	4604      	mov	r4, r0
	capacity = 0;
 23ff12c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff130:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff132:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff134:	f7ff ffe8 	bl	23ff108 <_ZN6StringaSERKS_>
}
 23ff138:	4620      	mov	r0, r4
 23ff13a:	bd10      	pop	{r4, pc}

023ff13c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff13c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff13e:	2000      	movs	r0, #0
 23ff140:	4b04      	ldr	r3, [pc, #16]	; (23ff154 <_GLOBAL__sub_I_System+0x18>)
 23ff142:	601a      	str	r2, [r3, #0]
 23ff144:	4b04      	ldr	r3, [pc, #16]	; (23ff158 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff146:	4a05      	ldr	r2, [pc, #20]	; (23ff15c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff148:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff14c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff14e:	f7fe b939 	b.w	23fd3c4 <set_system_mode>
 23ff152:	bf00      	nop
 23ff154:	1007aec0 	.word	0x1007aec0
 23ff158:	1007aeb4 	.word	0x1007aeb4
 23ff15c:	ffff0000 	.word	0xffff0000

023ff160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff160:	4b02      	ldr	r3, [pc, #8]	; (23ff16c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff162:	681a      	ldr	r2, [r3, #0]
 23ff164:	4b02      	ldr	r3, [pc, #8]	; (23ff170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff166:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff168:	4770      	bx	lr
 23ff16a:	bf00      	nop
 23ff16c:	1007ad70 	.word	0x1007ad70
 23ff170:	1007aec4 	.word	0x1007aec4

023ff174 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff174:	4770      	bx	lr

023ff176 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff176:	7441      	strb	r1, [r0, #17]
}
 23ff178:	4770      	bx	lr

023ff17a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff17a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff17c:	7c00      	ldrb	r0, [r0, #16]
 23ff17e:	f7fe f84f 	bl	23fd220 <hal_usart_available_data_for_write>
}
 23ff182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff186:	bd08      	pop	{r3, pc}

023ff188 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff188:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff18a:	7c00      	ldrb	r0, [r0, #16]
 23ff18c:	f7fe f802 	bl	23fd194 <hal_usart_available>
}
 23ff190:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff194:	bd08      	pop	{r3, pc}

023ff196 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff196:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff198:	7c00      	ldrb	r0, [r0, #16]
 23ff19a:	f7fe f817 	bl	23fd1cc <hal_usart_peek>
}
 23ff19e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff1a2:	bd08      	pop	{r3, pc}

023ff1a4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff1a4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff1a6:	7c00      	ldrb	r0, [r0, #16]
 23ff1a8:	f7fe f802 	bl	23fd1b0 <hal_usart_read>
}
 23ff1ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff1b0:	bd08      	pop	{r3, pc}

023ff1b2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff1b2:	7c00      	ldrb	r0, [r0, #16]
 23ff1b4:	f7fe b818 	b.w	23fd1e8 <hal_usart_flush>

023ff1b8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff1ba:	7c45      	ldrb	r5, [r0, #17]
{
 23ff1bc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff1be:	b12d      	cbz	r5, 23ff1cc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff1c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff1c2:	b003      	add	sp, #12
 23ff1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff1c8:	f7fd bfd6 	b.w	23fd178 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff1cc:	7c00      	ldrb	r0, [r0, #16]
 23ff1ce:	9101      	str	r1, [sp, #4]
 23ff1d0:	f7fe f826 	bl	23fd220 <hal_usart_available_data_for_write>
 23ff1d4:	2800      	cmp	r0, #0
 23ff1d6:	9901      	ldr	r1, [sp, #4]
 23ff1d8:	dcf2      	bgt.n	23ff1c0 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff1da:	4628      	mov	r0, r5
 23ff1dc:	b003      	add	sp, #12
 23ff1de:	bd30      	pop	{r4, r5, pc}

023ff1e0 <_ZN11USARTSerialD0Ev>:
 23ff1e0:	b510      	push	{r4, lr}
 23ff1e2:	4604      	mov	r4, r0
 23ff1e4:	2114      	movs	r1, #20
 23ff1e6:	f7fd f8d0 	bl	23fc38a <_ZdlPvj>
 23ff1ea:	4620      	mov	r0, r4
 23ff1ec:	bd10      	pop	{r4, pc}
	...

023ff1f0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff1f0:	b510      	push	{r4, lr}
 23ff1f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff1f6:	4604      	mov	r4, r0
 23ff1f8:	4608      	mov	r0, r1
 23ff1fa:	4611      	mov	r1, r2
 23ff1fc:	2200      	movs	r2, #0
 23ff1fe:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff202:	4b04      	ldr	r3, [pc, #16]	; (23ff214 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff204:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff206:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff208:	2301      	movs	r3, #1
 23ff20a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff20c:	f7fe f824 	bl	23fd258 <hal_usart_init_ex>
}
 23ff210:	4620      	mov	r0, r4
 23ff212:	bd10      	pop	{r4, pc}
 23ff214:	023ffdcc 	.word	0x023ffdcc

023ff218 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23ff218:	2300      	movs	r3, #0
 23ff21a:	7c00      	ldrb	r0, [r0, #16]
 23ff21c:	f7fe b80e 	b.w	23fd23c <hal_usart_begin_config>

023ff220 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23ff220:	2200      	movs	r2, #0
 23ff222:	f7ff bff9 	b.w	23ff218 <_ZN11USARTSerial5beginEmm>

023ff226 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23ff226:	7c00      	ldrb	r0, [r0, #16]
 23ff228:	f7fd bf98 	b.w	23fd15c <hal_usart_end>

023ff22c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff22c:	7c00      	ldrb	r0, [r0, #16]
 23ff22e:	f7fd bfe9 	b.w	23fd204 <hal_usart_is_enabled>

023ff232 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff232:	7441      	strb	r1, [r0, #17]
}
 23ff234:	4770      	bx	lr

023ff236 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff236:	4770      	bx	lr

023ff238 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff238:	4770      	bx	lr

023ff23a <_ZN9USBSerial4readEv>:
{
 23ff23a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff23c:	2100      	movs	r1, #0
 23ff23e:	7c00      	ldrb	r0, [r0, #16]
 23ff240:	f7fe f85e 	bl	23fd300 <HAL_USB_USART_Receive_Data>
}
 23ff244:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff248:	bd08      	pop	{r3, pc}

023ff24a <_ZN9USBSerial4peekEv>:
{
 23ff24a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff24c:	2101      	movs	r1, #1
 23ff24e:	7c00      	ldrb	r0, [r0, #16]
 23ff250:	f7fe f856 	bl	23fd300 <HAL_USB_USART_Receive_Data>
}
 23ff254:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff258:	bd08      	pop	{r3, pc}

023ff25a <_ZN9USBSerial17availableForWriteEv>:
{
 23ff25a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff25c:	7c00      	ldrb	r0, [r0, #16]
 23ff25e:	f7fe f841 	bl	23fd2e4 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff262:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff266:	bd08      	pop	{r3, pc}

023ff268 <_ZN9USBSerial9availableEv>:
{
 23ff268:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff26a:	7c00      	ldrb	r0, [r0, #16]
 23ff26c:	f7fe f82c 	bl	23fd2c8 <HAL_USB_USART_Available_Data>
}
 23ff270:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff274:	bd08      	pop	{r3, pc}

023ff276 <_ZN9USBSerial5writeEh>:
{
 23ff276:	b513      	push	{r0, r1, r4, lr}
 23ff278:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff27a:	7c00      	ldrb	r0, [r0, #16]
{
 23ff27c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff27e:	f7fe f831 	bl	23fd2e4 <HAL_USB_USART_Available_Data_For_Write>
 23ff282:	2800      	cmp	r0, #0
 23ff284:	9901      	ldr	r1, [sp, #4]
 23ff286:	dc01      	bgt.n	23ff28c <_ZN9USBSerial5writeEh+0x16>
 23ff288:	7c60      	ldrb	r0, [r4, #17]
 23ff28a:	b120      	cbz	r0, 23ff296 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff28c:	7c20      	ldrb	r0, [r4, #16]
 23ff28e:	f7fe f845 	bl	23fd31c <HAL_USB_USART_Send_Data>
 23ff292:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff296:	b002      	add	sp, #8
 23ff298:	bd10      	pop	{r4, pc}

023ff29a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff29a:	7c00      	ldrb	r0, [r0, #16]
 23ff29c:	f7fe b84c 	b.w	23fd338 <HAL_USB_USART_Flush_Data>

023ff2a0 <_ZN9USBSerialD0Ev>:
 23ff2a0:	b510      	push	{r4, lr}
 23ff2a2:	4604      	mov	r4, r0
 23ff2a4:	2114      	movs	r1, #20
 23ff2a6:	f7fd f870 	bl	23fc38a <_ZdlPvj>
 23ff2aa:	4620      	mov	r0, r4
 23ff2ac:	bd10      	pop	{r4, pc}
	...

023ff2b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff2b0:	b510      	push	{r4, lr}
 23ff2b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff2b6:	4604      	mov	r4, r0
 23ff2b8:	4608      	mov	r0, r1
 23ff2ba:	2100      	movs	r1, #0
 23ff2bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff2c0:	4b04      	ldr	r3, [pc, #16]	; (23ff2d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff2c2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff2c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff2c6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff2c8:	4611      	mov	r1, r2
  _blocking = true;
 23ff2ca:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff2cc:	f7fd ffd2 	bl	23fd274 <HAL_USB_USART_Init>
}
 23ff2d0:	4620      	mov	r0, r4
 23ff2d2:	bd10      	pop	{r4, pc}
 23ff2d4:	023ffdfc 	.word	0x023ffdfc

023ff2d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff2d8:	2200      	movs	r2, #0
 23ff2da:	7c00      	ldrb	r0, [r0, #16]
 23ff2dc:	f7fd bfd8 	b.w	23fd290 <HAL_USB_USART_Begin>

023ff2e0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23ff2e0:	7c00      	ldrb	r0, [r0, #16]
 23ff2e2:	f7fd bfe3 	b.w	23fd2ac <HAL_USB_USART_End>

023ff2e6 <_Z19acquireSerialBufferv>:
{
 23ff2e6:	b510      	push	{r4, lr}
 23ff2e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff2ea:	2214      	movs	r2, #20
 23ff2ec:	2100      	movs	r1, #0
 23ff2ee:	f000 faae 	bl	23ff84e <memset>
}
 23ff2f2:	4620      	mov	r0, r4
 23ff2f4:	bd10      	pop	{r4, pc}
	...

023ff2f8 <_Z16_fetch_usbserialv>:
{
 23ff2f8:	b510      	push	{r4, lr}
 23ff2fa:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff2fc:	a803      	add	r0, sp, #12
 23ff2fe:	f7ff fff2 	bl	23ff2e6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff302:	4c0c      	ldr	r4, [pc, #48]	; (23ff334 <_Z16_fetch_usbserialv+0x3c>)
 23ff304:	e8d4 1f8f 	ldab	r1, [r4]
 23ff308:	f011 0101 	ands.w	r1, r1, #1
 23ff30c:	d10f      	bne.n	23ff32e <_Z16_fetch_usbserialv+0x36>
 23ff30e:	4620      	mov	r0, r4
 23ff310:	9101      	str	r1, [sp, #4]
 23ff312:	f7fd f849 	bl	23fc3a8 <__cxa_guard_acquire>
 23ff316:	9901      	ldr	r1, [sp, #4]
 23ff318:	b148      	cbz	r0, 23ff32e <_Z16_fetch_usbserialv+0x36>
 23ff31a:	aa03      	add	r2, sp, #12
 23ff31c:	4806      	ldr	r0, [pc, #24]	; (23ff338 <_Z16_fetch_usbserialv+0x40>)
 23ff31e:	f7ff ffc7 	bl	23ff2b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff322:	4620      	mov	r0, r4
 23ff324:	f7fd f845 	bl	23fc3b2 <__cxa_guard_release>
 23ff328:	4804      	ldr	r0, [pc, #16]	; (23ff33c <_Z16_fetch_usbserialv+0x44>)
 23ff32a:	f000 fa5b 	bl	23ff7e4 <atexit>
	return _usbserial;
}
 23ff32e:	4802      	ldr	r0, [pc, #8]	; (23ff338 <_Z16_fetch_usbserialv+0x40>)
 23ff330:	b008      	add	sp, #32
 23ff332:	bd10      	pop	{r4, pc}
 23ff334:	1007aec8 	.word	0x1007aec8
 23ff338:	1007aecc 	.word	0x1007aecc
 23ff33c:	023ff237 	.word	0x023ff237

023ff340 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff340:	2200      	movs	r2, #0
 23ff342:	6840      	ldr	r0, [r0, #4]
 23ff344:	4611      	mov	r1, r2
 23ff346:	f7fe b8c9 	b.w	23fd4dc <network_ready>

023ff34a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff34a:	2200      	movs	r2, #0
 23ff34c:	6840      	ldr	r0, [r0, #4]
 23ff34e:	4611      	mov	r1, r2
 23ff350:	f7fe b8fc 	b.w	23fd54c <network_listening>

023ff354 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff354:	2200      	movs	r2, #0
 23ff356:	6840      	ldr	r0, [r0, #4]
 23ff358:	4611      	mov	r1, r2
 23ff35a:	f7fe b913 	b.w	23fd584 <network_get_listen_timeout>

023ff35e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff35e:	2200      	movs	r2, #0
 23ff360:	6840      	ldr	r0, [r0, #4]
 23ff362:	f7fe b901 	b.w	23fd568 <network_set_listen_timeout>

023ff366 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff366:	2200      	movs	r2, #0
 23ff368:	6840      	ldr	r0, [r0, #4]
 23ff36a:	f081 0101 	eor.w	r1, r1, #1
 23ff36e:	f7fe b8df 	b.w	23fd530 <network_listen>

023ff372 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff372:	2300      	movs	r3, #0
 23ff374:	6840      	ldr	r0, [r0, #4]
 23ff376:	461a      	mov	r2, r3
 23ff378:	4619      	mov	r1, r3
 23ff37a:	f7fe b8cb 	b.w	23fd514 <network_off>

023ff37e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff37e:	2300      	movs	r3, #0
 23ff380:	6840      	ldr	r0, [r0, #4]
 23ff382:	461a      	mov	r2, r3
 23ff384:	4619      	mov	r1, r3
 23ff386:	f7fe b8b7 	b.w	23fd4f8 <network_on>

023ff38a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff38a:	2200      	movs	r2, #0
 23ff38c:	6840      	ldr	r0, [r0, #4]
 23ff38e:	4611      	mov	r1, r2
 23ff390:	f7fe b888 	b.w	23fd4a4 <network_connecting>

023ff394 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff394:	2200      	movs	r2, #0
 23ff396:	2102      	movs	r1, #2
 23ff398:	6840      	ldr	r0, [r0, #4]
 23ff39a:	f7fe b891 	b.w	23fd4c0 <network_disconnect>

023ff39e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff39e:	2300      	movs	r3, #0
 23ff3a0:	6840      	ldr	r0, [r0, #4]
 23ff3a2:	461a      	mov	r2, r3
 23ff3a4:	f7fe b870 	b.w	23fd488 <network_connect>

023ff3a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff3a8:	2204      	movs	r2, #4
 23ff3aa:	4b02      	ldr	r3, [pc, #8]	; (23ff3b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff3ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff3ae:	4a02      	ldr	r2, [pc, #8]	; (23ff3b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff3b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff3b2:	4770      	bx	lr
 23ff3b4:	1007aee0 	.word	0x1007aee0
 23ff3b8:	023ffe2c 	.word	0x023ffe2c

023ff3bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff3bc:	4b01      	ldr	r3, [pc, #4]	; (23ff3c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff3be:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff3c0:	4770      	bx	lr
 23ff3c2:	bf00      	nop
 23ff3c4:	1007ad74 	.word	0x1007ad74

023ff3c8 <serialEventRun>:
{
 23ff3c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff3ca:	4b0f      	ldr	r3, [pc, #60]	; (23ff408 <serialEventRun+0x40>)
 23ff3cc:	b143      	cbz	r3, 23ff3e0 <serialEventRun+0x18>
 23ff3ce:	f7ff ff93 	bl	23ff2f8 <_Z16_fetch_usbserialv>
 23ff3d2:	6803      	ldr	r3, [r0, #0]
 23ff3d4:	691b      	ldr	r3, [r3, #16]
 23ff3d6:	4798      	blx	r3
 23ff3d8:	2800      	cmp	r0, #0
 23ff3da:	dd01      	ble.n	23ff3e0 <serialEventRun+0x18>
        serialEvent();
 23ff3dc:	e000      	b.n	23ff3e0 <serialEventRun+0x18>
 23ff3de:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff3e0:	4b0a      	ldr	r3, [pc, #40]	; (23ff40c <serialEventRun+0x44>)
 23ff3e2:	b143      	cbz	r3, 23ff3f6 <serialEventRun+0x2e>
 23ff3e4:	f000 f96a 	bl	23ff6bc <_Z22__fetch_global_Serial1v>
 23ff3e8:	6803      	ldr	r3, [r0, #0]
 23ff3ea:	691b      	ldr	r3, [r3, #16]
 23ff3ec:	4798      	blx	r3
 23ff3ee:	2800      	cmp	r0, #0
 23ff3f0:	dd01      	ble.n	23ff3f6 <serialEventRun+0x2e>
        serialEvent1();
 23ff3f2:	e000      	b.n	23ff3f6 <serialEventRun+0x2e>
 23ff3f4:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff3f6:	4b06      	ldr	r3, [pc, #24]	; (23ff410 <serialEventRun+0x48>)
 23ff3f8:	b10b      	cbz	r3, 23ff3fe <serialEventRun+0x36>
 23ff3fa:	f000 f9a5 	bl	23ff748 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff3fe:	4b05      	ldr	r3, [pc, #20]	; (23ff414 <serialEventRun+0x4c>)
 23ff400:	b10b      	cbz	r3, 23ff406 <serialEventRun+0x3e>
 23ff402:	f000 f9d7 	bl	23ff7b4 <_Z15serialEventRun3v>
}
 23ff406:	bd08      	pop	{r3, pc}
	...

023ff418 <_post_loop>:
{
 23ff418:	b508      	push	{r3, lr}
	serialEventRun();
 23ff41a:	f7ff ffd5 	bl	23ff3c8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff41e:	f7fd fd07 	bl	23fce30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff422:	4b01      	ldr	r3, [pc, #4]	; (23ff428 <_post_loop+0x10>)
 23ff424:	6018      	str	r0, [r3, #0]
}
 23ff426:	bd08      	pop	{r3, pc}
 23ff428:	1007aef0 	.word	0x1007aef0

023ff42c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff42c:	4805      	ldr	r0, [pc, #20]	; (23ff444 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff42e:	4a06      	ldr	r2, [pc, #24]	; (23ff448 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff430:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff432:	1a12      	subs	r2, r2, r0
 23ff434:	4905      	ldr	r1, [pc, #20]	; (23ff44c <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff436:	f000 f9e3 	bl	23ff800 <memcpy>
    __backup_sram_signature = signature;
 23ff43a:	4b05      	ldr	r3, [pc, #20]	; (23ff450 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff43c:	4a05      	ldr	r2, [pc, #20]	; (23ff454 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff43e:	601a      	str	r2, [r3, #0]
}
 23ff440:	bd08      	pop	{r3, pc}
 23ff442:	bf00      	nop
 23ff444:	1007b400 	.word	0x1007b400
 23ff448:	1007b404 	.word	0x1007b404
 23ff44c:	085ff618 	.word	0x085ff618
 23ff450:	1007b400 	.word	0x1007b400
 23ff454:	9a271c1e 	.word	0x9a271c1e

023ff458 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff458:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff45a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff45c:	461a      	mov	r2, r3
 23ff45e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff462:	9300      	str	r3, [sp, #0]
 23ff464:	f7fd ffe6 	bl	23fd434 <system_ctrl_set_result>
}
 23ff468:	b003      	add	sp, #12
 23ff46a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff470 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff470:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff472:	8843      	ldrh	r3, [r0, #2]
 23ff474:	2b0a      	cmp	r3, #10
 23ff476:	d008      	beq.n	23ff48a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff478:	2b50      	cmp	r3, #80	; 0x50
 23ff47a:	d10b      	bne.n	23ff494 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff47c:	4b09      	ldr	r3, [pc, #36]	; (23ff4a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff47e:	681b      	ldr	r3, [r3, #0]
 23ff480:	b14b      	cbz	r3, 23ff496 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff482:	b003      	add	sp, #12
 23ff484:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff488:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff48a:	f7ff ffe5 	bl	23ff458 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff48e:	b003      	add	sp, #12
 23ff490:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff494:	2300      	movs	r3, #0
 23ff496:	461a      	mov	r2, r3
 23ff498:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff49c:	9300      	str	r3, [sp, #0]
 23ff49e:	f7fd ffc9 	bl	23fd434 <system_ctrl_set_result>
}
 23ff4a2:	e7f4      	b.n	23ff48e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff4a4:	1007aeec 	.word	0x1007aeec

023ff4a8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff4a8:	2100      	movs	r1, #0
{
 23ff4aa:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff4ac:	4811      	ldr	r0, [pc, #68]	; (23ff4f4 <module_user_init_hook+0x4c>)
 23ff4ae:	f7fe f8e7 	bl	23fd680 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff4b2:	4b11      	ldr	r3, [pc, #68]	; (23ff4f8 <module_user_init_hook+0x50>)
 23ff4b4:	681a      	ldr	r2, [r3, #0]
 23ff4b6:	4b11      	ldr	r3, [pc, #68]	; (23ff4fc <module_user_init_hook+0x54>)
 23ff4b8:	429a      	cmp	r2, r3
 23ff4ba:	bf0c      	ite	eq
 23ff4bc:	2201      	moveq	r2, #1
 23ff4be:	2200      	movne	r2, #0
 23ff4c0:	4b0f      	ldr	r3, [pc, #60]	; (23ff500 <module_user_init_hook+0x58>)
 23ff4c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff4c4:	d001      	beq.n	23ff4ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff4c6:	f7ff ffb1 	bl	23ff42c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff4ca:	f7fd fc95 	bl	23fcdf8 <HAL_RNG_GetRandomNumber>
 23ff4ce:	4604      	mov	r4, r0
    srand(seed);
 23ff4d0:	f000 f9c6 	bl	23ff860 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff4d4:	4b0b      	ldr	r3, [pc, #44]	; (23ff504 <module_user_init_hook+0x5c>)
 23ff4d6:	b113      	cbz	r3, 23ff4de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff4d8:	4620      	mov	r0, r4
 23ff4da:	e000      	b.n	23ff4de <module_user_init_hook+0x36>
 23ff4dc:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff4de:	2100      	movs	r1, #0
 23ff4e0:	4808      	ldr	r0, [pc, #32]	; (23ff504 <module_user_init_hook+0x5c>)
 23ff4e2:	f7fd ffb5 	bl	23fd450 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff4ea:	2100      	movs	r1, #0
 23ff4ec:	4806      	ldr	r0, [pc, #24]	; (23ff508 <module_user_init_hook+0x60>)
 23ff4ee:	f7fd bf93 	b.w	23fd418 <system_ctrl_set_app_request_handler>
 23ff4f2:	bf00      	nop
 23ff4f4:	023ff3bd 	.word	0x023ff3bd
 23ff4f8:	1007b400 	.word	0x1007b400
 23ff4fc:	9a271c1e 	.word	0x9a271c1e
 23ff500:	1007aee8 	.word	0x1007aee8
 23ff504:	00000000 	.word	0x00000000
 23ff508:	023ff471 	.word	0x023ff471

023ff50c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff50c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff50e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff510:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff512:	d902      	bls.n	23ff51a <pinAvailable+0xe>
    return false;
 23ff514:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff516:	b003      	add	sp, #12
 23ff518:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff51a:	f1a0 030f 	sub.w	r3, r0, #15
 23ff51e:	2b02      	cmp	r3, #2
 23ff520:	d90b      	bls.n	23ff53a <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff522:	2801      	cmp	r0, #1
 23ff524:	d821      	bhi.n	23ff56a <pinAvailable+0x5e>
 23ff526:	f000 f875 	bl	23ff614 <_Z19__fetch_global_Wirev>
 23ff52a:	2100      	movs	r1, #0
 23ff52c:	7c00      	ldrb	r0, [r0, #16]
 23ff52e:	f7fd fd35 	bl	23fcf9c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff532:	f080 0001 	eor.w	r0, r0, #1
 23ff536:	b2c0      	uxtb	r0, r0
 23ff538:	e7ed      	b.n	23ff516 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff53a:	4d11      	ldr	r5, [pc, #68]	; (23ff580 <pinAvailable+0x74>)
 23ff53c:	e8d5 1f8f 	ldab	r1, [r5]
 23ff540:	f011 0101 	ands.w	r1, r1, #1
 23ff544:	d10b      	bne.n	23ff55e <pinAvailable+0x52>
 23ff546:	4628      	mov	r0, r5
 23ff548:	9101      	str	r1, [sp, #4]
 23ff54a:	f7fc ff2d 	bl	23fc3a8 <__cxa_guard_acquire>
 23ff54e:	9901      	ldr	r1, [sp, #4]
 23ff550:	b128      	cbz	r0, 23ff55e <pinAvailable+0x52>
 23ff552:	480c      	ldr	r0, [pc, #48]	; (23ff584 <pinAvailable+0x78>)
 23ff554:	f7ff fcce 	bl	23feef4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff558:	4628      	mov	r0, r5
 23ff55a:	f7fc ff2a 	bl	23fc3b2 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff55e:	4b09      	ldr	r3, [pc, #36]	; (23ff584 <pinAvailable+0x78>)
 23ff560:	7818      	ldrb	r0, [r3, #0]
 23ff562:	f7fd fd99 	bl	23fd098 <hal_spi_is_enabled>
 23ff566:	2800      	cmp	r0, #0
 23ff568:	d1d4      	bne.n	23ff514 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff56a:	3c08      	subs	r4, #8
 23ff56c:	2c01      	cmp	r4, #1
 23ff56e:	d805      	bhi.n	23ff57c <pinAvailable+0x70>
 23ff570:	f000 f8a4 	bl	23ff6bc <_Z22__fetch_global_Serial1v>
 23ff574:	7c00      	ldrb	r0, [r0, #16]
 23ff576:	f7fd fe45 	bl	23fd204 <hal_usart_is_enabled>
 23ff57a:	e7da      	b.n	23ff532 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff57c:	2001      	movs	r0, #1
 23ff57e:	e7ca      	b.n	23ff516 <pinAvailable+0xa>
 23ff580:	1007ae48 	.word	0x1007ae48
 23ff584:	1007ae4c 	.word	0x1007ae4c

023ff588 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff588:	281b      	cmp	r0, #27
{
 23ff58a:	b538      	push	{r3, r4, r5, lr}
 23ff58c:	4604      	mov	r4, r0
 23ff58e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff590:	d80a      	bhi.n	23ff5a8 <pinMode+0x20>
 23ff592:	29ff      	cmp	r1, #255	; 0xff
 23ff594:	d008      	beq.n	23ff5a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff596:	f7ff ffb9 	bl	23ff50c <pinAvailable>
 23ff59a:	b128      	cbz	r0, 23ff5a8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff59c:	4629      	mov	r1, r5
 23ff59e:	4620      	mov	r0, r4
}
 23ff5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff5a4:	f7fd bc52 	b.w	23fce4c <hal_gpio_mode>
}
 23ff5a8:	bd38      	pop	{r3, r4, r5, pc}

023ff5aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff5aa:	b538      	push	{r3, r4, r5, lr}
 23ff5ac:	4604      	mov	r4, r0
 23ff5ae:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff5b0:	f7fd fc5a 	bl	23fce68 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff5b4:	28ff      	cmp	r0, #255	; 0xff
 23ff5b6:	d010      	beq.n	23ff5da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff5b8:	2806      	cmp	r0, #6
 23ff5ba:	d804      	bhi.n	23ff5c6 <digitalWrite+0x1c>
 23ff5bc:	234d      	movs	r3, #77	; 0x4d
 23ff5be:	fa23 f000 	lsr.w	r0, r3, r0
 23ff5c2:	07c3      	lsls	r3, r0, #31
 23ff5c4:	d409      	bmi.n	23ff5da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff5c6:	4620      	mov	r0, r4
 23ff5c8:	f7ff ffa0 	bl	23ff50c <pinAvailable>
 23ff5cc:	b128      	cbz	r0, 23ff5da <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff5ce:	4629      	mov	r1, r5
 23ff5d0:	4620      	mov	r0, r4
}
 23ff5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff5d6:	f7fd bc55 	b.w	23fce84 <hal_gpio_write>
}
 23ff5da:	bd38      	pop	{r3, r4, r5, pc}

023ff5dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff5dc:	4770      	bx	lr
	...

023ff5e0 <_Z17acquireWireBufferv>:
{
 23ff5e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff5e2:	4b0a      	ldr	r3, [pc, #40]	; (23ff60c <_Z17acquireWireBufferv+0x2c>)
{
 23ff5e4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff5e6:	6003      	str	r3, [r0, #0]
 23ff5e8:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff5ea:	4909      	ldr	r1, [pc, #36]	; (23ff610 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff5ec:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff5ee:	2020      	movs	r0, #32
 23ff5f0:	f000 f8f6 	bl	23ff7e0 <_ZnajRKSt9nothrow_t>
	};
 23ff5f4:	2520      	movs	r5, #32
 23ff5f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff5f8:	4905      	ldr	r1, [pc, #20]	; (23ff610 <_Z17acquireWireBufferv+0x30>)
 23ff5fa:	4628      	mov	r0, r5
	};
 23ff5fc:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff5fe:	f000 f8ef 	bl	23ff7e0 <_ZnajRKSt9nothrow_t>
	};
 23ff602:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff606:	4620      	mov	r0, r4
 23ff608:	bd38      	pop	{r3, r4, r5, pc}
 23ff60a:	bf00      	nop
 23ff60c:	00010018 	.word	0x00010018
 23ff610:	023ffe60 	.word	0x023ffe60

023ff614 <_Z19__fetch_global_Wirev>:
{
 23ff614:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff616:	4d0e      	ldr	r5, [pc, #56]	; (23ff650 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff618:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff61a:	e8d5 1f8f 	ldab	r1, [r5]
 23ff61e:	f011 0401 	ands.w	r4, r1, #1
 23ff622:	d111      	bne.n	23ff648 <_Z19__fetch_global_Wirev+0x34>
 23ff624:	4628      	mov	r0, r5
 23ff626:	f7fc febf 	bl	23fc3a8 <__cxa_guard_acquire>
 23ff62a:	b168      	cbz	r0, 23ff648 <_Z19__fetch_global_Wirev+0x34>
 23ff62c:	4668      	mov	r0, sp
 23ff62e:	f7ff ffd7 	bl	23ff5e0 <_Z17acquireWireBufferv>
 23ff632:	466a      	mov	r2, sp
 23ff634:	4621      	mov	r1, r4
 23ff636:	4807      	ldr	r0, [pc, #28]	; (23ff654 <_Z19__fetch_global_Wirev+0x40>)
 23ff638:	f7fe f8ee 	bl	23fd818 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff63c:	4628      	mov	r0, r5
 23ff63e:	f7fc feb8 	bl	23fc3b2 <__cxa_guard_release>
 23ff642:	4805      	ldr	r0, [pc, #20]	; (23ff658 <_Z19__fetch_global_Wirev+0x44>)
 23ff644:	f000 f8ce 	bl	23ff7e4 <atexit>
	return wire;
}
 23ff648:	4802      	ldr	r0, [pc, #8]	; (23ff654 <_Z19__fetch_global_Wirev+0x40>)
 23ff64a:	b007      	add	sp, #28
 23ff64c:	bd30      	pop	{r4, r5, pc}
 23ff64e:	bf00      	nop
 23ff650:	1007aef4 	.word	0x1007aef4
 23ff654:	1007aef8 	.word	0x1007aef8
 23ff658:	023ff5dd 	.word	0x023ff5dd

023ff65c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff65c:	4770      	bx	lr
	...

023ff660 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff660:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff662:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff664:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff666:	462a      	mov	r2, r5
 23ff668:	2100      	movs	r1, #0
 23ff66a:	f000 f8f0 	bl	23ff84e <memset>
 23ff66e:	8025      	strh	r5, [r4, #0]
 23ff670:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff672:	4907      	ldr	r1, [pc, #28]	; (23ff690 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff674:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff676:	8125      	strh	r5, [r4, #8]
 23ff678:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff67a:	f000 f8b1 	bl	23ff7e0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff67e:	4904      	ldr	r1, [pc, #16]	; (23ff690 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff680:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff682:	4628      	mov	r0, r5
 23ff684:	f000 f8ac 	bl	23ff7e0 <_ZnajRKSt9nothrow_t>
    };
 23ff688:	60e0      	str	r0, [r4, #12]
}
 23ff68a:	4620      	mov	r0, r4
 23ff68c:	bd38      	pop	{r3, r4, r5, pc}
 23ff68e:	bf00      	nop
 23ff690:	023ffe60 	.word	0x023ffe60

023ff694 <__tcf_2>:
 23ff694:	4770      	bx	lr

023ff696 <__tcf_1>:
 23ff696:	4770      	bx	lr

023ff698 <_Z20acquireSerial1Bufferv>:
{
 23ff698:	b510      	push	{r4, lr}
 23ff69a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff69c:	f7ff ffe0 	bl	23ff660 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff6a0:	4620      	mov	r0, r4
 23ff6a2:	bd10      	pop	{r4, pc}

023ff6a4 <_Z20acquireSerial2Bufferv>:
 23ff6a4:	b510      	push	{r4, lr}
 23ff6a6:	4604      	mov	r4, r0
 23ff6a8:	f7ff ffda 	bl	23ff660 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff6ac:	4620      	mov	r0, r4
 23ff6ae:	bd10      	pop	{r4, pc}

023ff6b0 <_Z20acquireSerial3Bufferv>:
 23ff6b0:	b510      	push	{r4, lr}
 23ff6b2:	4604      	mov	r4, r0
 23ff6b4:	f7ff ffd4 	bl	23ff660 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff6b8:	4620      	mov	r0, r4
 23ff6ba:	bd10      	pop	{r4, pc}

023ff6bc <_Z22__fetch_global_Serial1v>:
{
 23ff6bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff6be:	4d0e      	ldr	r5, [pc, #56]	; (23ff6f8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff6c0:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff6c2:	e8d5 1f8f 	ldab	r1, [r5]
 23ff6c6:	f011 0401 	ands.w	r4, r1, #1
 23ff6ca:	d111      	bne.n	23ff6f0 <_Z22__fetch_global_Serial1v+0x34>
 23ff6cc:	4628      	mov	r0, r5
 23ff6ce:	f7fc fe6b 	bl	23fc3a8 <__cxa_guard_acquire>
 23ff6d2:	b168      	cbz	r0, 23ff6f0 <_Z22__fetch_global_Serial1v+0x34>
 23ff6d4:	a801      	add	r0, sp, #4
 23ff6d6:	f7ff ffdf 	bl	23ff698 <_Z20acquireSerial1Bufferv>
 23ff6da:	4621      	mov	r1, r4
 23ff6dc:	aa01      	add	r2, sp, #4
 23ff6de:	4807      	ldr	r0, [pc, #28]	; (23ff6fc <_Z22__fetch_global_Serial1v+0x40>)
 23ff6e0:	f7ff fd86 	bl	23ff1f0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff6e4:	4628      	mov	r0, r5
 23ff6e6:	f7fc fe64 	bl	23fc3b2 <__cxa_guard_release>
 23ff6ea:	4805      	ldr	r0, [pc, #20]	; (23ff700 <_Z22__fetch_global_Serial1v+0x44>)
 23ff6ec:	f000 f87a 	bl	23ff7e4 <atexit>
    return serial1;
}
 23ff6f0:	4802      	ldr	r0, [pc, #8]	; (23ff6fc <_Z22__fetch_global_Serial1v+0x40>)
 23ff6f2:	b007      	add	sp, #28
 23ff6f4:	bd30      	pop	{r4, r5, pc}
 23ff6f6:	bf00      	nop
 23ff6f8:	1007af0c 	.word	0x1007af0c
 23ff6fc:	1007af18 	.word	0x1007af18
 23ff700:	023ff65d 	.word	0x023ff65d

023ff704 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff704:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff706:	4c0d      	ldr	r4, [pc, #52]	; (23ff73c <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff708:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff70a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff70e:	07db      	lsls	r3, r3, #31
 23ff710:	d411      	bmi.n	23ff736 <_Z22__fetch_global_Serial2v+0x32>
 23ff712:	4620      	mov	r0, r4
 23ff714:	f7fc fe48 	bl	23fc3a8 <__cxa_guard_acquire>
 23ff718:	b168      	cbz	r0, 23ff736 <_Z22__fetch_global_Serial2v+0x32>
 23ff71a:	a801      	add	r0, sp, #4
 23ff71c:	f7ff ffc2 	bl	23ff6a4 <_Z20acquireSerial2Bufferv>
 23ff720:	2101      	movs	r1, #1
 23ff722:	aa01      	add	r2, sp, #4
 23ff724:	4806      	ldr	r0, [pc, #24]	; (23ff740 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff726:	f7ff fd63 	bl	23ff1f0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff72a:	4620      	mov	r0, r4
 23ff72c:	f7fc fe41 	bl	23fc3b2 <__cxa_guard_release>
 23ff730:	4804      	ldr	r0, [pc, #16]	; (23ff744 <_Z22__fetch_global_Serial2v+0x40>)
 23ff732:	f000 f857 	bl	23ff7e4 <atexit>
	return serial2;
}
 23ff736:	4802      	ldr	r0, [pc, #8]	; (23ff740 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff738:	b006      	add	sp, #24
 23ff73a:	bd10      	pop	{r4, pc}
 23ff73c:	1007af10 	.word	0x1007af10
 23ff740:	1007af2c 	.word	0x1007af2c
 23ff744:	023ff697 	.word	0x023ff697

023ff748 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff748:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff74a:	f7ff ffdb 	bl	23ff704 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff74e:	4b07      	ldr	r3, [pc, #28]	; (23ff76c <_Z15serialEventRun2v+0x24>)
 23ff750:	4604      	mov	r4, r0
 23ff752:	b153      	cbz	r3, 23ff76a <_Z15serialEventRun2v+0x22>
 23ff754:	f7ff fd6a 	bl	23ff22c <_ZN11USARTSerial9isEnabledEv>
 23ff758:	b138      	cbz	r0, 23ff76a <_Z15serialEventRun2v+0x22>
 23ff75a:	6823      	ldr	r3, [r4, #0]
 23ff75c:	4620      	mov	r0, r4
 23ff75e:	691b      	ldr	r3, [r3, #16]
 23ff760:	4798      	blx	r3
 23ff762:	2800      	cmp	r0, #0
 23ff764:	dd01      	ble.n	23ff76a <_Z15serialEventRun2v+0x22>
        handler();
 23ff766:	e000      	b.n	23ff76a <_Z15serialEventRun2v+0x22>
 23ff768:	bf00      	nop
}
 23ff76a:	bd10      	pop	{r4, pc}
 23ff76c:	00000000 	.word	0x00000000

023ff770 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff770:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff772:	4c0d      	ldr	r4, [pc, #52]	; (23ff7a8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff774:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff776:	e8d4 3f8f 	ldab	r3, [r4]
 23ff77a:	07db      	lsls	r3, r3, #31
 23ff77c:	d411      	bmi.n	23ff7a2 <_Z22__fetch_global_Serial3v+0x32>
 23ff77e:	4620      	mov	r0, r4
 23ff780:	f7fc fe12 	bl	23fc3a8 <__cxa_guard_acquire>
 23ff784:	b168      	cbz	r0, 23ff7a2 <_Z22__fetch_global_Serial3v+0x32>
 23ff786:	a801      	add	r0, sp, #4
 23ff788:	f7ff ff92 	bl	23ff6b0 <_Z20acquireSerial3Bufferv>
 23ff78c:	2102      	movs	r1, #2
 23ff78e:	aa01      	add	r2, sp, #4
 23ff790:	4806      	ldr	r0, [pc, #24]	; (23ff7ac <_Z22__fetch_global_Serial3v+0x3c>)
 23ff792:	f7ff fd2d 	bl	23ff1f0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff796:	4620      	mov	r0, r4
 23ff798:	f7fc fe0b 	bl	23fc3b2 <__cxa_guard_release>
 23ff79c:	4804      	ldr	r0, [pc, #16]	; (23ff7b0 <_Z22__fetch_global_Serial3v+0x40>)
 23ff79e:	f000 f821 	bl	23ff7e4 <atexit>
	return serial3;
}
 23ff7a2:	4802      	ldr	r0, [pc, #8]	; (23ff7ac <_Z22__fetch_global_Serial3v+0x3c>)
 23ff7a4:	b006      	add	sp, #24
 23ff7a6:	bd10      	pop	{r4, pc}
 23ff7a8:	1007af14 	.word	0x1007af14
 23ff7ac:	1007af40 	.word	0x1007af40
 23ff7b0:	023ff695 	.word	0x023ff695

023ff7b4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff7b4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff7b6:	f7ff ffdb 	bl	23ff770 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff7ba:	4b07      	ldr	r3, [pc, #28]	; (23ff7d8 <_Z15serialEventRun3v+0x24>)
 23ff7bc:	4604      	mov	r4, r0
 23ff7be:	b153      	cbz	r3, 23ff7d6 <_Z15serialEventRun3v+0x22>
 23ff7c0:	f7ff fd34 	bl	23ff22c <_ZN11USARTSerial9isEnabledEv>
 23ff7c4:	b138      	cbz	r0, 23ff7d6 <_Z15serialEventRun3v+0x22>
 23ff7c6:	6823      	ldr	r3, [r4, #0]
 23ff7c8:	4620      	mov	r0, r4
 23ff7ca:	691b      	ldr	r3, [r3, #16]
 23ff7cc:	4798      	blx	r3
 23ff7ce:	2800      	cmp	r0, #0
 23ff7d0:	dd01      	ble.n	23ff7d6 <_Z15serialEventRun3v+0x22>
        handler();
 23ff7d2:	e000      	b.n	23ff7d6 <_Z15serialEventRun3v+0x22>
 23ff7d4:	bf00      	nop
}
 23ff7d6:	bd10      	pop	{r4, pc}
 23ff7d8:	00000000 	.word	0x00000000

023ff7dc <_ZnwjRKSt9nothrow_t>:
 23ff7dc:	f7fc bdd1 	b.w	23fc382 <_Znwj>

023ff7e0 <_ZnajRKSt9nothrow_t>:
 23ff7e0:	f7fc bdd1 	b.w	23fc386 <_Znaj>

023ff7e4 <atexit>:
 23ff7e4:	2300      	movs	r3, #0
 23ff7e6:	4601      	mov	r1, r0
 23ff7e8:	461a      	mov	r2, r3
 23ff7ea:	4618      	mov	r0, r3
 23ff7ec:	f000 b93a 	b.w	23ffa64 <__register_exitproc>

023ff7f0 <isprint>:
 23ff7f0:	4b02      	ldr	r3, [pc, #8]	; (23ff7fc <isprint+0xc>)
 23ff7f2:	4418      	add	r0, r3
 23ff7f4:	7840      	ldrb	r0, [r0, #1]
 23ff7f6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff7fa:	4770      	bx	lr
 23ff7fc:	023ffed1 	.word	0x023ffed1

023ff800 <memcpy>:
 23ff800:	440a      	add	r2, r1
 23ff802:	1e43      	subs	r3, r0, #1
 23ff804:	4291      	cmp	r1, r2
 23ff806:	d100      	bne.n	23ff80a <memcpy+0xa>
 23ff808:	4770      	bx	lr
 23ff80a:	b510      	push	{r4, lr}
 23ff80c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff810:	4291      	cmp	r1, r2
 23ff812:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff816:	d1f9      	bne.n	23ff80c <memcpy+0xc>
 23ff818:	bd10      	pop	{r4, pc}

023ff81a <memmove>:
 23ff81a:	4288      	cmp	r0, r1
 23ff81c:	b510      	push	{r4, lr}
 23ff81e:	eb01 0402 	add.w	r4, r1, r2
 23ff822:	d902      	bls.n	23ff82a <memmove+0x10>
 23ff824:	4284      	cmp	r4, r0
 23ff826:	4623      	mov	r3, r4
 23ff828:	d807      	bhi.n	23ff83a <memmove+0x20>
 23ff82a:	1e43      	subs	r3, r0, #1
 23ff82c:	42a1      	cmp	r1, r4
 23ff82e:	d008      	beq.n	23ff842 <memmove+0x28>
 23ff830:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff834:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff838:	e7f8      	b.n	23ff82c <memmove+0x12>
 23ff83a:	4402      	add	r2, r0
 23ff83c:	4601      	mov	r1, r0
 23ff83e:	428a      	cmp	r2, r1
 23ff840:	d100      	bne.n	23ff844 <memmove+0x2a>
 23ff842:	bd10      	pop	{r4, pc}
 23ff844:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff848:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff84c:	e7f7      	b.n	23ff83e <memmove+0x24>

023ff84e <memset>:
 23ff84e:	4402      	add	r2, r0
 23ff850:	4603      	mov	r3, r0
 23ff852:	4293      	cmp	r3, r2
 23ff854:	d100      	bne.n	23ff858 <memset+0xa>
 23ff856:	4770      	bx	lr
 23ff858:	f803 1b01 	strb.w	r1, [r3], #1
 23ff85c:	e7f9      	b.n	23ff852 <memset+0x4>
	...

023ff860 <srand>:
 23ff860:	b538      	push	{r3, r4, r5, lr}
 23ff862:	4b10      	ldr	r3, [pc, #64]	; (23ff8a4 <srand+0x44>)
 23ff864:	4604      	mov	r4, r0
 23ff866:	681d      	ldr	r5, [r3, #0]
 23ff868:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff86a:	b9b3      	cbnz	r3, 23ff89a <srand+0x3a>
 23ff86c:	2018      	movs	r0, #24
 23ff86e:	f7fd feb3 	bl	23fd5d8 <malloc>
 23ff872:	4602      	mov	r2, r0
 23ff874:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff876:	b920      	cbnz	r0, 23ff882 <srand+0x22>
 23ff878:	4b0b      	ldr	r3, [pc, #44]	; (23ff8a8 <srand+0x48>)
 23ff87a:	2142      	movs	r1, #66	; 0x42
 23ff87c:	480b      	ldr	r0, [pc, #44]	; (23ff8ac <srand+0x4c>)
 23ff87e:	f7fd fef1 	bl	23fd664 <__assert_func>
 23ff882:	490b      	ldr	r1, [pc, #44]	; (23ff8b0 <srand+0x50>)
 23ff884:	4b0b      	ldr	r3, [pc, #44]	; (23ff8b4 <srand+0x54>)
 23ff886:	e9c0 1300 	strd	r1, r3, [r0]
 23ff88a:	4b0b      	ldr	r3, [pc, #44]	; (23ff8b8 <srand+0x58>)
 23ff88c:	2100      	movs	r1, #0
 23ff88e:	6083      	str	r3, [r0, #8]
 23ff890:	230b      	movs	r3, #11
 23ff892:	8183      	strh	r3, [r0, #12]
 23ff894:	2001      	movs	r0, #1
 23ff896:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff89a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff89c:	2200      	movs	r2, #0
 23ff89e:	611c      	str	r4, [r3, #16]
 23ff8a0:	615a      	str	r2, [r3, #20]
 23ff8a2:	bd38      	pop	{r3, r4, r5, pc}
 23ff8a4:	1007ad74 	.word	0x1007ad74
 23ff8a8:	023ffe61 	.word	0x023ffe61
 23ff8ac:	023ffe78 	.word	0x023ffe78
 23ff8b0:	abcd330e 	.word	0xabcd330e
 23ff8b4:	e66d1234 	.word	0xe66d1234
 23ff8b8:	0005deec 	.word	0x0005deec

023ff8bc <strchr>:
 23ff8bc:	b2c9      	uxtb	r1, r1
 23ff8be:	4603      	mov	r3, r0
 23ff8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff8c4:	b11a      	cbz	r2, 23ff8ce <strchr+0x12>
 23ff8c6:	428a      	cmp	r2, r1
 23ff8c8:	d1f9      	bne.n	23ff8be <strchr+0x2>
 23ff8ca:	4618      	mov	r0, r3
 23ff8cc:	4770      	bx	lr
 23ff8ce:	2900      	cmp	r1, #0
 23ff8d0:	bf18      	it	ne
 23ff8d2:	2300      	movne	r3, #0
 23ff8d4:	e7f9      	b.n	23ff8ca <strchr+0xe>

023ff8d6 <strchrnul>:
 23ff8d6:	b510      	push	{r4, lr}
 23ff8d8:	4604      	mov	r4, r0
 23ff8da:	f7ff ffef 	bl	23ff8bc <strchr>
 23ff8de:	b918      	cbnz	r0, 23ff8e8 <strchrnul+0x12>
 23ff8e0:	4620      	mov	r0, r4
 23ff8e2:	f7fc fd29 	bl	23fc338 <strlen>
 23ff8e6:	4420      	add	r0, r4
 23ff8e8:	bd10      	pop	{r4, pc}

023ff8ea <strcpy>:
 23ff8ea:	4603      	mov	r3, r0
 23ff8ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff8f0:	f803 2b01 	strb.w	r2, [r3], #1
 23ff8f4:	2a00      	cmp	r2, #0
 23ff8f6:	d1f9      	bne.n	23ff8ec <strcpy+0x2>
 23ff8f8:	4770      	bx	lr

023ff8fa <strncmp>:
 23ff8fa:	b510      	push	{r4, lr}
 23ff8fc:	b17a      	cbz	r2, 23ff91e <strncmp+0x24>
 23ff8fe:	4603      	mov	r3, r0
 23ff900:	3901      	subs	r1, #1
 23ff902:	1884      	adds	r4, r0, r2
 23ff904:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff908:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff90c:	4290      	cmp	r0, r2
 23ff90e:	d101      	bne.n	23ff914 <strncmp+0x1a>
 23ff910:	42a3      	cmp	r3, r4
 23ff912:	d101      	bne.n	23ff918 <strncmp+0x1e>
 23ff914:	1a80      	subs	r0, r0, r2
 23ff916:	bd10      	pop	{r4, pc}
 23ff918:	2800      	cmp	r0, #0
 23ff91a:	d1f3      	bne.n	23ff904 <strncmp+0xa>
 23ff91c:	e7fa      	b.n	23ff914 <strncmp+0x1a>
 23ff91e:	4610      	mov	r0, r2
 23ff920:	e7f9      	b.n	23ff916 <strncmp+0x1c>

023ff922 <strrchr>:
 23ff922:	b538      	push	{r3, r4, r5, lr}
 23ff924:	4603      	mov	r3, r0
 23ff926:	460c      	mov	r4, r1
 23ff928:	b969      	cbnz	r1, 23ff946 <strrchr+0x24>
 23ff92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff92e:	f7ff bfc5 	b.w	23ff8bc <strchr>
 23ff932:	1c43      	adds	r3, r0, #1
 23ff934:	4605      	mov	r5, r0
 23ff936:	4621      	mov	r1, r4
 23ff938:	4618      	mov	r0, r3
 23ff93a:	f7ff ffbf 	bl	23ff8bc <strchr>
 23ff93e:	2800      	cmp	r0, #0
 23ff940:	d1f7      	bne.n	23ff932 <strrchr+0x10>
 23ff942:	4628      	mov	r0, r5
 23ff944:	bd38      	pop	{r3, r4, r5, pc}
 23ff946:	2500      	movs	r5, #0
 23ff948:	e7f5      	b.n	23ff936 <strrchr+0x14>
	...

023ff94c <_strtol_l.constprop.0>:
 23ff94c:	2b01      	cmp	r3, #1
 23ff94e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff952:	d001      	beq.n	23ff958 <_strtol_l.constprop.0+0xc>
 23ff954:	2b24      	cmp	r3, #36	; 0x24
 23ff956:	d906      	bls.n	23ff966 <_strtol_l.constprop.0+0x1a>
 23ff958:	f7fd fe76 	bl	23fd648 <__errno>
 23ff95c:	2316      	movs	r3, #22
 23ff95e:	6003      	str	r3, [r0, #0]
 23ff960:	2000      	movs	r0, #0
 23ff962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff966:	460d      	mov	r5, r1
 23ff968:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ffa4c <_strtol_l.constprop.0+0x100>
 23ff96c:	462e      	mov	r6, r5
 23ff96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff972:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff976:	f017 0708 	ands.w	r7, r7, #8
 23ff97a:	d1f7      	bne.n	23ff96c <_strtol_l.constprop.0+0x20>
 23ff97c:	2c2d      	cmp	r4, #45	; 0x2d
 23ff97e:	d132      	bne.n	23ff9e6 <_strtol_l.constprop.0+0x9a>
 23ff980:	782c      	ldrb	r4, [r5, #0]
 23ff982:	2701      	movs	r7, #1
 23ff984:	1cb5      	adds	r5, r6, #2
 23ff986:	2b00      	cmp	r3, #0
 23ff988:	d05b      	beq.n	23ffa42 <_strtol_l.constprop.0+0xf6>
 23ff98a:	2b10      	cmp	r3, #16
 23ff98c:	d109      	bne.n	23ff9a2 <_strtol_l.constprop.0+0x56>
 23ff98e:	2c30      	cmp	r4, #48	; 0x30
 23ff990:	d107      	bne.n	23ff9a2 <_strtol_l.constprop.0+0x56>
 23ff992:	782c      	ldrb	r4, [r5, #0]
 23ff994:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff998:	2c58      	cmp	r4, #88	; 0x58
 23ff99a:	d14d      	bne.n	23ffa38 <_strtol_l.constprop.0+0xec>
 23ff99c:	786c      	ldrb	r4, [r5, #1]
 23ff99e:	2310      	movs	r3, #16
 23ff9a0:	3502      	adds	r5, #2
 23ff9a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff9a6:	f04f 0c00 	mov.w	ip, #0
 23ff9aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff9ae:	4666      	mov	r6, ip
 23ff9b0:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff9b4:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff9b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff9bc:	f1be 0f09 	cmp.w	lr, #9
 23ff9c0:	d816      	bhi.n	23ff9f0 <_strtol_l.constprop.0+0xa4>
 23ff9c2:	4674      	mov	r4, lr
 23ff9c4:	42a3      	cmp	r3, r4
 23ff9c6:	dd24      	ble.n	23ffa12 <_strtol_l.constprop.0+0xc6>
 23ff9c8:	f1bc 0f00 	cmp.w	ip, #0
 23ff9cc:	db1e      	blt.n	23ffa0c <_strtol_l.constprop.0+0xc0>
 23ff9ce:	45b1      	cmp	r9, r6
 23ff9d0:	d31c      	bcc.n	23ffa0c <_strtol_l.constprop.0+0xc0>
 23ff9d2:	d101      	bne.n	23ff9d8 <_strtol_l.constprop.0+0x8c>
 23ff9d4:	45a2      	cmp	sl, r4
 23ff9d6:	db19      	blt.n	23ffa0c <_strtol_l.constprop.0+0xc0>
 23ff9d8:	fb06 4603 	mla	r6, r6, r3, r4
 23ff9dc:	f04f 0c01 	mov.w	ip, #1
 23ff9e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff9e4:	e7e8      	b.n	23ff9b8 <_strtol_l.constprop.0+0x6c>
 23ff9e6:	2c2b      	cmp	r4, #43	; 0x2b
 23ff9e8:	bf04      	itt	eq
 23ff9ea:	782c      	ldrbeq	r4, [r5, #0]
 23ff9ec:	1cb5      	addeq	r5, r6, #2
 23ff9ee:	e7ca      	b.n	23ff986 <_strtol_l.constprop.0+0x3a>
 23ff9f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff9f4:	f1be 0f19 	cmp.w	lr, #25
 23ff9f8:	d801      	bhi.n	23ff9fe <_strtol_l.constprop.0+0xb2>
 23ff9fa:	3c37      	subs	r4, #55	; 0x37
 23ff9fc:	e7e2      	b.n	23ff9c4 <_strtol_l.constprop.0+0x78>
 23ff9fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ffa02:	f1be 0f19 	cmp.w	lr, #25
 23ffa06:	d804      	bhi.n	23ffa12 <_strtol_l.constprop.0+0xc6>
 23ffa08:	3c57      	subs	r4, #87	; 0x57
 23ffa0a:	e7db      	b.n	23ff9c4 <_strtol_l.constprop.0+0x78>
 23ffa0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ffa10:	e7e6      	b.n	23ff9e0 <_strtol_l.constprop.0+0x94>
 23ffa12:	f1bc 0f00 	cmp.w	ip, #0
 23ffa16:	da05      	bge.n	23ffa24 <_strtol_l.constprop.0+0xd8>
 23ffa18:	2322      	movs	r3, #34	; 0x22
 23ffa1a:	4646      	mov	r6, r8
 23ffa1c:	6003      	str	r3, [r0, #0]
 23ffa1e:	b942      	cbnz	r2, 23ffa32 <_strtol_l.constprop.0+0xe6>
 23ffa20:	4630      	mov	r0, r6
 23ffa22:	e79e      	b.n	23ff962 <_strtol_l.constprop.0+0x16>
 23ffa24:	b107      	cbz	r7, 23ffa28 <_strtol_l.constprop.0+0xdc>
 23ffa26:	4276      	negs	r6, r6
 23ffa28:	2a00      	cmp	r2, #0
 23ffa2a:	d0f9      	beq.n	23ffa20 <_strtol_l.constprop.0+0xd4>
 23ffa2c:	f1bc 0f00 	cmp.w	ip, #0
 23ffa30:	d000      	beq.n	23ffa34 <_strtol_l.constprop.0+0xe8>
 23ffa32:	1e69      	subs	r1, r5, #1
 23ffa34:	6011      	str	r1, [r2, #0]
 23ffa36:	e7f3      	b.n	23ffa20 <_strtol_l.constprop.0+0xd4>
 23ffa38:	2430      	movs	r4, #48	; 0x30
 23ffa3a:	2b00      	cmp	r3, #0
 23ffa3c:	d1b1      	bne.n	23ff9a2 <_strtol_l.constprop.0+0x56>
 23ffa3e:	2308      	movs	r3, #8
 23ffa40:	e7af      	b.n	23ff9a2 <_strtol_l.constprop.0+0x56>
 23ffa42:	2c30      	cmp	r4, #48	; 0x30
 23ffa44:	d0a5      	beq.n	23ff992 <_strtol_l.constprop.0+0x46>
 23ffa46:	230a      	movs	r3, #10
 23ffa48:	e7ab      	b.n	23ff9a2 <_strtol_l.constprop.0+0x56>
 23ffa4a:	bf00      	nop
 23ffa4c:	023ffed2 	.word	0x023ffed2

023ffa50 <strtol>:
 23ffa50:	4613      	mov	r3, r2
 23ffa52:	460a      	mov	r2, r1
 23ffa54:	4601      	mov	r1, r0
 23ffa56:	4802      	ldr	r0, [pc, #8]	; (23ffa60 <strtol+0x10>)
 23ffa58:	6800      	ldr	r0, [r0, #0]
 23ffa5a:	f7ff bf77 	b.w	23ff94c <_strtol_l.constprop.0>
 23ffa5e:	bf00      	nop
 23ffa60:	1007ad74 	.word	0x1007ad74

023ffa64 <__register_exitproc>:
 23ffa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffa68:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffb28 <__register_exitproc+0xc4>
 23ffa6c:	4606      	mov	r6, r0
 23ffa6e:	461f      	mov	r7, r3
 23ffa70:	460d      	mov	r5, r1
 23ffa72:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa76:	4691      	mov	r9, r2
 23ffa78:	f000 f858 	bl	23ffb2c <__retarget_lock_acquire_recursive>
 23ffa7c:	4b26      	ldr	r3, [pc, #152]	; (23ffb18 <__register_exitproc+0xb4>)
 23ffa7e:	681c      	ldr	r4, [r3, #0]
 23ffa80:	b934      	cbnz	r4, 23ffa90 <__register_exitproc+0x2c>
 23ffa82:	4c26      	ldr	r4, [pc, #152]	; (23ffb1c <__register_exitproc+0xb8>)
 23ffa84:	601c      	str	r4, [r3, #0]
 23ffa86:	4b26      	ldr	r3, [pc, #152]	; (23ffb20 <__register_exitproc+0xbc>)
 23ffa88:	b113      	cbz	r3, 23ffa90 <__register_exitproc+0x2c>
 23ffa8a:	681b      	ldr	r3, [r3, #0]
 23ffa8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffa90:	6863      	ldr	r3, [r4, #4]
 23ffa92:	2b1f      	cmp	r3, #31
 23ffa94:	dd07      	ble.n	23ffaa6 <__register_exitproc+0x42>
 23ffa96:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa9a:	f000 f849 	bl	23ffb30 <__retarget_lock_release_recursive>
 23ffa9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffaa6:	b35e      	cbz	r6, 23ffb00 <__register_exitproc+0x9c>
 23ffaa8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffaac:	b988      	cbnz	r0, 23ffad2 <__register_exitproc+0x6e>
 23ffaae:	4b1d      	ldr	r3, [pc, #116]	; (23ffb24 <__register_exitproc+0xc0>)
 23ffab0:	b923      	cbnz	r3, 23ffabc <__register_exitproc+0x58>
 23ffab2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffab6:	f000 f83a 	bl	23ffb2e <__retarget_lock_release>
 23ffaba:	e7f0      	b.n	23ffa9e <__register_exitproc+0x3a>
 23ffabc:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffac0:	f7fd fd8a 	bl	23fd5d8 <malloc>
 23ffac4:	2800      	cmp	r0, #0
 23ffac6:	d0f4      	beq.n	23ffab2 <__register_exitproc+0x4e>
 23ffac8:	2300      	movs	r3, #0
 23ffaca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fface:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffad2:	6863      	ldr	r3, [r4, #4]
 23ffad4:	2201      	movs	r2, #1
 23ffad6:	2e02      	cmp	r6, #2
 23ffad8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffadc:	fa02 f203 	lsl.w	r2, r2, r3
 23ffae0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffae4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffae8:	ea43 0302 	orr.w	r3, r3, r2
 23ffaec:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffaf0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffaf4:	bf02      	ittt	eq
 23ffaf6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffafa:	4313      	orreq	r3, r2
 23ffafc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffb00:	6863      	ldr	r3, [r4, #4]
 23ffb02:	f8d8 0000 	ldr.w	r0, [r8]
 23ffb06:	1c5a      	adds	r2, r3, #1
 23ffb08:	3302      	adds	r3, #2
 23ffb0a:	6062      	str	r2, [r4, #4]
 23ffb0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffb10:	f000 f80e 	bl	23ffb30 <__retarget_lock_release_recursive>
 23ffb14:	2000      	movs	r0, #0
 23ffb16:	e7c4      	b.n	23ffaa2 <__register_exitproc+0x3e>
 23ffb18:	1007afe0 	.word	0x1007afe0
 23ffb1c:	1007af54 	.word	0x1007af54
 23ffb20:	00000000 	.word	0x00000000
 23ffb24:	023fd5d9 	.word	0x023fd5d9
 23ffb28:	1007add8 	.word	0x1007add8

023ffb2c <__retarget_lock_acquire_recursive>:
 23ffb2c:	4770      	bx	lr

023ffb2e <__retarget_lock_release>:
 23ffb2e:	4770      	bx	lr

023ffb30 <__retarget_lock_release_recursive>:
 23ffb30:	4770      	bx	lr
	...

023ffb34 <dynalib_user>:
 23ffb34:	c349 023f c371 023f c375 023f 0000 0000     I.?.q.?.u.?.....
 23ffb44:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffb54:	7574 6c61 4300 7275 6572 746e 7620 6c61     tual.Current val
 23ffb64:	6575 4120 3a20 2520 3630 342e 2066 000a     ue A : %06.4f ..
 23ffb74:	6554 706d 7265 7461 7275 2065 b0c2 2043     Temperature ..C 
 23ffb84:	203a 2e25 6632 0a20 5400 6d65 6570 6172     : %.2f ..Tempera
 23ffb94:	7574 6572 c220 46b0 3a20 2520 322e 2066     ture ..F : %.2f 
 23ffba4:	000a 6552 616c 6974 6576 4820 6d75 6469     ..Relative Humid
 23ffbb4:	7469 2079 203a 2e25 6632 0a20 0000 0000     ity : %.2f .....

023ffbc4 <_ZTVN5spark10LogHandlerE>:
	...
 23ffbd4:	c391 023f c3b9 023f                         ..?...?.

023ffbdc <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffbe4:	c3bd 023f c3f1 023f e991 023f eb39 023f     ..?...?...?.9.?.

023ffbf4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffbfc:	d7a3 023f d799 023f d78f 023f d785 023f     ..?...?...?...?.
 23ffc0c:	d779 023f d76d 023f ed25 023f ed2d 023f     y.?.m.?.%.?.-.?.
 23ffc1c:	d761 023f d759 023f d74f 023f d745 023f     a.?.Y.?.O.?.E.?.
 23ffc2c:	ed5d 023f                                   ].?.

023ffc30 <_ZTV7TwoWire>:
	...
 23ffc38:	d7c1 023f d80b 023f d7e3 023f d7c3 023f     ..?...?...?...?.
 23ffc48:	d7eb 023f d7f3 023f d7fb 023f d803 023f     ..?...?...?...?.

023ffc58 <_ZTV9IPAddress>:
	...
 23ffc60:	d8db 023f d8cb 023f d8cd 023f 6425 2500     ..?...?...?.%d.%
 23ffc70:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 23ffc80:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
 23ffc90:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 23ffca0:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
 23ffcb0:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 23ffcc0:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 23ffcd0:	0a0d 6d00 6600 6c00 006e 6e66 7400 6300     ...m.f.ln.fn.t.c
 23ffce0:	646f 0065 6564 6174 6c69 0000               ode.detail..

023ffcec <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffcf4:	dd89 023f ddaf 023f dd6d 023f d9eb 023f     ..?...?.m.?...?.

023ffd04 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffd0c:	e23d 023f e255 023f e991 023f eb39 023f     =.?.U.?...?.9.?.

023ffd1c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffd24:	e269 023f e27d 023f eb71 023f dd75 023f     i.?.}.?.q.?.u.?.

023ffd34 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffd3c:	dd87 023f ddbd 023f e8f5 023f dd77 023f     ..?...?...?.w.?.

023ffd4c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffd54:	dd85 023f ddcb 023f e1a5 023f dded 023f     ..?...?...?...?.

023ffd64 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd6c:	ece5 023f ecef 023f ecf9 023f ed03 023f     ..?...?...?...?.
 23ffd7c:	ed0d 023f ed19 023f ed25 023f ed2d 023f     ..?...?.%.?.-.?.
 23ffd8c:	ed35 023f ed41 023f ed49 023f ed53 023f     5.?.A.?.I.?.S.?.
 23ffd9c:	ed5d 023f                                   ].?.

023ffda0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffda0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffdb0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffdc0:	6d69 0065                                   ime.

023ffdc4 <_ZTV11USARTSerial>:
	...
 23ffdcc:	f175 023f f1e1 023f f1b9 023f ee49 023f     u.?...?...?.I.?.
 23ffddc:	f189 023f f1a5 023f f197 023f f1b3 023f     ..?...?...?...?.
 23ffdec:	f177 023f f17b 023f                         w.?.{.?.

023ffdf4 <_ZTV9USBSerial>:
	...
 23ffdfc:	f239 023f f2a1 023f f277 023f ee49 023f     9.?...?.w.?.I.?.
 23ffe0c:	f269 023f f23b 023f f24b 023f f29b 023f     i.?.;.?.K.?...?.
 23ffe1c:	f25b 023f f233 023f                         [.?.3.?.

023ffe24 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe2c:	f39f 023f f395 023f f38b 023f f341 023f     ..?...?...?.A.?.
 23ffe3c:	f37f 023f f373 023f ed25 023f ed2d 023f     ..?.s.?.%.?.-.?.
 23ffe4c:	f367 023f f35f 023f f355 023f f34b 023f     g.?._.?.U.?.K.?.
 23ffe5c:	ed5d 023f                                   ].?.

023ffe60 <_ZSt7nothrow>:
 23ffe60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffe80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffe90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffea0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffeb0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffec0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023ffed1 <_ctype_>:
 23ffed1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffee1:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffef1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23fff01:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff11:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff21:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff31:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff41:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff51:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffd2 <link_const_data_end>:
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fc6a9 	.word	0x023fc6a9
 23fffd8:	023fd701 	.word	0x023fd701
 23fffdc:	023fd7ad 	.word	0x023fd7ad
 23fffe0:	023fe981 	.word	0x023fe981
 23fffe4:	023fee35 	.word	0x023fee35
 23fffe8:	023feedd 	.word	0x023feedd
 23fffec:	023ff13d 	.word	0x023ff13d
 23ffff0:	023ff161 	.word	0x023ff161
 23ffff4:	023ff3a9 	.word	0x023ff3a9
