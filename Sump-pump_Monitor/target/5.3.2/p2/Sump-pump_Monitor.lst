
/Users/Erik-Home/Documents/GitHub/Photon2-Project_Erik/Sump-pump_Monitor/target/5.3.2/p2/Sump-pump_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa3f8  085fa088  0000a3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005bf8  023fa400  085fa090  0000a400  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad08  085ffc88  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000268  1007ad80  1007ad80  0002ad80  2**3
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffd00  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000002b4  085ffd04  085ffd04  0001fd04  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fd04  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00174109  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00019abd  00000000  00000000  00194109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00045254  00000000  00000000  001adbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000033f8  00000000  00000000  001f2e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000c468  00000000  00000000  001f6212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002fca3  00000000  00000000  0020267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00056186  00000000  00000000  0023231d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf61e  00000000  00000000  002884a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009780  00000000  00000000  00357ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	480e      	ldr	r0, [pc, #56]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa01a:	490f      	ldr	r1, [pc, #60]	; (85fa058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a0e      	ldr	r2, [pc, #56]	; (85fa05c <module_user_pre_init+0x44>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b0d      	ldr	r3, [pc, #52]	; (85fa060 <module_user_pre_init+0x48>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	480d      	ldr	r0, [pc, #52]	; (85fa064 <module_user_pre_init+0x4c>)
 85fa030:	4a0d      	ldr	r2, [pc, #52]	; (85fa068 <module_user_pre_init+0x50>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b0d      	ldr	r3, [pc, #52]	; (85fa06c <module_user_pre_init+0x54>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa03a:	480d      	ldr	r0, [pc, #52]	; (85fa070 <module_user_pre_init+0x58>)
 85fa03c:	490d      	ldr	r1, [pc, #52]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a0d      	ldr	r2, [pc, #52]	; (85fa078 <module_user_pre_init+0x60>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa048:	4b05      	ldr	r3, [pc, #20]	; (85fa060 <module_user_pre_init+0x48>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa04e:	4801      	ldr	r0, [pc, #4]	; (85fa054 <module_user_pre_init+0x3c>)
 85fa050:	bd08      	pop	{r3, pc}
 85fa052:	bf00      	nop
 85fa054:	1007ad08 	.word	0x1007ad08
 85fa058:	085ffc88 	.word	0x085ffc88
 85fa05c:	1007ad80 	.word	0x1007ad80
 85fa060:	10110d2d 	.word	0x10110d2d
 85fa064:	1007ad80 	.word	0x1007ad80
 85fa068:	1007afe8 	.word	0x1007afe8
 85fa06c:	10110ea1 	.word	0x10110ea1
 85fa070:	023fa3f8 	.word	0x023fa3f8
 85fa074:	085fa088 	.word	0x085fa088
 85fa078:	023ffff8 	.word	0x023ffff8

085fa07c <dynalib_preinit>:
 85fa07c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa400 <__aeabi_drsub>:
 23fa400:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fa404:	e002      	b.n	23fa40c <__adddf3>
 23fa406:	bf00      	nop

023fa408 <__aeabi_dsub>:
 23fa408:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fa40c <__adddf3>:
 23fa40c:	b530      	push	{r4, r5, lr}
 23fa40e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fa412:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fa416:	ea94 0f05 	teq	r4, r5
 23fa41a:	bf08      	it	eq
 23fa41c:	ea90 0f02 	teqeq	r0, r2
 23fa420:	bf1f      	itttt	ne
 23fa422:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fa426:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fa42a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fa42e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa432:	f000 80e2 	beq.w	23fa5fa <__adddf3+0x1ee>
 23fa436:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fa43a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fa43e:	bfb8      	it	lt
 23fa440:	426d      	neglt	r5, r5
 23fa442:	dd0c      	ble.n	23fa45e <__adddf3+0x52>
 23fa444:	442c      	add	r4, r5
 23fa446:	ea80 0202 	eor.w	r2, r0, r2
 23fa44a:	ea81 0303 	eor.w	r3, r1, r3
 23fa44e:	ea82 0000 	eor.w	r0, r2, r0
 23fa452:	ea83 0101 	eor.w	r1, r3, r1
 23fa456:	ea80 0202 	eor.w	r2, r0, r2
 23fa45a:	ea81 0303 	eor.w	r3, r1, r3
 23fa45e:	2d36      	cmp	r5, #54	; 0x36
 23fa460:	bf88      	it	hi
 23fa462:	bd30      	pophi	{r4, r5, pc}
 23fa464:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa468:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa46c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fa470:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fa474:	d002      	beq.n	23fa47c <__adddf3+0x70>
 23fa476:	4240      	negs	r0, r0
 23fa478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa47c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fa480:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa484:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fa488:	d002      	beq.n	23fa490 <__adddf3+0x84>
 23fa48a:	4252      	negs	r2, r2
 23fa48c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fa490:	ea94 0f05 	teq	r4, r5
 23fa494:	f000 80a7 	beq.w	23fa5e6 <__adddf3+0x1da>
 23fa498:	f1a4 0401 	sub.w	r4, r4, #1
 23fa49c:	f1d5 0e20 	rsbs	lr, r5, #32
 23fa4a0:	db0d      	blt.n	23fa4be <__adddf3+0xb2>
 23fa4a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fa4a6:	fa22 f205 	lsr.w	r2, r2, r5
 23fa4aa:	1880      	adds	r0, r0, r2
 23fa4ac:	f141 0100 	adc.w	r1, r1, #0
 23fa4b0:	fa03 f20e 	lsl.w	r2, r3, lr
 23fa4b4:	1880      	adds	r0, r0, r2
 23fa4b6:	fa43 f305 	asr.w	r3, r3, r5
 23fa4ba:	4159      	adcs	r1, r3
 23fa4bc:	e00e      	b.n	23fa4dc <__adddf3+0xd0>
 23fa4be:	f1a5 0520 	sub.w	r5, r5, #32
 23fa4c2:	f10e 0e20 	add.w	lr, lr, #32
 23fa4c6:	2a01      	cmp	r2, #1
 23fa4c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fa4cc:	bf28      	it	cs
 23fa4ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fa4d2:	fa43 f305 	asr.w	r3, r3, r5
 23fa4d6:	18c0      	adds	r0, r0, r3
 23fa4d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fa4dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa4e0:	d507      	bpl.n	23fa4f2 <__adddf3+0xe6>
 23fa4e2:	f04f 0e00 	mov.w	lr, #0
 23fa4e6:	f1dc 0c00 	rsbs	ip, ip, #0
 23fa4ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fa4ee:	eb6e 0101 	sbc.w	r1, lr, r1
 23fa4f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fa4f6:	d31b      	bcc.n	23fa530 <__adddf3+0x124>
 23fa4f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fa4fc:	d30c      	bcc.n	23fa518 <__adddf3+0x10c>
 23fa4fe:	0849      	lsrs	r1, r1, #1
 23fa500:	ea5f 0030 	movs.w	r0, r0, rrx
 23fa504:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fa508:	f104 0401 	add.w	r4, r4, #1
 23fa50c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fa510:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fa514:	f080 809a 	bcs.w	23fa64c <__adddf3+0x240>
 23fa518:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fa51c:	bf08      	it	eq
 23fa51e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fa522:	f150 0000 	adcs.w	r0, r0, #0
 23fa526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa52a:	ea41 0105 	orr.w	r1, r1, r5
 23fa52e:	bd30      	pop	{r4, r5, pc}
 23fa530:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fa534:	4140      	adcs	r0, r0
 23fa536:	eb41 0101 	adc.w	r1, r1, r1
 23fa53a:	3c01      	subs	r4, #1
 23fa53c:	bf28      	it	cs
 23fa53e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fa542:	d2e9      	bcs.n	23fa518 <__adddf3+0x10c>
 23fa544:	f091 0f00 	teq	r1, #0
 23fa548:	bf04      	itt	eq
 23fa54a:	4601      	moveq	r1, r0
 23fa54c:	2000      	moveq	r0, #0
 23fa54e:	fab1 f381 	clz	r3, r1
 23fa552:	bf08      	it	eq
 23fa554:	3320      	addeq	r3, #32
 23fa556:	f1a3 030b 	sub.w	r3, r3, #11
 23fa55a:	f1b3 0220 	subs.w	r2, r3, #32
 23fa55e:	da0c      	bge.n	23fa57a <__adddf3+0x16e>
 23fa560:	320c      	adds	r2, #12
 23fa562:	dd08      	ble.n	23fa576 <__adddf3+0x16a>
 23fa564:	f102 0c14 	add.w	ip, r2, #20
 23fa568:	f1c2 020c 	rsb	r2, r2, #12
 23fa56c:	fa01 f00c 	lsl.w	r0, r1, ip
 23fa570:	fa21 f102 	lsr.w	r1, r1, r2
 23fa574:	e00c      	b.n	23fa590 <__adddf3+0x184>
 23fa576:	f102 0214 	add.w	r2, r2, #20
 23fa57a:	bfd8      	it	le
 23fa57c:	f1c2 0c20 	rsble	ip, r2, #32
 23fa580:	fa01 f102 	lsl.w	r1, r1, r2
 23fa584:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fa588:	bfdc      	itt	le
 23fa58a:	ea41 010c 	orrle.w	r1, r1, ip
 23fa58e:	4090      	lslle	r0, r2
 23fa590:	1ae4      	subs	r4, r4, r3
 23fa592:	bfa2      	ittt	ge
 23fa594:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fa598:	4329      	orrge	r1, r5
 23fa59a:	bd30      	popge	{r4, r5, pc}
 23fa59c:	ea6f 0404 	mvn.w	r4, r4
 23fa5a0:	3c1f      	subs	r4, #31
 23fa5a2:	da1c      	bge.n	23fa5de <__adddf3+0x1d2>
 23fa5a4:	340c      	adds	r4, #12
 23fa5a6:	dc0e      	bgt.n	23fa5c6 <__adddf3+0x1ba>
 23fa5a8:	f104 0414 	add.w	r4, r4, #20
 23fa5ac:	f1c4 0220 	rsb	r2, r4, #32
 23fa5b0:	fa20 f004 	lsr.w	r0, r0, r4
 23fa5b4:	fa01 f302 	lsl.w	r3, r1, r2
 23fa5b8:	ea40 0003 	orr.w	r0, r0, r3
 23fa5bc:	fa21 f304 	lsr.w	r3, r1, r4
 23fa5c0:	ea45 0103 	orr.w	r1, r5, r3
 23fa5c4:	bd30      	pop	{r4, r5, pc}
 23fa5c6:	f1c4 040c 	rsb	r4, r4, #12
 23fa5ca:	f1c4 0220 	rsb	r2, r4, #32
 23fa5ce:	fa20 f002 	lsr.w	r0, r0, r2
 23fa5d2:	fa01 f304 	lsl.w	r3, r1, r4
 23fa5d6:	ea40 0003 	orr.w	r0, r0, r3
 23fa5da:	4629      	mov	r1, r5
 23fa5dc:	bd30      	pop	{r4, r5, pc}
 23fa5de:	fa21 f004 	lsr.w	r0, r1, r4
 23fa5e2:	4629      	mov	r1, r5
 23fa5e4:	bd30      	pop	{r4, r5, pc}
 23fa5e6:	f094 0f00 	teq	r4, #0
 23fa5ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fa5ee:	bf06      	itte	eq
 23fa5f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fa5f4:	3401      	addeq	r4, #1
 23fa5f6:	3d01      	subne	r5, #1
 23fa5f8:	e74e      	b.n	23fa498 <__adddf3+0x8c>
 23fa5fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fa5fe:	bf18      	it	ne
 23fa600:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fa604:	d029      	beq.n	23fa65a <__adddf3+0x24e>
 23fa606:	ea94 0f05 	teq	r4, r5
 23fa60a:	bf08      	it	eq
 23fa60c:	ea90 0f02 	teqeq	r0, r2
 23fa610:	d005      	beq.n	23fa61e <__adddf3+0x212>
 23fa612:	ea54 0c00 	orrs.w	ip, r4, r0
 23fa616:	bf04      	itt	eq
 23fa618:	4619      	moveq	r1, r3
 23fa61a:	4610      	moveq	r0, r2
 23fa61c:	bd30      	pop	{r4, r5, pc}
 23fa61e:	ea91 0f03 	teq	r1, r3
 23fa622:	bf1e      	ittt	ne
 23fa624:	2100      	movne	r1, #0
 23fa626:	2000      	movne	r0, #0
 23fa628:	bd30      	popne	{r4, r5, pc}
 23fa62a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fa62e:	d105      	bne.n	23fa63c <__adddf3+0x230>
 23fa630:	0040      	lsls	r0, r0, #1
 23fa632:	4149      	adcs	r1, r1
 23fa634:	bf28      	it	cs
 23fa636:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fa63a:	bd30      	pop	{r4, r5, pc}
 23fa63c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fa640:	bf3c      	itt	cc
 23fa642:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fa646:	bd30      	popcc	{r4, r5, pc}
 23fa648:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa64c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fa650:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fa654:	f04f 0000 	mov.w	r0, #0
 23fa658:	bd30      	pop	{r4, r5, pc}
 23fa65a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fa65e:	bf1a      	itte	ne
 23fa660:	4619      	movne	r1, r3
 23fa662:	4610      	movne	r0, r2
 23fa664:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fa668:	bf1c      	itt	ne
 23fa66a:	460b      	movne	r3, r1
 23fa66c:	4602      	movne	r2, r0
 23fa66e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fa672:	bf06      	itte	eq
 23fa674:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fa678:	ea91 0f03 	teqeq	r1, r3
 23fa67c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fa680:	bd30      	pop	{r4, r5, pc}
 23fa682:	bf00      	nop

023fa684 <__aeabi_ui2d>:
 23fa684:	f090 0f00 	teq	r0, #0
 23fa688:	bf04      	itt	eq
 23fa68a:	2100      	moveq	r1, #0
 23fa68c:	4770      	bxeq	lr
 23fa68e:	b530      	push	{r4, r5, lr}
 23fa690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa698:	f04f 0500 	mov.w	r5, #0
 23fa69c:	f04f 0100 	mov.w	r1, #0
 23fa6a0:	e750      	b.n	23fa544 <__adddf3+0x138>
 23fa6a2:	bf00      	nop

023fa6a4 <__aeabi_i2d>:
 23fa6a4:	f090 0f00 	teq	r0, #0
 23fa6a8:	bf04      	itt	eq
 23fa6aa:	2100      	moveq	r1, #0
 23fa6ac:	4770      	bxeq	lr
 23fa6ae:	b530      	push	{r4, r5, lr}
 23fa6b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa6b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa6b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fa6bc:	bf48      	it	mi
 23fa6be:	4240      	negmi	r0, r0
 23fa6c0:	f04f 0100 	mov.w	r1, #0
 23fa6c4:	e73e      	b.n	23fa544 <__adddf3+0x138>
 23fa6c6:	bf00      	nop

023fa6c8 <__aeabi_f2d>:
 23fa6c8:	0042      	lsls	r2, r0, #1
 23fa6ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fa6ce:	ea4f 0131 	mov.w	r1, r1, rrx
 23fa6d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fa6d6:	bf1f      	itttt	ne
 23fa6d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fa6dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fa6e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fa6e4:	4770      	bxne	lr
 23fa6e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fa6ea:	bf08      	it	eq
 23fa6ec:	4770      	bxeq	lr
 23fa6ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fa6f2:	bf04      	itt	eq
 23fa6f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fa6f8:	4770      	bxeq	lr
 23fa6fa:	b530      	push	{r4, r5, lr}
 23fa6fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fa700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fa704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fa708:	e71c      	b.n	23fa544 <__adddf3+0x138>
 23fa70a:	bf00      	nop

023fa70c <__aeabi_ul2d>:
 23fa70c:	ea50 0201 	orrs.w	r2, r0, r1
 23fa710:	bf08      	it	eq
 23fa712:	4770      	bxeq	lr
 23fa714:	b530      	push	{r4, r5, lr}
 23fa716:	f04f 0500 	mov.w	r5, #0
 23fa71a:	e00a      	b.n	23fa732 <__aeabi_l2d+0x16>

023fa71c <__aeabi_l2d>:
 23fa71c:	ea50 0201 	orrs.w	r2, r0, r1
 23fa720:	bf08      	it	eq
 23fa722:	4770      	bxeq	lr
 23fa724:	b530      	push	{r4, r5, lr}
 23fa726:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fa72a:	d502      	bpl.n	23fa732 <__aeabi_l2d+0x16>
 23fa72c:	4240      	negs	r0, r0
 23fa72e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fa732:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fa736:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fa73a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fa73e:	f43f aed8 	beq.w	23fa4f2 <__adddf3+0xe6>
 23fa742:	f04f 0203 	mov.w	r2, #3
 23fa746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fa74a:	bf18      	it	ne
 23fa74c:	3203      	addne	r2, #3
 23fa74e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fa752:	bf18      	it	ne
 23fa754:	3203      	addne	r2, #3
 23fa756:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fa75a:	f1c2 0320 	rsb	r3, r2, #32
 23fa75e:	fa00 fc03 	lsl.w	ip, r0, r3
 23fa762:	fa20 f002 	lsr.w	r0, r0, r2
 23fa766:	fa01 fe03 	lsl.w	lr, r1, r3
 23fa76a:	ea40 000e 	orr.w	r0, r0, lr
 23fa76e:	fa21 f102 	lsr.w	r1, r1, r2
 23fa772:	4414      	add	r4, r2
 23fa774:	e6bd      	b.n	23fa4f2 <__adddf3+0xe6>
 23fa776:	bf00      	nop

023fa778 <__aeabi_dmul>:
 23fa778:	b570      	push	{r4, r5, r6, lr}
 23fa77a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fa77e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fa782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fa786:	bf1d      	ittte	ne
 23fa788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fa78c:	ea94 0f0c 	teqne	r4, ip
 23fa790:	ea95 0f0c 	teqne	r5, ip
 23fa794:	f000 f8de 	bleq	23fa954 <__aeabi_dmul+0x1dc>
 23fa798:	442c      	add	r4, r5
 23fa79a:	ea81 0603 	eor.w	r6, r1, r3
 23fa79e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fa7a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fa7a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fa7aa:	bf18      	it	ne
 23fa7ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fa7b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fa7b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fa7b8:	d038      	beq.n	23fa82c <__aeabi_dmul+0xb4>
 23fa7ba:	fba0 ce02 	umull	ip, lr, r0, r2
 23fa7be:	f04f 0500 	mov.w	r5, #0
 23fa7c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fa7c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fa7ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fa7ce:	f04f 0600 	mov.w	r6, #0
 23fa7d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fa7d6:	f09c 0f00 	teq	ip, #0
 23fa7da:	bf18      	it	ne
 23fa7dc:	f04e 0e01 	orrne.w	lr, lr, #1
 23fa7e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fa7e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fa7e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fa7ec:	d204      	bcs.n	23fa7f8 <__aeabi_dmul+0x80>
 23fa7ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fa7f2:	416d      	adcs	r5, r5
 23fa7f4:	eb46 0606 	adc.w	r6, r6, r6
 23fa7f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fa7fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fa800:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fa804:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fa808:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fa80c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fa810:	bf88      	it	hi
 23fa812:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fa816:	d81e      	bhi.n	23fa856 <__aeabi_dmul+0xde>
 23fa818:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fa81c:	bf08      	it	eq
 23fa81e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fa822:	f150 0000 	adcs.w	r0, r0, #0
 23fa826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa82a:	bd70      	pop	{r4, r5, r6, pc}
 23fa82c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fa830:	ea46 0101 	orr.w	r1, r6, r1
 23fa834:	ea40 0002 	orr.w	r0, r0, r2
 23fa838:	ea81 0103 	eor.w	r1, r1, r3
 23fa83c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fa840:	bfc2      	ittt	gt
 23fa842:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fa846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fa84a:	bd70      	popgt	{r4, r5, r6, pc}
 23fa84c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fa850:	f04f 0e00 	mov.w	lr, #0
 23fa854:	3c01      	subs	r4, #1
 23fa856:	f300 80ab 	bgt.w	23fa9b0 <__aeabi_dmul+0x238>
 23fa85a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fa85e:	bfde      	ittt	le
 23fa860:	2000      	movle	r0, #0
 23fa862:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fa866:	bd70      	pople	{r4, r5, r6, pc}
 23fa868:	f1c4 0400 	rsb	r4, r4, #0
 23fa86c:	3c20      	subs	r4, #32
 23fa86e:	da35      	bge.n	23fa8dc <__aeabi_dmul+0x164>
 23fa870:	340c      	adds	r4, #12
 23fa872:	dc1b      	bgt.n	23fa8ac <__aeabi_dmul+0x134>
 23fa874:	f104 0414 	add.w	r4, r4, #20
 23fa878:	f1c4 0520 	rsb	r5, r4, #32
 23fa87c:	fa00 f305 	lsl.w	r3, r0, r5
 23fa880:	fa20 f004 	lsr.w	r0, r0, r4
 23fa884:	fa01 f205 	lsl.w	r2, r1, r5
 23fa888:	ea40 0002 	orr.w	r0, r0, r2
 23fa88c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fa890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fa894:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fa898:	fa21 f604 	lsr.w	r6, r1, r4
 23fa89c:	eb42 0106 	adc.w	r1, r2, r6
 23fa8a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fa8a4:	bf08      	it	eq
 23fa8a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fa8aa:	bd70      	pop	{r4, r5, r6, pc}
 23fa8ac:	f1c4 040c 	rsb	r4, r4, #12
 23fa8b0:	f1c4 0520 	rsb	r5, r4, #32
 23fa8b4:	fa00 f304 	lsl.w	r3, r0, r4
 23fa8b8:	fa20 f005 	lsr.w	r0, r0, r5
 23fa8bc:	fa01 f204 	lsl.w	r2, r1, r4
 23fa8c0:	ea40 0002 	orr.w	r0, r0, r2
 23fa8c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa8c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fa8cc:	f141 0100 	adc.w	r1, r1, #0
 23fa8d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fa8d4:	bf08      	it	eq
 23fa8d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fa8da:	bd70      	pop	{r4, r5, r6, pc}
 23fa8dc:	f1c4 0520 	rsb	r5, r4, #32
 23fa8e0:	fa00 f205 	lsl.w	r2, r0, r5
 23fa8e4:	ea4e 0e02 	orr.w	lr, lr, r2
 23fa8e8:	fa20 f304 	lsr.w	r3, r0, r4
 23fa8ec:	fa01 f205 	lsl.w	r2, r1, r5
 23fa8f0:	ea43 0302 	orr.w	r3, r3, r2
 23fa8f4:	fa21 f004 	lsr.w	r0, r1, r4
 23fa8f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa8fc:	fa21 f204 	lsr.w	r2, r1, r4
 23fa900:	ea20 0002 	bic.w	r0, r0, r2
 23fa904:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fa908:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fa90c:	bf08      	it	eq
 23fa90e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fa912:	bd70      	pop	{r4, r5, r6, pc}
 23fa914:	f094 0f00 	teq	r4, #0
 23fa918:	d10f      	bne.n	23fa93a <__aeabi_dmul+0x1c2>
 23fa91a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fa91e:	0040      	lsls	r0, r0, #1
 23fa920:	eb41 0101 	adc.w	r1, r1, r1
 23fa924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fa928:	bf08      	it	eq
 23fa92a:	3c01      	subeq	r4, #1
 23fa92c:	d0f7      	beq.n	23fa91e <__aeabi_dmul+0x1a6>
 23fa92e:	ea41 0106 	orr.w	r1, r1, r6
 23fa932:	f095 0f00 	teq	r5, #0
 23fa936:	bf18      	it	ne
 23fa938:	4770      	bxne	lr
 23fa93a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fa93e:	0052      	lsls	r2, r2, #1
 23fa940:	eb43 0303 	adc.w	r3, r3, r3
 23fa944:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fa948:	bf08      	it	eq
 23fa94a:	3d01      	subeq	r5, #1
 23fa94c:	d0f7      	beq.n	23fa93e <__aeabi_dmul+0x1c6>
 23fa94e:	ea43 0306 	orr.w	r3, r3, r6
 23fa952:	4770      	bx	lr
 23fa954:	ea94 0f0c 	teq	r4, ip
 23fa958:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fa95c:	bf18      	it	ne
 23fa95e:	ea95 0f0c 	teqne	r5, ip
 23fa962:	d00c      	beq.n	23fa97e <__aeabi_dmul+0x206>
 23fa964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fa968:	bf18      	it	ne
 23fa96a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa96e:	d1d1      	bne.n	23fa914 <__aeabi_dmul+0x19c>
 23fa970:	ea81 0103 	eor.w	r1, r1, r3
 23fa974:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa978:	f04f 0000 	mov.w	r0, #0
 23fa97c:	bd70      	pop	{r4, r5, r6, pc}
 23fa97e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fa982:	bf06      	itte	eq
 23fa984:	4610      	moveq	r0, r2
 23fa986:	4619      	moveq	r1, r3
 23fa988:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa98c:	d019      	beq.n	23fa9c2 <__aeabi_dmul+0x24a>
 23fa98e:	ea94 0f0c 	teq	r4, ip
 23fa992:	d102      	bne.n	23fa99a <__aeabi_dmul+0x222>
 23fa994:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fa998:	d113      	bne.n	23fa9c2 <__aeabi_dmul+0x24a>
 23fa99a:	ea95 0f0c 	teq	r5, ip
 23fa99e:	d105      	bne.n	23fa9ac <__aeabi_dmul+0x234>
 23fa9a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fa9a4:	bf1c      	itt	ne
 23fa9a6:	4610      	movne	r0, r2
 23fa9a8:	4619      	movne	r1, r3
 23fa9aa:	d10a      	bne.n	23fa9c2 <__aeabi_dmul+0x24a>
 23fa9ac:	ea81 0103 	eor.w	r1, r1, r3
 23fa9b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa9b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fa9b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fa9bc:	f04f 0000 	mov.w	r0, #0
 23fa9c0:	bd70      	pop	{r4, r5, r6, pc}
 23fa9c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fa9c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fa9ca:	bd70      	pop	{r4, r5, r6, pc}

023fa9cc <__aeabi_ddiv>:
 23fa9cc:	b570      	push	{r4, r5, r6, lr}
 23fa9ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fa9d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fa9d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fa9da:	bf1d      	ittte	ne
 23fa9dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fa9e0:	ea94 0f0c 	teqne	r4, ip
 23fa9e4:	ea95 0f0c 	teqne	r5, ip
 23fa9e8:	f000 f8a7 	bleq	23fab3a <__aeabi_ddiv+0x16e>
 23fa9ec:	eba4 0405 	sub.w	r4, r4, r5
 23fa9f0:	ea81 0e03 	eor.w	lr, r1, r3
 23fa9f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fa9f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa9fc:	f000 8088 	beq.w	23fab10 <__aeabi_ddiv+0x144>
 23faa00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23faa04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23faa08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23faa0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23faa10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23faa14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23faa18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23faa1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23faa20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23faa24:	429d      	cmp	r5, r3
 23faa26:	bf08      	it	eq
 23faa28:	4296      	cmpeq	r6, r2
 23faa2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23faa2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23faa32:	d202      	bcs.n	23faa3a <__aeabi_ddiv+0x6e>
 23faa34:	085b      	lsrs	r3, r3, #1
 23faa36:	ea4f 0232 	mov.w	r2, r2, rrx
 23faa3a:	1ab6      	subs	r6, r6, r2
 23faa3c:	eb65 0503 	sbc.w	r5, r5, r3
 23faa40:	085b      	lsrs	r3, r3, #1
 23faa42:	ea4f 0232 	mov.w	r2, r2, rrx
 23faa46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23faa4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23faa4e:	ebb6 0e02 	subs.w	lr, r6, r2
 23faa52:	eb75 0e03 	sbcs.w	lr, r5, r3
 23faa56:	bf22      	ittt	cs
 23faa58:	1ab6      	subcs	r6, r6, r2
 23faa5a:	4675      	movcs	r5, lr
 23faa5c:	ea40 000c 	orrcs.w	r0, r0, ip
 23faa60:	085b      	lsrs	r3, r3, #1
 23faa62:	ea4f 0232 	mov.w	r2, r2, rrx
 23faa66:	ebb6 0e02 	subs.w	lr, r6, r2
 23faa6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23faa6e:	bf22      	ittt	cs
 23faa70:	1ab6      	subcs	r6, r6, r2
 23faa72:	4675      	movcs	r5, lr
 23faa74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23faa78:	085b      	lsrs	r3, r3, #1
 23faa7a:	ea4f 0232 	mov.w	r2, r2, rrx
 23faa7e:	ebb6 0e02 	subs.w	lr, r6, r2
 23faa82:	eb75 0e03 	sbcs.w	lr, r5, r3
 23faa86:	bf22      	ittt	cs
 23faa88:	1ab6      	subcs	r6, r6, r2
 23faa8a:	4675      	movcs	r5, lr
 23faa8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23faa90:	085b      	lsrs	r3, r3, #1
 23faa92:	ea4f 0232 	mov.w	r2, r2, rrx
 23faa96:	ebb6 0e02 	subs.w	lr, r6, r2
 23faa9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23faa9e:	bf22      	ittt	cs
 23faaa0:	1ab6      	subcs	r6, r6, r2
 23faaa2:	4675      	movcs	r5, lr
 23faaa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23faaa8:	ea55 0e06 	orrs.w	lr, r5, r6
 23faaac:	d018      	beq.n	23faae0 <__aeabi_ddiv+0x114>
 23faaae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23faab2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23faab6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23faaba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23faabe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23faac2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23faac6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23faaca:	d1c0      	bne.n	23faa4e <__aeabi_ddiv+0x82>
 23faacc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23faad0:	d10b      	bne.n	23faaea <__aeabi_ddiv+0x11e>
 23faad2:	ea41 0100 	orr.w	r1, r1, r0
 23faad6:	f04f 0000 	mov.w	r0, #0
 23faada:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23faade:	e7b6      	b.n	23faa4e <__aeabi_ddiv+0x82>
 23faae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23faae4:	bf04      	itt	eq
 23faae6:	4301      	orreq	r1, r0
 23faae8:	2000      	moveq	r0, #0
 23faaea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23faaee:	bf88      	it	hi
 23faaf0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23faaf4:	f63f aeaf 	bhi.w	23fa856 <__aeabi_dmul+0xde>
 23faaf8:	ebb5 0c03 	subs.w	ip, r5, r3
 23faafc:	bf04      	itt	eq
 23faafe:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fab02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fab06:	f150 0000 	adcs.w	r0, r0, #0
 23fab0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fab0e:	bd70      	pop	{r4, r5, r6, pc}
 23fab10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fab14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fab18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fab1c:	bfc2      	ittt	gt
 23fab1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fab22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fab26:	bd70      	popgt	{r4, r5, r6, pc}
 23fab28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fab2c:	f04f 0e00 	mov.w	lr, #0
 23fab30:	3c01      	subs	r4, #1
 23fab32:	e690      	b.n	23fa856 <__aeabi_dmul+0xde>
 23fab34:	ea45 0e06 	orr.w	lr, r5, r6
 23fab38:	e68d      	b.n	23fa856 <__aeabi_dmul+0xde>
 23fab3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fab3e:	ea94 0f0c 	teq	r4, ip
 23fab42:	bf08      	it	eq
 23fab44:	ea95 0f0c 	teqeq	r5, ip
 23fab48:	f43f af3b 	beq.w	23fa9c2 <__aeabi_dmul+0x24a>
 23fab4c:	ea94 0f0c 	teq	r4, ip
 23fab50:	d10a      	bne.n	23fab68 <__aeabi_ddiv+0x19c>
 23fab52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fab56:	f47f af34 	bne.w	23fa9c2 <__aeabi_dmul+0x24a>
 23fab5a:	ea95 0f0c 	teq	r5, ip
 23fab5e:	f47f af25 	bne.w	23fa9ac <__aeabi_dmul+0x234>
 23fab62:	4610      	mov	r0, r2
 23fab64:	4619      	mov	r1, r3
 23fab66:	e72c      	b.n	23fa9c2 <__aeabi_dmul+0x24a>
 23fab68:	ea95 0f0c 	teq	r5, ip
 23fab6c:	d106      	bne.n	23fab7c <__aeabi_ddiv+0x1b0>
 23fab6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fab72:	f43f aefd 	beq.w	23fa970 <__aeabi_dmul+0x1f8>
 23fab76:	4610      	mov	r0, r2
 23fab78:	4619      	mov	r1, r3
 23fab7a:	e722      	b.n	23fa9c2 <__aeabi_dmul+0x24a>
 23fab7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fab80:	bf18      	it	ne
 23fab82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fab86:	f47f aec5 	bne.w	23fa914 <__aeabi_dmul+0x19c>
 23fab8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fab8e:	f47f af0d 	bne.w	23fa9ac <__aeabi_dmul+0x234>
 23fab92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fab96:	f47f aeeb 	bne.w	23fa970 <__aeabi_dmul+0x1f8>
 23fab9a:	e712      	b.n	23fa9c2 <__aeabi_dmul+0x24a>

023fab9c <__gedf2>:
 23fab9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23faba0:	e006      	b.n	23fabb0 <__cmpdf2+0x4>
 23faba2:	bf00      	nop

023faba4 <__ledf2>:
 23faba4:	f04f 0c01 	mov.w	ip, #1
 23faba8:	e002      	b.n	23fabb0 <__cmpdf2+0x4>
 23fabaa:	bf00      	nop

023fabac <__cmpdf2>:
 23fabac:	f04f 0c01 	mov.w	ip, #1
 23fabb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fabb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fabb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fabbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fabc0:	bf18      	it	ne
 23fabc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fabc6:	d01b      	beq.n	23fac00 <__cmpdf2+0x54>
 23fabc8:	b001      	add	sp, #4
 23fabca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fabce:	bf0c      	ite	eq
 23fabd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fabd4:	ea91 0f03 	teqne	r1, r3
 23fabd8:	bf02      	ittt	eq
 23fabda:	ea90 0f02 	teqeq	r0, r2
 23fabde:	2000      	moveq	r0, #0
 23fabe0:	4770      	bxeq	lr
 23fabe2:	f110 0f00 	cmn.w	r0, #0
 23fabe6:	ea91 0f03 	teq	r1, r3
 23fabea:	bf58      	it	pl
 23fabec:	4299      	cmppl	r1, r3
 23fabee:	bf08      	it	eq
 23fabf0:	4290      	cmpeq	r0, r2
 23fabf2:	bf2c      	ite	cs
 23fabf4:	17d8      	asrcs	r0, r3, #31
 23fabf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fabfa:	f040 0001 	orr.w	r0, r0, #1
 23fabfe:	4770      	bx	lr
 23fac00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fac04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fac08:	d102      	bne.n	23fac10 <__cmpdf2+0x64>
 23fac0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fac0e:	d107      	bne.n	23fac20 <__cmpdf2+0x74>
 23fac10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fac14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fac18:	d1d6      	bne.n	23fabc8 <__cmpdf2+0x1c>
 23fac1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fac1e:	d0d3      	beq.n	23fabc8 <__cmpdf2+0x1c>
 23fac20:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fac24:	4770      	bx	lr
 23fac26:	bf00      	nop

023fac28 <__aeabi_cdrcmple>:
 23fac28:	4684      	mov	ip, r0
 23fac2a:	4610      	mov	r0, r2
 23fac2c:	4662      	mov	r2, ip
 23fac2e:	468c      	mov	ip, r1
 23fac30:	4619      	mov	r1, r3
 23fac32:	4663      	mov	r3, ip
 23fac34:	e000      	b.n	23fac38 <__aeabi_cdcmpeq>
 23fac36:	bf00      	nop

023fac38 <__aeabi_cdcmpeq>:
 23fac38:	b501      	push	{r0, lr}
 23fac3a:	f7ff ffb7 	bl	23fabac <__cmpdf2>
 23fac3e:	2800      	cmp	r0, #0
 23fac40:	bf48      	it	mi
 23fac42:	f110 0f00 	cmnmi.w	r0, #0
 23fac46:	bd01      	pop	{r0, pc}

023fac48 <__aeabi_dcmpeq>:
 23fac48:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fac4c:	f7ff fff4 	bl	23fac38 <__aeabi_cdcmpeq>
 23fac50:	bf0c      	ite	eq
 23fac52:	2001      	moveq	r0, #1
 23fac54:	2000      	movne	r0, #0
 23fac56:	f85d fb08 	ldr.w	pc, [sp], #8
 23fac5a:	bf00      	nop

023fac5c <__aeabi_dcmplt>:
 23fac5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fac60:	f7ff ffea 	bl	23fac38 <__aeabi_cdcmpeq>
 23fac64:	bf34      	ite	cc
 23fac66:	2001      	movcc	r0, #1
 23fac68:	2000      	movcs	r0, #0
 23fac6a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fac6e:	bf00      	nop

023fac70 <__aeabi_dcmple>:
 23fac70:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fac74:	f7ff ffe0 	bl	23fac38 <__aeabi_cdcmpeq>
 23fac78:	bf94      	ite	ls
 23fac7a:	2001      	movls	r0, #1
 23fac7c:	2000      	movhi	r0, #0
 23fac7e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fac82:	bf00      	nop

023fac84 <__aeabi_dcmpge>:
 23fac84:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fac88:	f7ff ffce 	bl	23fac28 <__aeabi_cdrcmple>
 23fac8c:	bf94      	ite	ls
 23fac8e:	2001      	movls	r0, #1
 23fac90:	2000      	movhi	r0, #0
 23fac92:	f85d fb08 	ldr.w	pc, [sp], #8
 23fac96:	bf00      	nop

023fac98 <__aeabi_dcmpgt>:
 23fac98:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fac9c:	f7ff ffc4 	bl	23fac28 <__aeabi_cdrcmple>
 23faca0:	bf34      	ite	cc
 23faca2:	2001      	movcc	r0, #1
 23faca4:	2000      	movcs	r0, #0
 23faca6:	f85d fb08 	ldr.w	pc, [sp], #8
 23facaa:	bf00      	nop

023facac <__aeabi_d2f>:
 23facac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23facb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23facb4:	bf24      	itt	cs
 23facb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23facba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23facbe:	d90d      	bls.n	23facdc <__aeabi_d2f+0x30>
 23facc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23facc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23facc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23faccc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23facd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23facd4:	bf08      	it	eq
 23facd6:	f020 0001 	biceq.w	r0, r0, #1
 23facda:	4770      	bx	lr
 23facdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23face0:	d121      	bne.n	23fad26 <__aeabi_d2f+0x7a>
 23face2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23face6:	bfbc      	itt	lt
 23face8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23facec:	4770      	bxlt	lr
 23facee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23facf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23facf6:	f1c2 0218 	rsb	r2, r2, #24
 23facfa:	f1c2 0c20 	rsb	ip, r2, #32
 23facfe:	fa10 f30c 	lsls.w	r3, r0, ip
 23fad02:	fa20 f002 	lsr.w	r0, r0, r2
 23fad06:	bf18      	it	ne
 23fad08:	f040 0001 	orrne.w	r0, r0, #1
 23fad0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fad10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fad14:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fad18:	ea40 000c 	orr.w	r0, r0, ip
 23fad1c:	fa23 f302 	lsr.w	r3, r3, r2
 23fad20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fad24:	e7cc      	b.n	23facc0 <__aeabi_d2f+0x14>
 23fad26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fad2a:	d107      	bne.n	23fad3c <__aeabi_d2f+0x90>
 23fad2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fad30:	bf1e      	ittt	ne
 23fad32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fad36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fad3a:	4770      	bxne	lr
 23fad3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fad40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fad44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fad48:	4770      	bx	lr
 23fad4a:	bf00      	nop

023fad4c <strcmp>:
 23fad4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fad50:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fad54:	2a01      	cmp	r2, #1
 23fad56:	bf28      	it	cs
 23fad58:	429a      	cmpcs	r2, r3
 23fad5a:	d0f7      	beq.n	23fad4c <strcmp>
 23fad5c:	1ad0      	subs	r0, r2, r3
 23fad5e:	4770      	bx	lr

023fad60 <strlen>:
 23fad60:	4603      	mov	r3, r0
 23fad62:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fad66:	2a00      	cmp	r2, #0
 23fad68:	d1fb      	bne.n	23fad62 <strlen+0x2>
 23fad6a:	1a18      	subs	r0, r3, r0
 23fad6c:	3801      	subs	r0, #1
 23fad6e:	4770      	bx	lr

023fad70 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fad70:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fad72:	f004 f9fb 	bl	23ff16c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fad76:	2500      	movs	r5, #0
 23fad78:	4e05      	ldr	r6, [pc, #20]	; (23fad90 <module_user_init+0x20>)
 23fad7a:	4c06      	ldr	r4, [pc, #24]	; (23fad94 <module_user_init+0x24>)
 23fad7c:	1ba4      	subs	r4, r4, r6
 23fad7e:	08a4      	lsrs	r4, r4, #2
 23fad80:	42ac      	cmp	r4, r5
 23fad82:	d100      	bne.n	23fad86 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fad84:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fad86:	f856 3b04 	ldr.w	r3, [r6], #4
 23fad8a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fad8c:	3501      	adds	r5, #1
 23fad8e:	e7f7      	b.n	23fad80 <module_user_init+0x10>
 23fad90:	023fffd4 	.word	0x023fffd4
 23fad94:	023ffff8 	.word	0x023ffff8

023fad98 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fad98:	f000 b8d6 	b.w	23faf48 <setup>

023fad9c <module_user_loop>:
}

void module_user_loop() {
 23fad9c:	b508      	push	{r3, lr}
    loop();
 23fad9e:	f000 fbfd 	bl	23fb59c <loop>
    _post_loop();
}
 23fada2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fada6:	f004 b999 	b.w	23ff0dc <_post_loop>

023fadaa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fadaa:	f001 beeb 	b.w	23fcb84 <malloc>

023fadae <_Znaj>:
 23fadae:	f001 bee9 	b.w	23fcb84 <malloc>

023fadb2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fadb2:	f001 bef5 	b.w	23fcba0 <free>
	...

023fadb8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fadb8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fadba:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fadbc:	4a02      	ldr	r2, [pc, #8]	; (23fadc8 <__cxa_pure_virtual+0x10>)
 23fadbe:	4903      	ldr	r1, [pc, #12]	; (23fadcc <__cxa_pure_virtual+0x14>)
 23fadc0:	f001 fd20 	bl	23fc804 <panic_>
  while (1);
 23fadc4:	e7fe      	b.n	23fadc4 <__cxa_pure_virtual+0xc>
 23fadc6:	bf00      	nop
 23fadc8:	023fc255 	.word	0x023fc255
 23fadcc:	023ff8bc 	.word	0x023ff8bc

023fadd0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fadd0:	7800      	ldrb	r0, [r0, #0]
 23fadd2:	fab0 f080 	clz	r0, r0
 23fadd6:	0940      	lsrs	r0, r0, #5
 23fadd8:	4770      	bx	lr

023fadda <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fadda:	2301      	movs	r3, #1
 23faddc:	7003      	strb	r3, [r0, #0]
 23fadde:	4770      	bx	lr

023fade0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fade0:	4770      	bx	lr
	...

023fade4 <_Z10resetCount6String>:
}

//reset countfunction
int resetCount (String value)
{  
  waterCount    = 0;    //count for water level message
 23fade4:	2300      	movs	r3, #0
 23fade6:	4a07      	ldr	r2, [pc, #28]	; (23fae04 <_Z10resetCount6String+0x20>)
  tempCount     = 0;    //count for temperature message
  humCount      = 0;    //count for humidity message
  errorCount    = 0;    //count for sensor bus error

  return true;          //return true
}
 23fade8:	2001      	movs	r0, #1
  waterCount    = 0;    //count for water level message
 23fadea:	8013      	strh	r3, [r2, #0]
  currentCount  = 0;    //count for high current message
 23fadec:	4a06      	ldr	r2, [pc, #24]	; (23fae08 <_Z10resetCount6String+0x24>)
 23fadee:	8013      	strh	r3, [r2, #0]
  stuckCount    = 0;    //count for pump stuck on message
 23fadf0:	4a06      	ldr	r2, [pc, #24]	; (23fae0c <_Z10resetCount6String+0x28>)
 23fadf2:	8013      	strh	r3, [r2, #0]
  tempCount     = 0;    //count for temperature message
 23fadf4:	4a06      	ldr	r2, [pc, #24]	; (23fae10 <_Z10resetCount6String+0x2c>)
 23fadf6:	8013      	strh	r3, [r2, #0]
  humCount      = 0;    //count for humidity message
 23fadf8:	4a06      	ldr	r2, [pc, #24]	; (23fae14 <_Z10resetCount6String+0x30>)
 23fadfa:	8013      	strh	r3, [r2, #0]
  errorCount    = 0;    //count for sensor bus error
 23fadfc:	4a06      	ldr	r2, [pc, #24]	; (23fae18 <_Z10resetCount6String+0x34>)
 23fadfe:	8013      	strh	r3, [r2, #0]
}
 23fae00:	4770      	bx	lr
 23fae02:	bf00      	nop
 23fae04:	1007ae24 	.word	0x1007ae24
 23fae08:	1007adcc 	.word	0x1007adcc
 23fae0c:	1007ae18 	.word	0x1007ae18
 23fae10:	1007ae1c 	.word	0x1007ae1c
 23fae14:	1007add0 	.word	0x1007add0
 23fae18:	1007adce 	.word	0x1007adce

023fae1c <_Z11stopMessage6String>:

//stop messages function
int stopMessage (String value)
{ 
  waterCount    = WATERMESSAGE;   //stops water level message
 23fae1c:	2205      	movs	r2, #5
  currentCount  = MAXMESSAGE;     //stops high current message
 23fae1e:	2001      	movs	r0, #1
  waterCount    = WATERMESSAGE;   //stops water level message
 23fae20:	4b06      	ldr	r3, [pc, #24]	; (23fae3c <_Z11stopMessage6String+0x20>)
 23fae22:	801a      	strh	r2, [r3, #0]
  currentCount  = MAXMESSAGE;     //stops high current message
 23fae24:	4b06      	ldr	r3, [pc, #24]	; (23fae40 <_Z11stopMessage6String+0x24>)
 23fae26:	8018      	strh	r0, [r3, #0]
  stuckCount    = MAXMESSAGE;     //stops pump stuck on message
 23fae28:	4b06      	ldr	r3, [pc, #24]	; (23fae44 <_Z11stopMessage6String+0x28>)
 23fae2a:	8018      	strh	r0, [r3, #0]
  tempCount     = MAXMESSAGE;     //stops temperature message
 23fae2c:	4b06      	ldr	r3, [pc, #24]	; (23fae48 <_Z11stopMessage6String+0x2c>)
 23fae2e:	8018      	strh	r0, [r3, #0]
  humCount      = MAXMESSAGE;     //stops humidity message
 23fae30:	4b06      	ldr	r3, [pc, #24]	; (23fae4c <_Z11stopMessage6String+0x30>)
 23fae32:	8018      	strh	r0, [r3, #0]
  errorCount    = MAXMESSAGE;     //stops sensor bus error
 23fae34:	4b06      	ldr	r3, [pc, #24]	; (23fae50 <_Z11stopMessage6String+0x34>)
 23fae36:	8018      	strh	r0, [r3, #0]

  return true;                    //return true
}
 23fae38:	4770      	bx	lr
 23fae3a:	bf00      	nop
 23fae3c:	1007ae24 	.word	0x1007ae24
 23fae40:	1007adcc 	.word	0x1007adcc
 23fae44:	1007ae18 	.word	0x1007ae18
 23fae48:	1007ae1c 	.word	0x1007ae1c
 23fae4c:	1007add0 	.word	0x1007add0
 23fae50:	1007adce 	.word	0x1007adce

023fae54 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 23fae54:	b510      	push	{r4, lr}
 23fae56:	4604      	mov	r4, r0
 23fae58:	4b02      	ldr	r3, [pc, #8]	; (23fae64 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
 23fae5a:	6003      	str	r3, [r0, #0]
 23fae5c:	f000 fd64 	bl	23fb928 <_ZN10JsonWriterD1Ev>
 23fae60:	4620      	mov	r0, r4
 23fae62:	bd10      	pop	{r4, pc}
 23fae64:	023ffb50 	.word	0x023ffb50

023fae68 <_ZN16JsonWriterStaticILj256EED0Ev>:
 23fae68:	b510      	push	{r4, lr}
 23fae6a:	4604      	mov	r4, r0
 23fae6c:	f7ff fff2 	bl	23fae54 <_ZN16JsonWriterStaticILj256EED1Ev>
 23fae70:	4620      	mov	r0, r4
 23fae72:	f44f 7198 	mov.w	r1, #304	; 0x130
 23fae76:	f7ff ff9c 	bl	23fadb2 <_ZdlPvj>
 23fae7a:	4620      	mov	r0, r4
 23fae7c:	bd10      	pop	{r4, pc}
	...

023fae80 <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
 23fae80:	b513      	push	{r0, r1, r4, lr}
 23fae82:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23fae84:	4b05      	ldr	r3, [pc, #20]	; (23fae9c <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fae86:	2200      	movs	r2, #0
 23fae88:	781b      	ldrb	r3, [r3, #0]
 23fae8a:	f88d 3000 	strb.w	r3, [sp]
 23fae8e:	233c      	movs	r3, #60	; 0x3c
 23fae90:	f002 f8c4 	bl	23fd01c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
 23fae94:	4620      	mov	r0, r4
 23fae96:	b002      	add	sp, #8
 23fae98:	bd10      	pop	{r4, pc}
 23fae9a:	bf00      	nop
 23fae9c:	1007ad8c 	.word	0x1007ad8c

023faea0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23faea0:	b510      	push	{r4, lr}
 23faea2:	4604      	mov	r4, r0
 23faea4:	4b09      	ldr	r3, [pc, #36]	; (23faecc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23faea6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23faea8:	f002 febe 	bl	23fdc28 <_ZN5spark10LogManager8instanceEv>
 23faeac:	4621      	mov	r1, r4
 23faeae:	f003 f8f5 	bl	23fe09c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23faeb2:	f004 f883 	bl	23fefbc <_Z16_fetch_usbserialv>
 23faeb6:	f004 f875 	bl	23fefa4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23faeba:	4620      	mov	r0, r4
 23faebc:	4b04      	ldr	r3, [pc, #16]	; (23faed0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23faebe:	f840 3b04 	str.w	r3, [r0], #4
 23faec2:	f002 ff87 	bl	23fddd4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23faec6:	4620      	mov	r0, r4
 23faec8:	bd10      	pop	{r4, pc}
 23faeca:	bf00      	nop
 23faecc:	023ffb38 	.word	0x023ffb38
 23faed0:	023ffb20 	.word	0x023ffb20

023faed4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23faed4:	b510      	push	{r4, lr}
 23faed6:	4604      	mov	r4, r0
    }
 23faed8:	f7ff ffe2 	bl	23faea0 <_ZN5spark16SerialLogHandlerD1Ev>
 23faedc:	4620      	mov	r0, r4
 23faede:	2124      	movs	r1, #36	; 0x24
 23faee0:	f7ff ff67 	bl	23fadb2 <_ZdlPvj>
 23faee4:	4620      	mov	r0, r4
 23faee6:	bd10      	pop	{r4, pc}

023faee8 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
 23faee8:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23faeea:	f04f 0c20 	mov.w	ip, #32
 23faeee:	2300      	movs	r3, #0
inline void spark::Logger::trace(const char *fmt, ...) const {
 23faef0:	b500      	push	{lr}
 23faef2:	b08c      	sub	sp, #48	; 0x30
 23faef4:	aa0d      	add	r2, sp, #52	; 0x34
 23faef6:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23faefa:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23faefe:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23faf02:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23faf04:	6801      	ldr	r1, [r0, #0]
 23faf06:	aa04      	add	r2, sp, #16
 23faf08:	2001      	movs	r0, #1
 23faf0a:	f001 fc89 	bl	23fc820 <log_message_v>
}
 23faf0e:	b00c      	add	sp, #48	; 0x30
 23faf10:	f85d eb04 	ldr.w	lr, [sp], #4
 23faf14:	b003      	add	sp, #12
 23faf16:	4770      	bx	lr

023faf18 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23faf18:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23faf1a:	f04f 0c20 	mov.w	ip, #32
 23faf1e:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23faf20:	b500      	push	{lr}
 23faf22:	b08c      	sub	sp, #48	; 0x30
 23faf24:	aa0d      	add	r2, sp, #52	; 0x34
 23faf26:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23faf2a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23faf2e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23faf32:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23faf34:	6801      	ldr	r1, [r0, #0]
 23faf36:	aa04      	add	r2, sp, #16
 23faf38:	201e      	movs	r0, #30
 23faf3a:	f001 fc71 	bl	23fc820 <log_message_v>
}
 23faf3e:	b00c      	add	sp, #48	; 0x30
 23faf40:	f85d eb04 	ldr.w	lr, [sp], #4
 23faf44:	b003      	add	sp, #12
 23faf46:	4770      	bx	lr

023faf48 <setup>:
{
 23faf48:	b510      	push	{r4, lr}
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23faf4a:	4c1c      	ldr	r4, [pc, #112]	; (23fafbc <setup+0x74>)
 23faf4c:	b088      	sub	sp, #32
 23faf4e:	4620      	mov	r0, r4
 23faf50:	4a1b      	ldr	r2, [pc, #108]	; (23fafc0 <setup+0x78>)
 23faf52:	491c      	ldr	r1, [pc, #112]	; (23fafc4 <setup+0x7c>)
 23faf54:	f001 ff6f 	bl	23fce36 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 23faf58:	4620      	mov	r0, r4
 23faf5a:	4a1b      	ldr	r2, [pc, #108]	; (23fafc8 <setup+0x80>)
 23faf5c:	491b      	ldr	r1, [pc, #108]	; (23fafcc <setup+0x84>)
 23faf5e:	f001 ff6a 	bl	23fce36 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 23faf62:	4a1b      	ldr	r2, [pc, #108]	; (23fafd0 <setup+0x88>)
 23faf64:	491b      	ldr	r1, [pc, #108]	; (23fafd4 <setup+0x8c>)
 23faf66:	4620      	mov	r0, r4
 23faf68:	f001 ff65 	bl	23fce36 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        spark_cloud_flag_connect();
 23faf6c:	f001 fd1c 	bl	23fc9a8 <spark_cloud_flag_connect>
  Serial.begin(9600);             //set baud rate for debug messages
 23faf70:	f004 f824 	bl	23fefbc <_Z16_fetch_usbserialv>
 23faf74:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23faf78:	f004 f810 	bl	23fef9c <_ZN9USBSerial5beginEl>
  systemStatus = NORMAL_STATUS;   //set system status, normal at startup
 23faf7c:	2200      	movs	r2, #0
 23faf7e:	4b16      	ldr	r3, [pc, #88]	; (23fafd8 <setup+0x90>)
  temphum13_cfg_setup(&temphum13_cfg);
 23faf80:	a801      	add	r0, sp, #4
  systemStatus = NORMAL_STATUS;   //set system status, normal at startup
 23faf82:	701a      	strb	r2, [r3, #0]
  temphum13_cfg_setup(&temphum13_cfg);
 23faf84:	f001 f851 	bl	23fc02a <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS(temphum13_cfg, MIKROBUS_1);    //set BUS1 for temp/hum click
 23faf88:	2301      	movs	r3, #1
  temphum13_init(&temphum13, &temphum13_cfg);   
 23faf8a:	4c14      	ldr	r4, [pc, #80]	; (23fafdc <setup+0x94>)
 23faf8c:	a901      	add	r1, sp, #4
 23faf8e:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS(temphum13_cfg, MIKROBUS_1);    //set BUS1 for temp/hum click
 23faf90:	f8ad 3004 	strh.w	r3, [sp, #4]
  temphum13_init(&temphum13, &temphum13_cfg);   
 23faf94:	f001 f851 	bl	23fc03a <temphum13_init>
  temphum13_default_cfg(&temphum13);
 23faf98:	4620      	mov	r0, r4
 23faf9a:	f001 f8f9 	bl	23fc190 <temphum13_default_cfg>
  accurrent_cfg_setup(&accurrent_cfg); 
 23faf9e:	a804      	add	r0, sp, #16
 23fafa0:	f000 fe0c 	bl	23fbbbc <accurrent_cfg_setup>
  ACCURRENT_MAP_MIKROBUS(accurrent_cfg, MIKROBUS_2);    //set BUS2 for ac current click
 23fafa4:	4b0e      	ldr	r3, [pc, #56]	; (23fafe0 <setup+0x98>)
  accurrent_init(&accurrent, &accurrent_cfg);
 23fafa6:	a904      	add	r1, sp, #16
  ACCURRENT_MAP_MIKROBUS(accurrent_cfg, MIKROBUS_2);    //set BUS2 for ac current click
 23fafa8:	9304      	str	r3, [sp, #16]
 23fafaa:	230c      	movs	r3, #12
  accurrent_init(&accurrent, &accurrent_cfg);
 23fafac:	480d      	ldr	r0, [pc, #52]	; (23fafe4 <setup+0x9c>)
  ACCURRENT_MAP_MIKROBUS(accurrent_cfg, MIKROBUS_2);    //set BUS2 for ac current click
 23fafae:	f88d 3014 	strb.w	r3, [sp, #20]
  accurrent_init(&accurrent, &accurrent_cfg);
 23fafb2:	f000 fe0f 	bl	23fbbd4 <accurrent_init>
}
 23fafb6:	b008      	add	sp, #32
 23fafb8:	bd10      	pop	{r4, pc}
 23fafba:	bf00      	nop
 23fafbc:	023fce0b 	.word	0x023fce0b
 23fafc0:	023ff8d1 	.word	0x023ff8d1
 23fafc4:	023fade5 	.word	0x023fade5
 23fafc8:	023ff8de 	.word	0x023ff8de
 23fafcc:	023fae1d 	.word	0x023fae1d
 23fafd0:	023ff8ec 	.word	0x023ff8ec
 23fafd4:	023fb629 	.word	0x023fb629
 23fafd8:	1007ae1a 	.word	0x1007ae1a
 23fafdc:	1007ada4 	.word	0x1007ada4
 23fafe0:	05110f10 	.word	0x05110f10
 23fafe4:	1007ad90 	.word	0x1007ad90

023fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fafe8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fafea:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fafec:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fafee:	b17c      	cbz	r4, 23fb010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23faff0:	6863      	ldr	r3, [r4, #4]
 23faff2:	3b01      	subs	r3, #1
 23faff4:	6063      	str	r3, [r4, #4]
 23faff6:	b95b      	cbnz	r3, 23fb010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23faff8:	6823      	ldr	r3, [r4, #0]
 23faffa:	4620      	mov	r0, r4
 23faffc:	689b      	ldr	r3, [r3, #8]
 23faffe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb000:	68a3      	ldr	r3, [r4, #8]
 23fb002:	3b01      	subs	r3, #1
 23fb004:	60a3      	str	r3, [r4, #8]
 23fb006:	b91b      	cbnz	r3, 23fb010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fb008:	6823      	ldr	r3, [r4, #0]
 23fb00a:	4620      	mov	r0, r4
 23fb00c:	68db      	ldr	r3, [r3, #12]
 23fb00e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fb010:	4628      	mov	r0, r5
 23fb012:	bd38      	pop	{r3, r4, r5, pc}

023fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb014:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb016:	2614      	movs	r6, #20
 23fb018:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb01c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb01e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb022:	42ae      	cmp	r6, r5
 23fb024:	d004      	beq.n	23fb030 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb026:	4628      	mov	r0, r5
 23fb028:	f003 fdd1 	bl	23febce <_ZN6StringD1Ev>
 23fb02c:	3514      	adds	r5, #20
 23fb02e:	e7f8      	b.n	23fb022 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb030:	6820      	ldr	r0, [r4, #0]
 23fb032:	f001 fdb5 	bl	23fcba0 <free>
    AllocatorT::free(data_);
}
 23fb036:	4620      	mov	r0, r4
 23fb038:	bd70      	pop	{r4, r5, r6, pc}

023fb03a <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 23fb03a:	b513      	push	{r0, r1, r4, lr}
 23fb03c:	4604      	mov	r4, r0
 23fb03e:	ed8d 0a00 	vstr	s0, [sp]
 23fb042:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
 23fb044:	f000 fd8e 	bl	23fbb64 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 23fb048:	2201      	movs	r2, #1
 23fb04a:	4620      	mov	r0, r4
 23fb04c:	9901      	ldr	r1, [sp, #4]
 23fb04e:	f000 fcf7 	bl	23fba40 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 23fb052:	4620      	mov	r0, r4
 23fb054:	213a      	movs	r1, #58	; 0x3a
 23fb056:	f000 fc95 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 23fb05a:	ed9d 0a00 	vldr	s0, [sp]
 23fb05e:	4620      	mov	r0, r4
	}
 23fb060:	b002      	add	sp, #8
 23fb062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
 23fb066:	f000 bd89 	b.w	23fbb7c <_ZN10JsonWriter11insertValueEf>
	...

023fb06c <_Z14publish_statusv.part.0>:
void publish_status()
 23fb06c:	b570      	push	{r4, r5, r6, lr}
 23fb06e:	b0d2      	sub	sp, #328	; 0x148
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 23fb070:	a912      	add	r1, sp, #72	; 0x48
 23fb072:	f44f 7280 	mov.w	r2, #256	; 0x100
 23fb076:	a806      	add	r0, sp, #24
 23fb078:	f000 fc72 	bl	23fb960 <_ZN10JsonWriterC1EPcj>
 23fb07c:	4b3a      	ldr	r3, [pc, #232]	; (23fb168 <_Z14publish_statusv.part.0+0xfc>)
	bool startObject() { return startObjectOrArray('{', '}'); };
 23fb07e:	227d      	movs	r2, #125	; 0x7d
 23fb080:	217b      	movs	r1, #123	; 0x7b
 23fb082:	a806      	add	r0, sp, #24
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 23fb084:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
 23fb086:	f000 fc8c 	bl	23fb9a2 <_ZN10JsonWriter18startObjectOrArrayEcc>
      jw.insertKeyValue("System Status", systemStatus);   //set field for system status
 23fb08a:	4b38      	ldr	r3, [pc, #224]	; (23fb16c <_Z14publish_statusv.part.0+0x100>)
		insertCheckSeparator();
 23fb08c:	a806      	add	r0, sp, #24
 23fb08e:	781c      	ldrb	r4, [r3, #0]
	void insertValue(int value) { insertsprintf("%d", value); }
 23fb090:	4d37      	ldr	r5, [pc, #220]	; (23fb170 <_Z14publish_statusv.part.0+0x104>)
		insertCheckSeparator();
 23fb092:	f000 fd67 	bl	23fbb64 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 23fb096:	2201      	movs	r2, #1
 23fb098:	a806      	add	r0, sp, #24
 23fb09a:	4936      	ldr	r1, [pc, #216]	; (23fb174 <_Z14publish_statusv.part.0+0x108>)
 23fb09c:	f000 fcd0 	bl	23fba40 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 23fb0a0:	a806      	add	r0, sp, #24
 23fb0a2:	213a      	movs	r1, #58	; 0x3a
 23fb0a4:	f000 fc6e 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
 23fb0a8:	4622      	mov	r2, r4
 23fb0aa:	4629      	mov	r1, r5
 23fb0ac:	a806      	add	r0, sp, #24
 23fb0ae:	f000 fcb9 	bl	23fba24 <_ZN10JsonWriter13insertsprintfEPKcz>
      jw.insertKeyValue("Water Level", waterLevel);		    //set field for water level
 23fb0b2:	4b31      	ldr	r3, [pc, #196]	; (23fb178 <_Z14publish_statusv.part.0+0x10c>)
 23fb0b4:	4931      	ldr	r1, [pc, #196]	; (23fb17c <_Z14publish_statusv.part.0+0x110>)
 23fb0b6:	ed93 0a00 	vldr	s0, [r3]
      jw.insertKeyValue("Pump Count", pumpCount);         //set field for pump count
 23fb0ba:	4c31      	ldr	r4, [pc, #196]	; (23fb180 <_Z14publish_statusv.part.0+0x114>)
      jw.insertKeyValue("Water Level", waterLevel);		    //set field for water level
 23fb0bc:	a806      	add	r0, sp, #24
 23fb0be:	f7ff ffbc 	bl	23fb03a <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
		insertCheckSeparator();
 23fb0c2:	a806      	add	r0, sp, #24
      jw.insertKeyValue("Pump Count", pumpCount);         //set field for pump count
 23fb0c4:	8826      	ldrh	r6, [r4, #0]
 23fb0c6:	f000 fd4d 	bl	23fbb64 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 23fb0ca:	2201      	movs	r2, #1
 23fb0cc:	a806      	add	r0, sp, #24
 23fb0ce:	492d      	ldr	r1, [pc, #180]	; (23fb184 <_Z14publish_statusv.part.0+0x118>)
 23fb0d0:	f000 fcb6 	bl	23fba40 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 23fb0d4:	a806      	add	r0, sp, #24
 23fb0d6:	213a      	movs	r1, #58	; 0x3a
 23fb0d8:	f000 fc54 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
 23fb0dc:	4632      	mov	r2, r6
 23fb0de:	4629      	mov	r1, r5
 23fb0e0:	a806      	add	r0, sp, #24
 23fb0e2:	f000 fc9f 	bl	23fba24 <_ZN10JsonWriter13insertsprintfEPKcz>
      jw.insertKeyValue("Temperature", temperature);		  //set field for temperature
 23fb0e6:	4b28      	ldr	r3, [pc, #160]	; (23fb188 <_Z14publish_statusv.part.0+0x11c>)
 23fb0e8:	a806      	add	r0, sp, #24
 23fb0ea:	ed93 0a00 	vldr	s0, [r3]
 23fb0ee:	4927      	ldr	r1, [pc, #156]	; (23fb18c <_Z14publish_statusv.part.0+0x120>)
 23fb0f0:	f7ff ffa3 	bl	23fb03a <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
      jw.insertKeyValue("Humidity", humidity);			      //set field for humidity
 23fb0f4:	4b26      	ldr	r3, [pc, #152]	; (23fb190 <_Z14publish_statusv.part.0+0x124>)
 23fb0f6:	4927      	ldr	r1, [pc, #156]	; (23fb194 <_Z14publish_statusv.part.0+0x128>)
 23fb0f8:	ed93 0a00 	vldr	s0, [r3]
 23fb0fc:	a806      	add	r0, sp, #24
 23fb0fe:	f7ff ff9c 	bl	23fb03a <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 23fb102:	f003 fe7e 	bl	23fee02 <_ZN9TimeClass3nowEv>
 23fb106:	17c3      	asrs	r3, r0, #31
 23fb108:	4602      	mov	r2, r0
 23fb10a:	a802      	add	r0, sp, #8
 23fb10c:	f003 fe20 	bl	23fed50 <_ZN9TimeClass7timeStrEx>
		insertCheckSeparator();
 23fb110:	a806      	add	r0, sp, #24
 23fb112:	f000 fd27 	bl	23fbb64 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 23fb116:	2201      	movs	r2, #1
 23fb118:	a806      	add	r0, sp, #24
 23fb11a:	491f      	ldr	r1, [pc, #124]	; (23fb198 <_Z14publish_statusv.part.0+0x12c>)
 23fb11c:	f000 fc90 	bl	23fba40 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 23fb120:	a806      	add	r0, sp, #24
 23fb122:	213a      	movs	r1, #58	; 0x3a
 23fb124:	f000 fc2e 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 23fb128:	9902      	ldr	r1, [sp, #8]
 23fb12a:	2201      	movs	r2, #1
 23fb12c:	a806      	add	r0, sp, #24
 23fb12e:	f000 fc87 	bl	23fba40 <_ZN10JsonWriter12insertStringEPKcb>
      jw.insertKeyValue("Time", Time.timeStr());			    //set field for time stamp
 23fb132:	a802      	add	r0, sp, #8
 23fb134:	f003 fd4b 	bl	23febce <_ZN6StringD1Ev>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 23fb138:	a806      	add	r0, sp, #24
 23fb13a:	f000 fc43 	bl	23fb9c4 <_ZN10JsonWriter19finishObjectOrArrayEv>
 23fb13e:	4b17      	ldr	r3, [pc, #92]	; (23fb19c <_Z14publish_statusv.part.0+0x130>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fb140:	9a07      	ldr	r2, [sp, #28]
 23fb142:	781b      	ldrb	r3, [r3, #0]
 23fb144:	4916      	ldr	r1, [pc, #88]	; (23fb1a0 <_Z14publish_statusv.part.0+0x134>)
 23fb146:	f88d 3000 	strb.w	r3, [sp]
 23fb14a:	a802      	add	r0, sp, #8
 23fb14c:	233c      	movs	r3, #60	; 0x3c
 23fb14e:	f001 ff65 	bl	23fd01c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fb152:	a803      	add	r0, sp, #12
 23fb154:	f7ff ff48 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    pumpCount = 0;    //reset pump count
 23fb158:	2300      	movs	r3, #0
    JsonWriterStatic<256> jw;		//creates a 256 byte buffer to write JSON to
 23fb15a:	a806      	add	r0, sp, #24
    pumpCount = 0;    //reset pump count
 23fb15c:	8023      	strh	r3, [r4, #0]
    JsonWriterStatic<256> jw;		//creates a 256 byte buffer to write JSON to
 23fb15e:	f7ff fe79 	bl	23fae54 <_ZN16JsonWriterStaticILj256EED1Ev>
}
 23fb162:	b052      	add	sp, #328	; 0x148
 23fb164:	bd70      	pop	{r4, r5, r6, pc}
 23fb166:	bf00      	nop
 23fb168:	023ffb50 	.word	0x023ffb50
 23fb16c:	1007ae1a 	.word	0x1007ae1a
 23fb170:	023ff906 	.word	0x023ff906
 23fb174:	023ff8f8 	.word	0x023ff8f8
 23fb178:	1007ae28 	.word	0x1007ae28
 23fb17c:	023ff909 	.word	0x023ff909
 23fb180:	1007adfc 	.word	0x1007adfc
 23fb184:	023ff915 	.word	0x023ff915
 23fb188:	1007ae20 	.word	0x1007ae20
 23fb18c:	023ff920 	.word	0x023ff920
 23fb190:	1007add4 	.word	0x1007add4
 23fb194:	023ff92c 	.word	0x023ff92c
 23fb198:	023ff935 	.word	0x023ff935
 23fb19c:	1007ad8d 	.word	0x1007ad8d
 23fb1a0:	023ff93a 	.word	0x023ff93a

023fb1a4 <_Z14publish_statusv>:
{
 23fb1a4:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fb1a6:	f001 fc0d 	bl	23fc9c4 <spark_cloud_flag_connected>
  if(Particle.connected() == TRUE)
 23fb1aa:	b118      	cbz	r0, 23fb1b4 <_Z14publish_statusv+0x10>
}
 23fb1ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23fb1b0:	f7ff bf5c 	b.w	23fb06c <_Z14publish_statusv.part.0>
 23fb1b4:	bd08      	pop	{r3, pc}
	...

023fb1b8 <_Z18ACcurrent_functionv>:
  return true;            //return true
}

//accurrent function
void ACcurrent_function()
{
 23fb1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb1ba:	ed2d 8b02 	vpush	{d8}
  //local variables
  static uint16_t loop_count;   //variable for determing if pump just turned on

  //measure current
  ac_current = accurrent_get_a( &accurrent );             //measure the current
 23fb1be:	4847      	ldr	r0, [pc, #284]	; (23fb2dc <_Z18ACcurrent_functionv+0x124>)
{
 23fb1c0:	b083      	sub	sp, #12
  ac_current = accurrent_get_a( &accurrent );             //measure the current
 23fb1c2:	f000 fd45 	bl	23fbc50 <accurrent_get_a>
 23fb1c6:	4e46      	ldr	r6, [pc, #280]	; (23fb2e0 <_Z18ACcurrent_functionv+0x128>)
 23fb1c8:	ee10 0a10 	vmov	r0, s0
 23fb1cc:	ed86 0a00 	vstr	s0, [r6]
  Log.trace("Current value A : %06.4f \n", ac_current);   //debug message
 23fb1d0:	f7ff fa7a 	bl	23fa6c8 <__aeabi_f2d>
 23fb1d4:	4602      	mov	r2, r0
 23fb1d6:	460b      	mov	r3, r1
 23fb1d8:	4842      	ldr	r0, [pc, #264]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
 23fb1da:	4943      	ldr	r1, [pc, #268]	; (23fb2e8 <_Z18ACcurrent_functionv+0x130>)
 23fb1dc:	f7ff fe84 	bl	23faee8 <_ZNK5spark6Logger5traceEPKcz>

  //pump cycle logic
  if (ac_current >= IDLE_CURRENT)    //value greater than idle threshold
 23fb1e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 23fb1e4:	edd6 7a00 	vldr	s15, [r6]
 23fb1e8:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fb1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb1f0:	4c3e      	ldr	r4, [pc, #248]	; (23fb2ec <_Z18ACcurrent_functionv+0x134>)
 23fb1f2:	db10      	blt.n	23fb216 <_Z18ACcurrent_functionv+0x5e>
  {
    if (loop_count == 0)    //pump just turned on
 23fb1f4:	8823      	ldrh	r3, [r4, #0]
 23fb1f6:	b93b      	cbnz	r3, 23fb208 <_Z18ACcurrent_functionv+0x50>
    {
      Log.info("Pump just turned on");   //debug message
 23fb1f8:	493d      	ldr	r1, [pc, #244]	; (23fb2f0 <_Z18ACcurrent_functionv+0x138>)
 23fb1fa:	483a      	ldr	r0, [pc, #232]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
 23fb1fc:	f7ff fe8c 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      pumpCount++;                        //increment the pump count
 23fb200:	4a3c      	ldr	r2, [pc, #240]	; (23fb2f4 <_Z18ACcurrent_functionv+0x13c>)
 23fb202:	8813      	ldrh	r3, [r2, #0]
 23fb204:	3301      	adds	r3, #1
 23fb206:	8013      	strh	r3, [r2, #0]
    }
    
    Log.info("Pump is still on");    //debug message
 23fb208:	493b      	ldr	r1, [pc, #236]	; (23fb2f8 <_Z18ACcurrent_functionv+0x140>)
 23fb20a:	4836      	ldr	r0, [pc, #216]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
 23fb20c:	f7ff fe84 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
    loop_count++;                     //increment pump counter 
 23fb210:	8823      	ldrh	r3, [r4, #0]
 23fb212:	3301      	adds	r3, #1
 23fb214:	8023      	strh	r3, [r4, #0]
  }

  //pump stuck on event, float stuck up
  if (loop_count > FLOATSTUCK)
 23fb216:	8823      	ldrh	r3, [r4, #0]
 23fb218:	4d38      	ldr	r5, [pc, #224]	; (23fb2fc <_Z18ACcurrent_functionv+0x144>)
 23fb21a:	2b1e      	cmp	r3, #30
 23fb21c:	d941      	bls.n	23fb2a2 <_Z18ACcurrent_functionv+0xea>
  {
    systemStatus = STUCK_WARNING;       //set system status
 23fb21e:	2303      	movs	r3, #3
    Log.info("Float stuck Event");    //debug message
   
    if (stuckCount < MAXMESSAGE)
 23fb220:	4f37      	ldr	r7, [pc, #220]	; (23fb300 <_Z18ACcurrent_functionv+0x148>)
    Log.info("Float stuck Event");    //debug message
 23fb222:	4938      	ldr	r1, [pc, #224]	; (23fb304 <_Z18ACcurrent_functionv+0x14c>)
 23fb224:	482f      	ldr	r0, [pc, #188]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
    systemStatus = STUCK_WARNING;       //set system status
 23fb226:	702b      	strb	r3, [r5, #0]
    Log.info("Float stuck Event");    //debug message
 23fb228:	f7ff fe76 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
    if (stuckCount < MAXMESSAGE)
 23fb22c:	883b      	ldrh	r3, [r7, #0]
 23fb22e:	b943      	cbnz	r3, 23fb242 <_Z18ACcurrent_functionv+0x8a>
    {
      Particle.publish("Float stuck Event");    //send warning message, with current # of seconds pump has been stuck  
 23fb230:	4668      	mov	r0, sp
 23fb232:	4934      	ldr	r1, [pc, #208]	; (23fb304 <_Z18ACcurrent_functionv+0x14c>)
 23fb234:	f7ff fe24 	bl	23fae80 <_ZN10CloudClass7publishEPKc.isra.0>
 23fb238:	a801      	add	r0, sp, #4
 23fb23a:	f7ff fed5 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      publish_status();                         //publish status message   
 23fb23e:	f7ff ffb1 	bl	23fb1a4 <_Z14publish_statusv>
    }

    stuckCount++;   //increment high current count
 23fb242:	883b      	ldrh	r3, [r7, #0]
 23fb244:	3301      	adds	r3, #1
 23fb246:	803b      	strh	r3, [r7, #0]
      publish_status();                       //publish status message
    }
  }
  
  //high current event
  if (ac_current > HIGH_CURRENT)
 23fb248:	ed96 7a00 	vldr	s14, [r6]
 23fb24c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 23fb250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23fb254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb258:	dd31      	ble.n	23fb2be <_Z18ACcurrent_functionv+0x106>
  {
    systemStatus = CURRENT_WARNING;     //set system status
 23fb25a:	2302      	movs	r3, #2
 23fb25c:	702b      	strb	r3, [r5, #0]
    Log.info("High Current Event");    //debug message

    if (currentCount < MAXMESSAGE)
 23fb25e:	4d2a      	ldr	r5, [pc, #168]	; (23fb308 <_Z18ACcurrent_functionv+0x150>)
    Log.info("High Current Event");    //debug message
 23fb260:	492a      	ldr	r1, [pc, #168]	; (23fb30c <_Z18ACcurrent_functionv+0x154>)
 23fb262:	4820      	ldr	r0, [pc, #128]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
 23fb264:	f7ff fe58 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
    if (currentCount < MAXMESSAGE)
 23fb268:	882b      	ldrh	r3, [r5, #0]
 23fb26a:	b943      	cbnz	r3, 23fb27e <_Z18ACcurrent_functionv+0xc6>
    {     
      Particle.publish("High Current Event");   //send warning message
 23fb26c:	4668      	mov	r0, sp
 23fb26e:	4927      	ldr	r1, [pc, #156]	; (23fb30c <_Z18ACcurrent_functionv+0x154>)
 23fb270:	f7ff fe06 	bl	23fae80 <_ZN10CloudClass7publishEPKc.isra.0>
 23fb274:	a801      	add	r0, sp, #4
 23fb276:	f7ff feb7 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      publish_status();                         //publish status message
 23fb27a:	f7ff ff93 	bl	23fb1a4 <_Z14publish_statusv>
    }

    currentCount++;   //increment high current count
 23fb27e:	882b      	ldrh	r3, [r5, #0]
 23fb280:	3301      	adds	r3, #1
 23fb282:	802b      	strh	r3, [r5, #0]
      publish_status();                       //publish status message
    }
  }

  //reset loop coutner
  if((ac_current < IDLE_CURRENT) && (loop_count > 0))
 23fb284:	edd6 7a00 	vldr	s15, [r6]
 23fb288:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fb28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb290:	d503      	bpl.n	23fb29a <_Z18ACcurrent_functionv+0xe2>
 23fb292:	8823      	ldrh	r3, [r4, #0]
 23fb294:	b10b      	cbz	r3, 23fb29a <_Z18ACcurrent_functionv+0xe2>
  {
    loop_count = 0;   //reset loop counter
 23fb296:	2300      	movs	r3, #0
 23fb298:	8023      	strh	r3, [r4, #0]
  }
}
 23fb29a:	b003      	add	sp, #12
 23fb29c:	ecbd 8b02 	vpop	{d8}
 23fb2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((systemStatus == STUCK_WARNING) && (systemStatus != CURRENT_WARNING))   //change status only if previous stuck float warning and high current warning isn't active
 23fb2a2:	782b      	ldrb	r3, [r5, #0]
 23fb2a4:	2b03      	cmp	r3, #3
 23fb2a6:	d1cf      	bne.n	23fb248 <_Z18ACcurrent_functionv+0x90>
      Log.info("Float stuck Event Reset");    //debug message
 23fb2a8:	4919      	ldr	r1, [pc, #100]	; (23fb310 <_Z18ACcurrent_functionv+0x158>)
 23fb2aa:	480e      	ldr	r0, [pc, #56]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
 23fb2ac:	f7ff fe34 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      systemStatus = NORMAL_STATUS;           //set system status
 23fb2b0:	2300      	movs	r3, #0
      stuckCount = 0;                         //reset count
 23fb2b2:	4a13      	ldr	r2, [pc, #76]	; (23fb300 <_Z18ACcurrent_functionv+0x148>)
      systemStatus = NORMAL_STATUS;           //set system status
 23fb2b4:	702b      	strb	r3, [r5, #0]
      stuckCount = 0;                         //reset count
 23fb2b6:	8013      	strh	r3, [r2, #0]
      publish_status();                       //publish status message
 23fb2b8:	f7ff ff74 	bl	23fb1a4 <_Z14publish_statusv>
 23fb2bc:	e7c4      	b.n	23fb248 <_Z18ACcurrent_functionv+0x90>
    if ((systemStatus == CURRENT_WARNING) && (systemStatus != STUCK_WARNING))   //change status only if previous current warning and stuck float warning isn't active
 23fb2be:	782b      	ldrb	r3, [r5, #0]
 23fb2c0:	2b02      	cmp	r3, #2
 23fb2c2:	d1df      	bne.n	23fb284 <_Z18ACcurrent_functionv+0xcc>
      Log.info("High Current Event Reset");   //debug message
 23fb2c4:	4913      	ldr	r1, [pc, #76]	; (23fb314 <_Z18ACcurrent_functionv+0x15c>)
 23fb2c6:	4807      	ldr	r0, [pc, #28]	; (23fb2e4 <_Z18ACcurrent_functionv+0x12c>)
 23fb2c8:	f7ff fe26 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      systemStatus = NORMAL_STATUS;           //set system status
 23fb2cc:	2300      	movs	r3, #0
      currentCount = 0;                       //reset count
 23fb2ce:	4a0e      	ldr	r2, [pc, #56]	; (23fb308 <_Z18ACcurrent_functionv+0x150>)
      systemStatus = NORMAL_STATUS;           //set system status
 23fb2d0:	702b      	strb	r3, [r5, #0]
      currentCount = 0;                       //reset count
 23fb2d2:	8013      	strh	r3, [r2, #0]
      publish_status();                       //publish status message
 23fb2d4:	f7ff ff66 	bl	23fb1a4 <_Z14publish_statusv>
 23fb2d8:	e7d4      	b.n	23fb284 <_Z18ACcurrent_functionv+0xcc>
 23fb2da:	bf00      	nop
 23fb2dc:	1007ad90 	.word	0x1007ad90
 23fb2e0:	1007adc8 	.word	0x1007adc8
 23fb2e4:	1007ae5c 	.word	0x1007ae5c
 23fb2e8:	023ff949 	.word	0x023ff949
 23fb2ec:	1007adb4 	.word	0x1007adb4
 23fb2f0:	023ff964 	.word	0x023ff964
 23fb2f4:	1007adfc 	.word	0x1007adfc
 23fb2f8:	023ff978 	.word	0x023ff978
 23fb2fc:	1007ae1a 	.word	0x1007ae1a
 23fb300:	1007ae18 	.word	0x1007ae18
 23fb304:	023ff989 	.word	0x023ff989
 23fb308:	1007adcc 	.word	0x1007adcc
 23fb30c:	023ff9b3 	.word	0x023ff9b3
 23fb310:	023ff99b 	.word	0x023ff99b
 23fb314:	023ff9c6 	.word	0x023ff9c6

023fb318 <_Z18temphum13_functionv>:

//temphum13 function
void temphum13_function()
{
 23fb318:	b573      	push	{r0, r1, r4, r5, r6, lr}
  //local variables
  float tempC;
  
  tempC = temphum13_get_temperature(&temphum13);    //get temperature from sensor
 23fb31a:	485d      	ldr	r0, [pc, #372]	; (23fb490 <_Z18temphum13_functionv+0x178>)
 23fb31c:	f000 fec8 	bl	23fc0b0 <temphum13_get_temperature>
  
  if (tempC != 65536.0)    //if value return doesn't equal 0xFF, IE I2C bus is idle
 23fb320:	eddf 7a5c 	vldr	s15, [pc, #368]	; 23fb494 <_Z18temphum13_functionv+0x17c>
 23fb324:	eeb4 0a67 	vcmp.f32	s0, s15
 23fb328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb32c:	4c5a      	ldr	r4, [pc, #360]	; (23fb498 <_Z18temphum13_functionv+0x180>)
 23fb32e:	f000 8097 	beq.w	23fb460 <_Z18temphum13_functionv+0x148>
  {
    //set new value to global value
    temperature = (tempC * 1.8) + 32;		              //convert celsuis to fahrenheit
 23fb332:	ee10 0a10 	vmov	r0, s0
 23fb336:	f7ff f9c7 	bl	23fa6c8 <__aeabi_f2d>
 23fb33a:	a353      	add	r3, pc, #332	; (adr r3, 23fb488 <_Z18temphum13_functionv+0x170>)
 23fb33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb340:	f7ff fa1a 	bl	23fa778 <__aeabi_dmul>
 23fb344:	4b55      	ldr	r3, [pc, #340]	; (23fb49c <_Z18temphum13_functionv+0x184>)
 23fb346:	2200      	movs	r2, #0
 23fb348:	f7ff f860 	bl	23fa40c <__adddf3>
 23fb34c:	f7ff fcae 	bl	23facac <__aeabi_d2f>
 23fb350:	4e53      	ldr	r6, [pc, #332]	; (23fb4a0 <_Z18temphum13_functionv+0x188>)
    humidity = temphum13_get_humidity(&temphum13);    //get new humidity value
 23fb352:	4d54      	ldr	r5, [pc, #336]	; (23fb4a4 <_Z18temphum13_functionv+0x18c>)
    temperature = (tempC * 1.8) + 32;		              //convert celsuis to fahrenheit
 23fb354:	6030      	str	r0, [r6, #0]
    humidity = temphum13_get_humidity(&temphum13);    //get new humidity value
 23fb356:	484e      	ldr	r0, [pc, #312]	; (23fb490 <_Z18temphum13_functionv+0x178>)
 23fb358:	f000 fee8 	bl	23fc12c <temphum13_get_humidity>

    if (systemStatus == I2C_ERROR)   //change status only if previous I2C error
 23fb35c:	7823      	ldrb	r3, [r4, #0]
    humidity = temphum13_get_humidity(&temphum13);    //get new humidity value
 23fb35e:	ed85 0a00 	vstr	s0, [r5]
    if (systemStatus == I2C_ERROR)   //change status only if previous I2C error
 23fb362:	2b06      	cmp	r3, #6
 23fb364:	d107      	bne.n	23fb376 <_Z18temphum13_functionv+0x5e>
    {
      Log.info("I2C Error Reset");   //debug message
 23fb366:	4950      	ldr	r1, [pc, #320]	; (23fb4a8 <_Z18temphum13_functionv+0x190>)
 23fb368:	4850      	ldr	r0, [pc, #320]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb36a:	f7ff fdd5 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      systemStatus = NORMAL_STATUS;   //set system status
 23fb36e:	2300      	movs	r3, #0
      errorCount = 0;                 //reset error count (valid value read)
 23fb370:	4a4f      	ldr	r2, [pc, #316]	; (23fb4b0 <_Z18temphum13_functionv+0x198>)
      systemStatus = NORMAL_STATUS;   //set system status
 23fb372:	7023      	strb	r3, [r4, #0]
      errorCount = 0;                 //reset error count (valid value read)
 23fb374:	8013      	strh	r3, [r2, #0]
    }

    //debug messages
    Log.info("Temperature °F : %.2f \n", temperature);
 23fb376:	6830      	ldr	r0, [r6, #0]
 23fb378:	f7ff f9a6 	bl	23fa6c8 <__aeabi_f2d>
 23fb37c:	4602      	mov	r2, r0
 23fb37e:	460b      	mov	r3, r1
 23fb380:	484a      	ldr	r0, [pc, #296]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb382:	494c      	ldr	r1, [pc, #304]	; (23fb4b4 <_Z18temphum13_functionv+0x19c>)
 23fb384:	f7ff fdc8 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("Relative Humidity : %.2f \n", humidity);
 23fb388:	6828      	ldr	r0, [r5, #0]
 23fb38a:	f7ff f99d 	bl	23fa6c8 <__aeabi_f2d>
 23fb38e:	4602      	mov	r2, r0
 23fb390:	460b      	mov	r3, r1
 23fb392:	4846      	ldr	r0, [pc, #280]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb394:	4948      	ldr	r1, [pc, #288]	; (23fb4b8 <_Z18temphum13_functionv+0x1a0>)
 23fb396:	f7ff fdbf 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>

    //temperature outside of window?
    if ((temperature > HIGH_TEMP) || (temperature < LOW_TEMP))
 23fb39a:	edd6 7a00 	vldr	s15, [r6]
 23fb39e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 23fb4bc <_Z18temphum13_functionv+0x1a4>
 23fb3a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 23fb3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb3aa:	dc06      	bgt.n	23fb3ba <_Z18temphum13_functionv+0xa2>
 23fb3ac:	ed9f 7a44 	vldr	s14, [pc, #272]	; 23fb4c0 <_Z18temphum13_functionv+0x1a8>
 23fb3b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 23fb3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb3b8:	d534      	bpl.n	23fb424 <_Z18temphum13_functionv+0x10c>
    {
      systemStatus = TEMPERATURE_WARNING;           //set system status
 23fb3ba:	2304      	movs	r3, #4
      Log.info("temperature outside of window");   //debug message

      if(tempCount < MAXMESSAGE)
 23fb3bc:	4e41      	ldr	r6, [pc, #260]	; (23fb4c4 <_Z18temphum13_functionv+0x1ac>)
      Log.info("temperature outside of window");   //debug message
 23fb3be:	4942      	ldr	r1, [pc, #264]	; (23fb4c8 <_Z18temphum13_functionv+0x1b0>)
 23fb3c0:	483a      	ldr	r0, [pc, #232]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
      systemStatus = TEMPERATURE_WARNING;           //set system status
 23fb3c2:	7023      	strb	r3, [r4, #0]
      Log.info("temperature outside of window");   //debug message
 23fb3c4:	f7ff fda8 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      if(tempCount < MAXMESSAGE)
 23fb3c8:	8833      	ldrh	r3, [r6, #0]
 23fb3ca:	b943      	cbnz	r3, 23fb3de <_Z18temphum13_functionv+0xc6>
      {
        Particle.publish("Temperature Warning");    //send warning message
 23fb3cc:	4668      	mov	r0, sp
 23fb3ce:	493f      	ldr	r1, [pc, #252]	; (23fb4cc <_Z18temphum13_functionv+0x1b4>)
 23fb3d0:	f7ff fd56 	bl	23fae80 <_ZN10CloudClass7publishEPKc.isra.0>
 23fb3d4:	a801      	add	r0, sp, #4
 23fb3d6:	f7ff fe07 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        publish_status();                           //publish status message
 23fb3da:	f7ff fee3 	bl	23fb1a4 <_Z14publish_statusv>
      }

      tempCount++;    //increment message count
 23fb3de:	8833      	ldrh	r3, [r6, #0]
 23fb3e0:	3301      	adds	r3, #1
 23fb3e2:	8033      	strh	r3, [r6, #0]
        publish_status();                       //publish status message
      }
    }

    //humdity is too high?
    if (humidity > HIGH_HUM)
 23fb3e4:	ed95 7a00 	vldr	s14, [r5]
 23fb3e8:	eddf 7a39 	vldr	s15, [pc, #228]	; 23fb4d0 <_Z18temphum13_functionv+0x1b8>
 23fb3ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23fb3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb3f4:	dd24      	ble.n	23fb440 <_Z18temphum13_functionv+0x128>
    {
      systemStatus = HUMIDITY_WARNING;    //set system status
 23fb3f6:	2305      	movs	r3, #5
 23fb3f8:	7023      	strb	r3, [r4, #0]
      Log.info("high humidity event");   //debug message

      if(humCount < MAXMESSAGE)
 23fb3fa:	4c36      	ldr	r4, [pc, #216]	; (23fb4d4 <_Z18temphum13_functionv+0x1bc>)
      Log.info("high humidity event");   //debug message
 23fb3fc:	4936      	ldr	r1, [pc, #216]	; (23fb4d8 <_Z18temphum13_functionv+0x1c0>)
 23fb3fe:	482b      	ldr	r0, [pc, #172]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb400:	f7ff fd8a 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      if(humCount < MAXMESSAGE)
 23fb404:	8823      	ldrh	r3, [r4, #0]
 23fb406:	b943      	cbnz	r3, 23fb41a <_Z18temphum13_functionv+0x102>
      {
        Particle.publish("Humidity Warning");   //send warning message
 23fb408:	4668      	mov	r0, sp
 23fb40a:	4934      	ldr	r1, [pc, #208]	; (23fb4dc <_Z18temphum13_functionv+0x1c4>)
 23fb40c:	f7ff fd38 	bl	23fae80 <_ZN10CloudClass7publishEPKc.isra.0>
 23fb410:	a801      	add	r0, sp, #4
 23fb412:	f7ff fde9 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        publish_status();                       //publish status message
 23fb416:	f7ff fec5 	bl	23fb1a4 <_Z14publish_statusv>
    if(errorCount < MAXMESSAGE)
    {
      Particle.publish("temp/humdity sensor error");   //send error message
    }

    errorCount++;   //increment error message count  
 23fb41a:	8823      	ldrh	r3, [r4, #0]
 23fb41c:	3301      	adds	r3, #1
 23fb41e:	8023      	strh	r3, [r4, #0]
  }
}
 23fb420:	b002      	add	sp, #8
 23fb422:	bd70      	pop	{r4, r5, r6, pc}
      if ((systemStatus == TEMPERATURE_WARNING) && (systemStatus != HUMIDITY_WARNING))  //change status only if previous temperature warning and humidity warning isn't active
 23fb424:	7823      	ldrb	r3, [r4, #0]
 23fb426:	2b04      	cmp	r3, #4
 23fb428:	d1dc      	bne.n	23fb3e4 <_Z18temphum13_functionv+0xcc>
        Log.info("Temperature Event Reset");    //debug message
 23fb42a:	492d      	ldr	r1, [pc, #180]	; (23fb4e0 <_Z18temphum13_functionv+0x1c8>)
 23fb42c:	481f      	ldr	r0, [pc, #124]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb42e:	f7ff fd73 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
        systemStatus = NORMAL_STATUS;           //set system status
 23fb432:	2300      	movs	r3, #0
        tempCount = 0;                          //reset count
 23fb434:	4a23      	ldr	r2, [pc, #140]	; (23fb4c4 <_Z18temphum13_functionv+0x1ac>)
        systemStatus = NORMAL_STATUS;           //set system status
 23fb436:	7023      	strb	r3, [r4, #0]
        tempCount = 0;                          //reset count
 23fb438:	8013      	strh	r3, [r2, #0]
        publish_status();                       //publish status message
 23fb43a:	f7ff feb3 	bl	23fb1a4 <_Z14publish_statusv>
 23fb43e:	e7d1      	b.n	23fb3e4 <_Z18temphum13_functionv+0xcc>
      if ((systemStatus == HUMIDITY_WARNING) && (systemStatus != TEMPERATURE_WARNING))    //change status only if previous humidity warning and temperature warning isn't active
 23fb440:	7823      	ldrb	r3, [r4, #0]
 23fb442:	2b05      	cmp	r3, #5
 23fb444:	d1ec      	bne.n	23fb420 <_Z18temphum13_functionv+0x108>
        Log.info("Humidity Event Reset");   //debug message
 23fb446:	4927      	ldr	r1, [pc, #156]	; (23fb4e4 <_Z18temphum13_functionv+0x1cc>)
 23fb448:	4818      	ldr	r0, [pc, #96]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb44a:	f7ff fd65 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
        systemStatus = NORMAL_STATUS;       //set system status
 23fb44e:	2300      	movs	r3, #0
        humCount = 0;                       //reset count
 23fb450:	4a20      	ldr	r2, [pc, #128]	; (23fb4d4 <_Z18temphum13_functionv+0x1bc>)
        systemStatus = NORMAL_STATUS;       //set system status
 23fb452:	7023      	strb	r3, [r4, #0]
        humCount = 0;                       //reset count
 23fb454:	8013      	strh	r3, [r2, #0]
}
 23fb456:	b002      	add	sp, #8
 23fb458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        publish_status();                   //publish status message
 23fb45c:	f7ff bea2 	b.w	23fb1a4 <_Z14publish_statusv>
    systemStatus = I2C_ERROR;    //set system status
 23fb460:	2306      	movs	r3, #6
 23fb462:	7023      	strb	r3, [r4, #0]
    if(errorCount < MAXMESSAGE)
 23fb464:	4c12      	ldr	r4, [pc, #72]	; (23fb4b0 <_Z18temphum13_functionv+0x198>)
    Log.info("I2C Bus Error");   //debug message
 23fb466:	4920      	ldr	r1, [pc, #128]	; (23fb4e8 <_Z18temphum13_functionv+0x1d0>)
 23fb468:	4810      	ldr	r0, [pc, #64]	; (23fb4ac <_Z18temphum13_functionv+0x194>)
 23fb46a:	f7ff fd55 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
    if(errorCount < MAXMESSAGE)
 23fb46e:	8823      	ldrh	r3, [r4, #0]
 23fb470:	2b00      	cmp	r3, #0
 23fb472:	d1d2      	bne.n	23fb41a <_Z18temphum13_functionv+0x102>
      Particle.publish("temp/humdity sensor error");   //send error message
 23fb474:	4668      	mov	r0, sp
 23fb476:	491d      	ldr	r1, [pc, #116]	; (23fb4ec <_Z18temphum13_functionv+0x1d4>)
 23fb478:	f7ff fd02 	bl	23fae80 <_ZN10CloudClass7publishEPKc.isra.0>
 23fb47c:	a801      	add	r0, sp, #4
 23fb47e:	f7ff fdb3 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb482:	e7ca      	b.n	23fb41a <_Z18temphum13_functionv+0x102>
 23fb484:	f3af 8000 	nop.w
 23fb488:	cccccccd 	.word	0xcccccccd
 23fb48c:	3ffccccc 	.word	0x3ffccccc
 23fb490:	1007ada4 	.word	0x1007ada4
 23fb494:	47800000 	.word	0x47800000
 23fb498:	1007ae1a 	.word	0x1007ae1a
 23fb49c:	40400000 	.word	0x40400000
 23fb4a0:	1007ae20 	.word	0x1007ae20
 23fb4a4:	1007add4 	.word	0x1007add4
 23fb4a8:	023ff9df 	.word	0x023ff9df
 23fb4ac:	1007ae5c 	.word	0x1007ae5c
 23fb4b0:	1007adce 	.word	0x1007adce
 23fb4b4:	023ff9ef 	.word	0x023ff9ef
 23fb4b8:	023ffa08 	.word	0x023ffa08
 23fb4bc:	42be0000 	.word	0x42be0000
 23fb4c0:	42340000 	.word	0x42340000
 23fb4c4:	1007ae1c 	.word	0x1007ae1c
 23fb4c8:	023ffa23 	.word	0x023ffa23
 23fb4cc:	023ffa41 	.word	0x023ffa41
 23fb4d0:	42a00000 	.word	0x42a00000
 23fb4d4:	1007add0 	.word	0x1007add0
 23fb4d8:	023ffa6d 	.word	0x023ffa6d
 23fb4dc:	023ffa81 	.word	0x023ffa81
 23fb4e0:	023ffa55 	.word	0x023ffa55
 23fb4e4:	023ffa92 	.word	0x023ffa92
 23fb4e8:	023ffaa7 	.word	0x023ffaa7
 23fb4ec:	023ffab5 	.word	0x023ffab5

023fb4f0 <_Z13sr04_functionv>:

//HC-SR04 function
void sr04_function()
{
 23fb4f0:	b513      	push	{r0, r1, r4, lr}
  waterLevel = rangefinder.getDistanceInch();
 23fb4f2:	4821      	ldr	r0, [pc, #132]	; (23fb578 <_Z13sr04_functionv+0x88>)
 23fb4f4:	f000 f9e4 	bl	23fb8c0 <_ZN7HC_SR0415getDistanceInchEv>
 23fb4f8:	ec51 0b10 	vmov	r0, r1, d0
 23fb4fc:	f7ff fbd6 	bl	23facac <__aeabi_d2f>
 23fb500:	4c1e      	ldr	r4, [pc, #120]	; (23fb57c <_Z13sr04_functionv+0x8c>)
 23fb502:	6020      	str	r0, [r4, #0]
  Log.info("Sensor in IN : %.2f \n", waterLevel);    //debug message
 23fb504:	f7ff f8e0 	bl	23fa6c8 <__aeabi_f2d>
 23fb508:	4602      	mov	r2, r0
 23fb50a:	460b      	mov	r3, r1
 23fb50c:	481c      	ldr	r0, [pc, #112]	; (23fb580 <_Z13sr04_functionv+0x90>)
 23fb50e:	491d      	ldr	r1, [pc, #116]	; (23fb584 <_Z13sr04_functionv+0x94>)
 23fb510:	f7ff fd02 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>

  if (waterLevel <= HIGH_WATER)
 23fb514:	ed94 7a00 	vldr	s14, [r4]
 23fb518:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 23fb51c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23fb520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb524:	4c18      	ldr	r4, [pc, #96]	; (23fb588 <_Z13sr04_functionv+0x98>)
 23fb526:	d817      	bhi.n	23fb558 <_Z13sr04_functionv+0x68>
  {
    systemStatus = WATER_WARNING;     //set system status
 23fb528:	2301      	movs	r3, #1
 23fb52a:	7023      	strb	r3, [r4, #0]
    Log.info("high water event");    //debug message

    if(waterCount < WATERMESSAGE)
 23fb52c:	4c17      	ldr	r4, [pc, #92]	; (23fb58c <_Z13sr04_functionv+0x9c>)
    Log.info("high water event");    //debug message
 23fb52e:	4918      	ldr	r1, [pc, #96]	; (23fb590 <_Z13sr04_functionv+0xa0>)
 23fb530:	4813      	ldr	r0, [pc, #76]	; (23fb580 <_Z13sr04_functionv+0x90>)
 23fb532:	f7ff fcf1 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
    if(waterCount < WATERMESSAGE)
 23fb536:	8823      	ldrh	r3, [r4, #0]
 23fb538:	2b04      	cmp	r3, #4
 23fb53a:	d808      	bhi.n	23fb54e <_Z13sr04_functionv+0x5e>
    {
      Particle.publish("Water Warning");    //send warning message
 23fb53c:	4668      	mov	r0, sp
 23fb53e:	4915      	ldr	r1, [pc, #84]	; (23fb594 <_Z13sr04_functionv+0xa4>)
 23fb540:	f7ff fc9e 	bl	23fae80 <_ZN10CloudClass7publishEPKc.isra.0>
 23fb544:	a801      	add	r0, sp, #4
 23fb546:	f7ff fd4f 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      publish_status();                     //publish status message
 23fb54a:	f7ff fe2b 	bl	23fb1a4 <_Z14publish_statusv>
    }

    waterCount++;   //increment message count
 23fb54e:	8823      	ldrh	r3, [r4, #0]
 23fb550:	3301      	adds	r3, #1
 23fb552:	8023      	strh	r3, [r4, #0]
      systemStatus = NORMAL_STATUS;       //set system status
      waterCount = 0;                     //reset count
      publish_status();                   //publish status message
    }
  }
}
 23fb554:	b002      	add	sp, #8
 23fb556:	bd10      	pop	{r4, pc}
    if (systemStatus == WATER_WARNING)   //change status only if previous water level warning 
 23fb558:	7823      	ldrb	r3, [r4, #0]
 23fb55a:	2b01      	cmp	r3, #1
 23fb55c:	d1fa      	bne.n	23fb554 <_Z13sr04_functionv+0x64>
      Log.info("Water Warning Reset");    //debug message
 23fb55e:	490e      	ldr	r1, [pc, #56]	; (23fb598 <_Z13sr04_functionv+0xa8>)
 23fb560:	4807      	ldr	r0, [pc, #28]	; (23fb580 <_Z13sr04_functionv+0x90>)
 23fb562:	f7ff fcd9 	bl	23faf18 <_ZNK5spark6Logger4infoEPKcz>
      systemStatus = NORMAL_STATUS;       //set system status
 23fb566:	2300      	movs	r3, #0
      waterCount = 0;                     //reset count
 23fb568:	4a08      	ldr	r2, [pc, #32]	; (23fb58c <_Z13sr04_functionv+0x9c>)
      systemStatus = NORMAL_STATUS;       //set system status
 23fb56a:	7023      	strb	r3, [r4, #0]
      waterCount = 0;                     //reset count
 23fb56c:	8013      	strh	r3, [r2, #0]
}
 23fb56e:	b002      	add	sp, #8
 23fb570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      publish_status();                   //publish status message
 23fb574:	f7ff be16 	b.w	23fb1a4 <_Z14publish_statusv>
 23fb578:	1007ae00 	.word	0x1007ae00
 23fb57c:	1007ae28 	.word	0x1007ae28
 23fb580:	1007ae5c 	.word	0x1007ae5c
 23fb584:	023ffacf 	.word	0x023ffacf
 23fb588:	1007ae1a 	.word	0x1007ae1a
 23fb58c:	1007ae24 	.word	0x1007ae24
 23fb590:	023ffae5 	.word	0x023ffae5
 23fb594:	023ffaf6 	.word	0x023ffaf6
 23fb598:	023ffb04 	.word	0x023ffb04

023fb59c <loop>:
{
 23fb59c:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb59e:	f000 fe75 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - currentCheck >= currentInterval.count())
 23fb5a2:	4c1b      	ldr	r4, [pc, #108]	; (23fb610 <loop+0x74>)
 23fb5a4:	6823      	ldr	r3, [r4, #0]
 23fb5a6:	1ac0      	subs	r0, r0, r3
 23fb5a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23fb5ac:	d304      	bcc.n	23fb5b8 <loop+0x1c>
 23fb5ae:	f000 fe6d 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
		currentCheck = millis();    //set current check to current time
 23fb5b2:	6020      	str	r0, [r4, #0]
    ACcurrent_function();       //get current amperage value
 23fb5b4:	f7ff fe00 	bl	23fb1b8 <_Z18ACcurrent_functionv>
 23fb5b8:	f000 fe68 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - waterCheck >= waterInterval.count())
 23fb5bc:	4c15      	ldr	r4, [pc, #84]	; (23fb614 <loop+0x78>)
 23fb5be:	6823      	ldr	r3, [r4, #0]
 23fb5c0:	1ac0      	subs	r0, r0, r3
 23fb5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 23fb5c6:	4298      	cmp	r0, r3
 23fb5c8:	d904      	bls.n	23fb5d4 <loop+0x38>
 23fb5ca:	f000 fe5f 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
		waterCheck = millis();    //set current check to current time
 23fb5ce:	6020      	str	r0, [r4, #0]
    sr04_function();          //check water level   
 23fb5d0:	f7ff ff8e 	bl	23fb4f0 <_Z13sr04_functionv>
 23fb5d4:	f000 fe5a 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - tempCheck >= temperatureInterval.count())
 23fb5d8:	4c0f      	ldr	r4, [pc, #60]	; (23fb618 <loop+0x7c>)
 23fb5da:	6823      	ldr	r3, [r4, #0]
 23fb5dc:	1ac0      	subs	r0, r0, r3
 23fb5de:	4b0f      	ldr	r3, [pc, #60]	; (23fb61c <loop+0x80>)
 23fb5e0:	4298      	cmp	r0, r3
 23fb5e2:	d904      	bls.n	23fb5ee <loop+0x52>
 23fb5e4:	f000 fe52 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
		tempCheck = millis();   //set current check to current time
 23fb5e8:	6020      	str	r0, [r4, #0]
    temphum13_function();   //get current temp/hum value
 23fb5ea:	f7ff fe95 	bl	23fb318 <_Z18temphum13_functionv>
 23fb5ee:	f000 fe4d 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - publishCheck >= publishInterval.count())
 23fb5f2:	4c0b      	ldr	r4, [pc, #44]	; (23fb620 <loop+0x84>)
 23fb5f4:	6823      	ldr	r3, [r4, #0]
 23fb5f6:	1ac0      	subs	r0, r0, r3
 23fb5f8:	4b0a      	ldr	r3, [pc, #40]	; (23fb624 <loop+0x88>)
 23fb5fa:	4298      	cmp	r0, r3
 23fb5fc:	d306      	bcc.n	23fb60c <loop+0x70>
 23fb5fe:	f000 fe45 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
		publishCheck = millis();    //set current check to current time
 23fb602:	6020      	str	r0, [r4, #0]
}
 23fb604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    publish_status();           //publish status message
 23fb608:	f7ff bdcc 	b.w	23fb1a4 <_Z14publish_statusv>
}
 23fb60c:	bd10      	pop	{r4, pc}
 23fb60e:	bf00      	nop
 23fb610:	1007adbc 	.word	0x1007adbc
 23fb614:	1007adb8 	.word	0x1007adb8
 23fb618:	1007adc4 	.word	0x1007adc4
 23fb61c:	000927bf 	.word	0x000927bf
 23fb620:	1007adc0 	.word	0x1007adc0
 23fb624:	0036ee80 	.word	0x0036ee80

023fb628 <_Z10sendStatus6String>:
{
 23fb628:	b508      	push	{r3, lr}
  ACcurrent_function();   //pump function
 23fb62a:	f7ff fdc5 	bl	23fb1b8 <_Z18ACcurrent_functionv>
  temphum13_function();   //temp/hum function
 23fb62e:	f7ff fe73 	bl	23fb318 <_Z18temphum13_functionv>
  sr04_function();        //ultrasonic sensor function
 23fb632:	f7ff ff5d 	bl	23fb4f0 <_Z13sr04_functionv>
  publish_status();       //publish status message
 23fb636:	f7ff fdb5 	bl	23fb1a4 <_Z14publish_statusv>
}
 23fb63a:	2001      	movs	r0, #1
 23fb63c:	bd08      	pop	{r3, pc}

023fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb63e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb642:	4604      	mov	r4, r0
 23fb644:	460d      	mov	r5, r1
 23fb646:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb648:	d916      	bls.n	23fb678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fb64a:	4290      	cmp	r0, r2
 23fb64c:	d215      	bcs.n	23fb67a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fb64e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb652:	1a75      	subs	r5, r6, r1
 23fb654:	f1a1 0714 	sub.w	r7, r1, #20
 23fb658:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb65a:	42b7      	cmp	r7, r6
 23fb65c:	d01c      	beq.n	23fb698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fb65e:	b12c      	cbz	r4, 23fb66c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fb660:	4631      	mov	r1, r6
 23fb662:	4620      	mov	r0, r4
 23fb664:	f003 fb2f 	bl	23fecc6 <_ZN6StringC1EOS_>
 23fb668:	7c33      	ldrb	r3, [r6, #16]
 23fb66a:	7423      	strb	r3, [r4, #16]
 23fb66c:	4630      	mov	r0, r6
 23fb66e:	f003 faae 	bl	23febce <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb672:	3e14      	subs	r6, #20
 23fb674:	3c14      	subs	r4, #20
 23fb676:	e7f0      	b.n	23fb65a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb678:	d00e      	beq.n	23fb698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fb67a:	42b5      	cmp	r5, r6
 23fb67c:	d00c      	beq.n	23fb698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fb67e:	b12c      	cbz	r4, 23fb68c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fb680:	4629      	mov	r1, r5
 23fb682:	4620      	mov	r0, r4
 23fb684:	f003 fb1f 	bl	23fecc6 <_ZN6StringC1EOS_>
 23fb688:	7c2b      	ldrb	r3, [r5, #16]
 23fb68a:	7423      	strb	r3, [r4, #16]
 23fb68c:	4628      	mov	r0, r5
 23fb68e:	f003 fa9e 	bl	23febce <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb692:	3514      	adds	r5, #20
 23fb694:	3414      	adds	r4, #20
 23fb696:	e7f0      	b.n	23fb67a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fb698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb69a:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb6a0:	e9c0 3300 	strd	r3, r3, [r0]
 23fb6a4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb6a6:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb6a8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb6aa:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb6ac:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb6ae:	dd24      	ble.n	23fb6fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb6b0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fb6b4:	fb08 f007 	mul.w	r0, r8, r7
 23fb6b8:	f001 fa64 	bl	23fcb84 <malloc>
            if (!d) {
 23fb6bc:	4605      	mov	r5, r0
 23fb6be:	b1e0      	cbz	r0, 23fb6fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fb6c0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb6c4:	fb08 1202 	mla	r2, r8, r2, r1
 23fb6c8:	f7ff ffb9 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb6cc:	6820      	ldr	r0, [r4, #0]
 23fb6ce:	f001 fa67 	bl	23fcba0 <free>
        data_ = d;
 23fb6d2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb6d4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb6d6:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fb6da:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fb6de:	45b8      	cmp	r8, r7
 23fb6e0:	d009      	beq.n	23fb6f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fb6e2:	4639      	mov	r1, r7
 23fb6e4:	4628      	mov	r0, r5
 23fb6e6:	f003 fb08 	bl	23fecfa <_ZN6StringC1ERKS_>
 23fb6ea:	7c3b      	ldrb	r3, [r7, #16]
 23fb6ec:	3514      	adds	r5, #20
 23fb6ee:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fb6f2:	3714      	adds	r7, #20
 23fb6f4:	e7f3      	b.n	23fb6de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fb6f6:	6873      	ldr	r3, [r6, #4]
 23fb6f8:	6063      	str	r3, [r4, #4]
}
 23fb6fa:	4620      	mov	r0, r4
 23fb6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb700 <_GLOBAL__sub_I_rangefinder>:
}
 23fb700:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 23fb702:	2400      	movs	r4, #0
 23fb704:	2501      	movs	r5, #1
 23fb706:	4b28      	ldr	r3, [pc, #160]	; (23fb7a8 <_GLOBAL__sub_I_rangefinder+0xa8>)
 23fb708:	b08c      	sub	sp, #48	; 0x30
 23fb70a:	701c      	strb	r4, [r3, #0]
 23fb70c:	4b27      	ldr	r3, [pc, #156]	; (23fb7ac <_GLOBAL__sub_I_rangefinder+0xac>)
HC_SR04 rangefinder = HC_SR04(trigPin, echoPin);    //initializes pins for ultrasonic sensor
 23fb70e:	2113      	movs	r1, #19
 23fb710:	701d      	strb	r5, [r3, #0]
 23fb712:	220e      	movs	r2, #14
 23fb714:	4826      	ldr	r0, [pc, #152]	; (23fb7b0 <_GLOBAL__sub_I_rangefinder+0xb0>)
 23fb716:	f000 f859 	bl	23fb7cc <_ZN7HC_SR04C1Eii>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fb71a:	4b26      	ldr	r3, [pc, #152]	; (23fb7b4 <_GLOBAL__sub_I_rangefinder+0xb4>)
    SleepResult() {}
 23fb71c:	4a26      	ldr	r2, [pc, #152]	; (23fb7b8 <_GLOBAL__sub_I_rangefinder+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
 23fb71e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fb722:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fb724:	2002      	movs	r0, #2
 23fb726:	f001 f8b3 	bl	23fc890 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fb72a:	4621      	mov	r1, r4
 23fb72c:	4628      	mov	r0, r5
 23fb72e:	f001 f8cb 	bl	23fc8c8 <system_thread_set_state>
        capacity_(0) {
 23fb732:	e9cd 4400 	strd	r4, r4, [sp]
 23fb736:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fb738:	f003 fc40 	bl	23fefbc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fb73c:	4c1f      	ldr	r4, [pc, #124]	; (23fb7bc <_GLOBAL__sub_I_rangefinder+0xbc>)
 23fb73e:	4605      	mov	r5, r0
 23fb740:	4626      	mov	r6, r4
 23fb742:	4669      	mov	r1, sp
 23fb744:	a803      	add	r0, sp, #12
 23fb746:	f7ff ffa8 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fb74a:	a903      	add	r1, sp, #12
 23fb74c:	a806      	add	r0, sp, #24
 23fb74e:	f7ff ffa4 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb752:	4b1b      	ldr	r3, [pc, #108]	; (23fb7c0 <_GLOBAL__sub_I_rangefinder+0xc0>)
 23fb754:	a906      	add	r1, sp, #24
 23fb756:	f846 3b04 	str.w	r3, [r6], #4
 23fb75a:	a809      	add	r0, sp, #36	; 0x24
 23fb75c:	f7ff ff9d 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb760:	aa09      	add	r2, sp, #36	; 0x24
 23fb762:	211e      	movs	r1, #30
 23fb764:	4630      	mov	r0, r6
 23fb766:	f002 fd7b 	bl	23fe260 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb76a:	a809      	add	r0, sp, #36	; 0x24
 23fb76c:	f7ff fc52 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb770:	a806      	add	r0, sp, #24
 23fb772:	f7ff fc4f 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb776:	4b13      	ldr	r3, [pc, #76]	; (23fb7c4 <_GLOBAL__sub_I_rangefinder+0xc4>)
 23fb778:	6225      	str	r5, [r4, #32]
 23fb77a:	6023      	str	r3, [r4, #0]
 23fb77c:	a803      	add	r0, sp, #12
 23fb77e:	f7ff fc49 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb782:	4b11      	ldr	r3, [pc, #68]	; (23fb7c8 <_GLOBAL__sub_I_rangefinder+0xc8>)
 23fb784:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fb786:	f003 fc19 	bl	23fefbc <_Z16_fetch_usbserialv>
 23fb78a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb78e:	f003 fc05 	bl	23fef9c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb792:	f002 fa49 	bl	23fdc28 <_ZN5spark10LogManager8instanceEv>
 23fb796:	4621      	mov	r1, r4
 23fb798:	f002 fc3a 	bl	23fe010 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);    //set logging level
 23fb79c:	4668      	mov	r0, sp
 23fb79e:	f7ff fc39 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fb7a2:	b00c      	add	sp, #48	; 0x30
 23fb7a4:	bd70      	pop	{r4, r5, r6, pc}
 23fb7a6:	bf00      	nop
 23fb7a8:	1007ad8c 	.word	0x1007ad8c
 23fb7ac:	1007ad8d 	.word	0x1007ad8d
 23fb7b0:	1007ae00 	.word	0x1007ae00
 23fb7b4:	1007ad80 	.word	0x1007ad80
 23fb7b8:	ffff0000 	.word	0xffff0000
 23fb7bc:	1007add8 	.word	0x1007add8
 23fb7c0:	023ffb20 	.word	0x023ffb20
 23fb7c4:	023ffcb4 	.word	0x023ffcb4
 23fb7c8:	023ffb38 	.word	0x023ffb38

023fb7cc <_ZN7HC_SR04C1Eii>:
#include "HC_SR04.h"
HC_SR04::HC_SR04(int trigPin, int echoPin){
 23fb7cc:	b5d0      	push	{r4, r6, r7, lr}
 23fb7ce:	4604      	mov	r4, r0
  _minCM = 10.0;
 23fb7d0:	2600      	movs	r6, #0
 23fb7d2:	4f0a      	ldr	r7, [pc, #40]	; (23fb7fc <_ZN7HC_SR04C1Eii+0x30>)
HC_SR04::HC_SR04(int trigPin, int echoPin){
 23fb7d4:	4608      	mov	r0, r1
  _minCM = 10.0;
 23fb7d6:	e9c4 6702 	strd	r6, r7, [r4, #8]
  _maxCM = 250.0;
 23fb7da:	2600      	movs	r6, #0
 23fb7dc:	4f08      	ldr	r7, [pc, #32]	; (23fb800 <_ZN7HC_SR04C1Eii+0x34>)
  _trigPin = trigPin;
  _echoPin = echoPin;
 23fb7de:	e9c4 2100 	strd	r2, r1, [r4]
  _maxCM = 250.0;
 23fb7e2:	e9c4 6704 	strd	r6, r7, [r4, #16]
  pinMode(_trigPin, OUTPUT);
 23fb7e6:	2101      	movs	r1, #1
 23fb7e8:	b280      	uxth	r0, r0
 23fb7ea:	f003 fd2f 	bl	23ff24c <pinMode>
  pinMode(_echoPin, INPUT);
 23fb7ee:	8820      	ldrh	r0, [r4, #0]
 23fb7f0:	2100      	movs	r1, #0
 23fb7f2:	f003 fd2b 	bl	23ff24c <pinMode>
}
 23fb7f6:	4620      	mov	r0, r4
 23fb7f8:	bdd0      	pop	{r4, r6, r7, pc}
 23fb7fa:	bf00      	nop
 23fb7fc:	40240000 	.word	0x40240000
 23fb800:	406f4000 	.word	0x406f4000

023fb804 <_ZN7HC_SR0416sendTriggerPulseEi>:
     return -1;
  }
  return (distCM / 2.5);
}

void HC_SR04::sendTriggerPulse(int pin){
 23fb804:	b510      	push	{r4, lr}
    digitalWrite(pin, HIGH);
 23fb806:	b28c      	uxth	r4, r1
 23fb808:	4620      	mov	r0, r4
 23fb80a:	2101      	movs	r1, #1
 23fb80c:	f003 fd2f 	bl	23ff26e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fb810:	200a      	movs	r0, #10
 23fb812:	f000 fd1f 	bl	23fc254 <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
 23fb816:	4620      	mov	r0, r4
}
 23fb818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(pin, LOW);
 23fb81c:	2100      	movs	r1, #0
 23fb81e:	f003 bd26 	b.w	23ff26e <digitalWrite>

023fb822 <_ZN7HC_SR0411waitForEchoEiil>:

void HC_SR04::waitForEcho(int pin, int value, long timeout){
 23fb822:	b570      	push	{r4, r5, r6, lr}
 23fb824:	460d      	mov	r5, r1
 23fb826:	461c      	mov	r4, r3
 23fb828:	4616      	mov	r6, r2
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fb82a:	f000 fd2f 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
 23fb82e:	b2ad      	uxth	r5, r5
    long giveupTime = millis() + timeout;
 23fb830:	4404      	add	r4, r0
    while (digitalRead(pin) != value && millis() < giveupTime) {}
 23fb832:	4628      	mov	r0, r5
 23fb834:	f003 fd34 	bl	23ff2a0 <digitalRead>
 23fb838:	42b0      	cmp	r0, r6
 23fb83a:	d003      	beq.n	23fb844 <_ZN7HC_SR0411waitForEchoEiil+0x22>
 23fb83c:	f000 fd26 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
 23fb840:	4284      	cmp	r4, r0
 23fb842:	d8f6      	bhi.n	23fb832 <_ZN7HC_SR0411waitForEchoEiil+0x10>
}
 23fb844:	bd70      	pop	{r4, r5, r6, pc}
	...

023fb848 <_ZN7HC_SR0413getDistanceCMEv>:
double HC_SR04::getDistanceCM(){
 23fb848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb84a:	4604      	mov	r4, r0
  sendTriggerPulse(_trigPin);
 23fb84c:	6841      	ldr	r1, [r0, #4]
 23fb84e:	f7ff ffd9 	bl	23fb804 <_ZN7HC_SR0416sendTriggerPulseEi>
  waitForEcho(_echoPin, HIGH, 100);
 23fb852:	2364      	movs	r3, #100	; 0x64
 23fb854:	2201      	movs	r2, #1
 23fb856:	6821      	ldr	r1, [r4, #0]
 23fb858:	4620      	mov	r0, r4
 23fb85a:	f7ff ffe2 	bl	23fb822 <_ZN7HC_SR0411waitForEchoEiil>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fb85e:	f000 fd07 	bl	23fc270 <HAL_Timer_Get_Micro_Seconds>
  waitForEcho(_echoPin, LOW, 100);
 23fb862:	2364      	movs	r3, #100	; 0x64
 23fb864:	2200      	movs	r2, #0
 23fb866:	6821      	ldr	r1, [r4, #0]
 23fb868:	4605      	mov	r5, r0
 23fb86a:	4620      	mov	r0, r4
 23fb86c:	f7ff ffd9 	bl	23fb822 <_ZN7HC_SR0411waitForEchoEiil>
 23fb870:	f000 fcfe 	bl	23fc270 <HAL_Timer_Get_Micro_Seconds>
  double distance = duration / 29.0 / 2.0;
 23fb874:	1b40      	subs	r0, r0, r5
 23fb876:	f7fe ff15 	bl	23fa6a4 <__aeabi_i2d>
 23fb87a:	2200      	movs	r2, #0
 23fb87c:	4b0d      	ldr	r3, [pc, #52]	; (23fb8b4 <_ZN7HC_SR0413getDistanceCMEv+0x6c>)
 23fb87e:	f7ff f8a5 	bl	23fa9cc <__aeabi_ddiv>
 23fb882:	2200      	movs	r2, #0
 23fb884:	4b0c      	ldr	r3, [pc, #48]	; (23fb8b8 <_ZN7HC_SR0413getDistanceCMEv+0x70>)
 23fb886:	f7fe ff77 	bl	23fa778 <__aeabi_dmul>
 23fb88a:	4606      	mov	r6, r0
 23fb88c:	460f      	mov	r7, r1
  if (distance < _minCM || distance > _maxCM){
 23fb88e:	4602      	mov	r2, r0
 23fb890:	460b      	mov	r3, r1
 23fb892:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23fb896:	f7ff f9ff 	bl	23fac98 <__aeabi_dcmpgt>
 23fb89a:	b930      	cbnz	r0, 23fb8aa <_ZN7HC_SR0413getDistanceCMEv+0x62>
 23fb89c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 23fb8a0:	4632      	mov	r2, r6
 23fb8a2:	463b      	mov	r3, r7
 23fb8a4:	f7ff f9da 	bl	23fac5c <__aeabi_dcmplt>
 23fb8a8:	b108      	cbz	r0, 23fb8ae <_ZN7HC_SR0413getDistanceCMEv+0x66>
   return -1;
 23fb8aa:	2600      	movs	r6, #0
 23fb8ac:	4f03      	ldr	r7, [pc, #12]	; (23fb8bc <_ZN7HC_SR0413getDistanceCMEv+0x74>)
}
 23fb8ae:	ec47 6b10 	vmov	d0, r6, r7
 23fb8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fb8b4:	403d0000 	.word	0x403d0000
 23fb8b8:	3fe00000 	.word	0x3fe00000
 23fb8bc:	bff00000 	.word	0xbff00000

023fb8c0 <_ZN7HC_SR0415getDistanceInchEv>:
double HC_SR04::getDistanceInch(){
 23fb8c0:	b538      	push	{r3, r4, r5, lr}
  double distCM = getDistanceCM();
 23fb8c2:	f7ff ffc1 	bl	23fb848 <_ZN7HC_SR0413getDistanceCMEv>
 23fb8c6:	ec55 4b10 	vmov	r4, r5, d0
  if (distCM == -1){
 23fb8ca:	2200      	movs	r2, #0
 23fb8cc:	ee10 0a10 	vmov	r0, s0
 23fb8d0:	4629      	mov	r1, r5
 23fb8d2:	4b07      	ldr	r3, [pc, #28]	; (23fb8f0 <_ZN7HC_SR0415getDistanceInchEv+0x30>)
 23fb8d4:	f7ff f9b8 	bl	23fac48 <__aeabi_dcmpeq>
 23fb8d8:	b938      	cbnz	r0, 23fb8ea <_ZN7HC_SR0415getDistanceInchEv+0x2a>
  return (distCM / 2.5);
 23fb8da:	4620      	mov	r0, r4
 23fb8dc:	4629      	mov	r1, r5
 23fb8de:	2200      	movs	r2, #0
 23fb8e0:	4b04      	ldr	r3, [pc, #16]	; (23fb8f4 <_ZN7HC_SR0415getDistanceInchEv+0x34>)
 23fb8e2:	f7ff f873 	bl	23fa9cc <__aeabi_ddiv>
 23fb8e6:	4604      	mov	r4, r0
 23fb8e8:	460d      	mov	r5, r1
}
 23fb8ea:	ec45 4b10 	vmov	d0, r4, r5
 23fb8ee:	bd38      	pop	{r3, r4, r5, pc}
 23fb8f0:	bff00000 	.word	0xbff00000
 23fb8f4:	40040000 	.word	0x40040000

023fb8f8 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 23fb8f8:	b510      	push	{r4, lr}
 23fb8fa:	4b05      	ldr	r3, [pc, #20]	; (23fb910 <_ZN10JsonBufferD1Ev+0x18>)
 23fb8fc:	4604      	mov	r4, r0
 23fb8fe:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 23fb900:	7c03      	ldrb	r3, [r0, #16]
 23fb902:	b91b      	cbnz	r3, 23fb90c <_ZN10JsonBufferD1Ev+0x14>
 23fb904:	6840      	ldr	r0, [r0, #4]
 23fb906:	b108      	cbz	r0, 23fb90c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 23fb908:	f001 f94a 	bl	23fcba0 <free>
	}
}
 23fb90c:	4620      	mov	r0, r4
 23fb90e:	bd10      	pop	{r4, pc}
 23fb910:	023ffb70 	.word	0x023ffb70

023fb914 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 23fb914:	b510      	push	{r4, lr}
 23fb916:	4604      	mov	r4, r0
}
 23fb918:	f7ff ffee 	bl	23fb8f8 <_ZN10JsonBufferD1Ev>
 23fb91c:	4620      	mov	r0, r4
 23fb91e:	2114      	movs	r1, #20
 23fb920:	f7ff fa47 	bl	23fadb2 <_ZdlPvj>
 23fb924:	4620      	mov	r0, r4
 23fb926:	bd10      	pop	{r4, pc}

023fb928 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 23fb928:	b510      	push	{r4, lr}
 23fb92a:	4604      	mov	r4, r0
 23fb92c:	4b02      	ldr	r3, [pc, #8]	; (23fb938 <_ZN10JsonWriterD1Ev+0x10>)
 23fb92e:	6003      	str	r3, [r0, #0]
 23fb930:	f7ff ffe2 	bl	23fb8f8 <_ZN10JsonBufferD1Ev>

}
 23fb934:	4620      	mov	r0, r4
 23fb936:	bd10      	pop	{r4, pc}
 23fb938:	023ffb80 	.word	0x023ffb80

023fb93c <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
 23fb93c:	b510      	push	{r4, lr}
 23fb93e:	4604      	mov	r4, r0
}
 23fb940:	f7ff fff2 	bl	23fb928 <_ZN10JsonWriterD1Ev>
 23fb944:	4620      	mov	r0, r4
 23fb946:	2130      	movs	r1, #48	; 0x30
 23fb948:	f7ff fa33 	bl	23fadb2 <_ZdlPvj>
 23fb94c:	4620      	mov	r0, r4
 23fb94e:	bd10      	pop	{r4, pc}

023fb950 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 23fb950:	2300      	movs	r3, #0
 23fb952:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
 23fb954:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = false;
 23fb956:	8303      	strh	r3, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
 23fb958:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 23fb95c:	4770      	bx	lr
	...

023fb960 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 23fb960:	e9c0 1201 	strd	r1, r2, [r0, #4]
 23fb964:	2200      	movs	r2, #0
 23fb966:	60c2      	str	r2, [r0, #12]
 23fb968:	2201      	movs	r2, #1
 23fb96a:	7402      	strb	r2, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 23fb96c:	4a04      	ldr	r2, [pc, #16]	; (23fb980 <_ZN10JsonWriterC1EPcj+0x20>)
 23fb96e:	b508      	push	{r3, lr}
 23fb970:	6002      	str	r2, [r0, #0]
 23fb972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fb976:	62c2      	str	r2, [r0, #44]	; 0x2c
	init();
 23fb978:	f7ff ffea 	bl	23fb950 <_ZN10JsonWriter4initEv>
}
 23fb97c:	bd08      	pop	{r3, pc}
 23fb97e:	bf00      	nop
 23fb980:	023ffb80 	.word	0x023ffb80

023fb984 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 23fb984:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23fb988:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
	}
	else {
		truncated = true;
 23fb98a:	bf28      	it	cs
 23fb98c:	2301      	movcs	r3, #1
void JsonWriter::insertChar(char ch) {
 23fb98e:	b510      	push	{r4, lr}
		buffer[offset++] = ch;
 23fb990:	bf3f      	itttt	cc
 23fb992:	6842      	ldrcc	r2, [r0, #4]
 23fb994:	1c5c      	addcc	r4, r3, #1
 23fb996:	60c4      	strcc	r4, [r0, #12]
 23fb998:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
 23fb99a:	bf28      	it	cs
 23fb99c:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
 23fb9a0:	bd10      	pop	{r4, pc}

023fb9a2 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 23fb9a2:	b538      	push	{r3, r4, r5, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 23fb9a4:	6944      	ldr	r4, [r0, #20]
 23fb9a6:	1c65      	adds	r5, r4, #1
 23fb9a8:	2d08      	cmp	r5, #8
 23fb9aa:	d809      	bhi.n	23fb9c0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x1e>
	contextIndex++;
 23fb9ac:	eb00 0344 	add.w	r3, r0, r4, lsl #1
	context[contextIndex].isFirst = true;
 23fb9b0:	2401      	movs	r4, #1
	contextIndex++;
 23fb9b2:	6145      	str	r5, [r0, #20]
	context[contextIndex].isFirst = true;
 23fb9b4:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
 23fb9b6:	76da      	strb	r2, [r3, #27]
	insertChar(startChar);
 23fb9b8:	f7ff ffe4 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
	return true;
 23fb9bc:	4620      	mov	r0, r4
}
 23fb9be:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 23fb9c0:	2000      	movs	r0, #0
 23fb9c2:	e7fc      	b.n	23fb9be <_ZN10JsonWriter18startObjectOrArrayEcc+0x1c>

023fb9c4 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
 23fb9c4:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 23fb9c6:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
 23fb9c8:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 23fb9ca:	b143      	cbz	r3, 23fb9de <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 23fb9cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fb9d0:	7e59      	ldrb	r1, [r3, #25]
 23fb9d2:	b109      	cbz	r1, 23fb9d8 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 23fb9d4:	f7ff ffd6 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
 23fb9d8:	6963      	ldr	r3, [r4, #20]
 23fb9da:	3b01      	subs	r3, #1
 23fb9dc:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
 23fb9de:	2200      	movs	r2, #0
 23fb9e0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
 23fb9e4:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
 23fb9e6:	4288      	cmp	r0, r1
		buffer[bufferLen - 1] = 0;
 23fb9e8:	bf2a      	itet	cs
 23fb9ea:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
 23fb9ec:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
 23fb9ee:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
 23fb9f2:	bd10      	pop	{r4, pc}

023fb9f4 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 23fb9f4:	b570      	push	{r4, r5, r6, lr}
 23fb9f6:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 23fb9f8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 23fb9fc:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
 23fb9fe:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 23fba00:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 23fba02:	4430      	add	r0, r6
 23fba04:	460a      	mov	r2, r1
 23fba06:	4629      	mov	r1, r5
 23fba08:	f001 f8f4 	bl	23fcbf4 <vsnprintf>
	if (count <= spaceAvailable) {
 23fba0c:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 23fba0e:	bf37      	itett	cc
 23fba10:	68a3      	ldrcc	r3, [r4, #8]
		offset += count;
 23fba12:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
 23fba14:	60e3      	strcc	r3, [r4, #12]
		truncated = true;
 23fba16:	2301      	movcc	r3, #1
		offset += count;
 23fba18:	bf26      	itte	cs
 23fba1a:	18c0      	addcs	r0, r0, r3
 23fba1c:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
 23fba1e:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
 23fba22:	bd70      	pop	{r4, r5, r6, pc}

023fba24 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
 23fba24:	b40e      	push	{r1, r2, r3}
 23fba26:	b503      	push	{r0, r1, lr}
 23fba28:	aa03      	add	r2, sp, #12
 23fba2a:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 23fba2e:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 23fba30:	f7ff ffe0 	bl	23fb9f4 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
 23fba34:	b002      	add	sp, #8
 23fba36:	f85d eb04 	ldr.w	lr, [sp], #4
 23fba3a:	b003      	add	sp, #12
 23fba3c:	4770      	bx	lr
	...

023fba40 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
 23fba40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fba44:	4604      	mov	r4, r0
 23fba46:	460e      	mov	r6, r1
	if (quoted) {
 23fba48:	4617      	mov	r7, r2
 23fba4a:	b112      	cbz	r2, 23fba52 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 23fba4c:	2122      	movs	r1, #34	; 0x22
 23fba4e:	f7ff ff99 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
void JsonWriter::insertString(const char *s, bool quoted) {
 23fba52:	2500      	movs	r5, #0
				insertsprintf("\\u%04X", utf16);
 23fba54:	f8df 8108 	ldr.w	r8, [pc, #264]	; 23fbb60 <_ZN10JsonWriter12insertStringEPKcb+0x120>
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 23fba58:	5d71      	ldrb	r1, [r6, r5]
 23fba5a:	eb06 0905 	add.w	r9, r6, r5
 23fba5e:	2900      	cmp	r1, #0
 23fba60:	d074      	beq.n	23fbb4c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
 23fba62:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23fba66:	429a      	cmp	r2, r3
 23fba68:	d270      	bcs.n	23fbb4c <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
 23fba6a:	060b      	lsls	r3, r1, #24
 23fba6c:	d534      	bpl.n	23fbad8 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 23fba6e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 23fba72:	2be0      	cmp	r3, #224	; 0xe0
 23fba74:	f105 0901 	add.w	r9, r5, #1
 23fba78:	d11d      	bne.n	23fbab6 <_ZN10JsonWriter12insertStringEPKcb+0x76>
 23fba7a:	f816 2009 	ldrb.w	r2, [r6, r9]
 23fba7e:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 23fba82:	2b80      	cmp	r3, #128	; 0x80
 23fba84:	d139      	bne.n	23fbafa <_ZN10JsonWriter12insertStringEPKcb+0xba>
 23fba86:	f105 0902 	add.w	r9, r5, #2
 23fba8a:	f816 3009 	ldrb.w	r3, [r6, r9]
 23fba8e:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 23fba92:	2880      	cmp	r0, #128	; 0x80
 23fba94:	d131      	bne.n	23fbafa <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
 23fba96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 23fba9a:	0192      	lsls	r2, r2, #6
 23fba9c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23fbaa0:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 23fbaa4:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
 23fbaa6:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
 23fbaa8:	4641      	mov	r1, r8
 23fbaaa:	4620      	mov	r0, r4
 23fbaac:	f7ff ffba 	bl	23fba24 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 23fbab0:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 23fbab2:	3501      	adds	r5, #1
 23fbab4:	e7d0      	b.n	23fba58 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 23fbab6:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 23fbaba:	2bc0      	cmp	r3, #192	; 0xc0
 23fbabc:	d11d      	bne.n	23fbafa <_ZN10JsonWriter12insertStringEPKcb+0xba>
 23fbabe:	f816 3009 	ldrb.w	r3, [r6, r9]
 23fbac2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 23fbac6:	2a80      	cmp	r2, #128	; 0x80
 23fbac8:	d117      	bne.n	23fbafa <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
 23fbaca:	0189      	lsls	r1, r1, #6
 23fbacc:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 23fbad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
 23fbad4:	431a      	orrs	r2, r3
 23fbad6:	e7e7      	b.n	23fbaa8 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
 23fbad8:	290d      	cmp	r1, #13
 23fbada:	d80a      	bhi.n	23fbaf2 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
 23fbadc:	2907      	cmp	r1, #7
 23fbade:	d90c      	bls.n	23fbafa <_ZN10JsonWriter12insertStringEPKcb+0xba>
 23fbae0:	f1a1 0308 	sub.w	r3, r1, #8
 23fbae4:	2b05      	cmp	r3, #5
 23fbae6:	d808      	bhi.n	23fbafa <_ZN10JsonWriter12insertStringEPKcb+0xba>
 23fbae8:	e8df f003 	tbb	[pc, r3]
 23fbaec:	07172309 	.word	0x07172309
 23fbaf0:	1d11      	.short	0x1d11
 23fbaf2:	2922      	cmp	r1, #34	; 0x22
 23fbaf4:	d023      	beq.n	23fbb3e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
 23fbaf6:	295c      	cmp	r1, #92	; 0x5c
 23fbaf8:	d021      	beq.n	23fbb3e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
 23fbafa:	4620      	mov	r0, r4
 23fbafc:	e004      	b.n	23fbb08 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
 23fbafe:	215c      	movs	r1, #92	; 0x5c
 23fbb00:	4620      	mov	r0, r4
 23fbb02:	f7ff ff3f 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 23fbb06:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
 23fbb08:	f7ff ff3c 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				break;
 23fbb0c:	e7d1      	b.n	23fbab2 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
 23fbb0e:	215c      	movs	r1, #92	; 0x5c
 23fbb10:	4620      	mov	r0, r4
 23fbb12:	f7ff ff37 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 23fbb16:	2166      	movs	r1, #102	; 0x66
 23fbb18:	e7f6      	b.n	23fbb08 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
 23fbb1a:	215c      	movs	r1, #92	; 0x5c
 23fbb1c:	4620      	mov	r0, r4
 23fbb1e:	f7ff ff31 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 23fbb22:	216e      	movs	r1, #110	; 0x6e
 23fbb24:	e7f0      	b.n	23fbb08 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
 23fbb26:	215c      	movs	r1, #92	; 0x5c
 23fbb28:	4620      	mov	r0, r4
 23fbb2a:	f7ff ff2b 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 23fbb2e:	2172      	movs	r1, #114	; 0x72
 23fbb30:	e7ea      	b.n	23fbb08 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
 23fbb32:	215c      	movs	r1, #92	; 0x5c
 23fbb34:	4620      	mov	r0, r4
 23fbb36:	f7ff ff25 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 23fbb3a:	2174      	movs	r1, #116	; 0x74
 23fbb3c:	e7e4      	b.n	23fbb08 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
 23fbb3e:	215c      	movs	r1, #92	; 0x5c
 23fbb40:	4620      	mov	r0, r4
 23fbb42:	f7ff ff1f 	bl	23fb984 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 23fbb46:	f899 1000 	ldrb.w	r1, [r9]
 23fbb4a:	e7dd      	b.n	23fbb08 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
 23fbb4c:	b12f      	cbz	r7, 23fbb5a <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
 23fbb4e:	4620      	mov	r0, r4
}
 23fbb50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
 23fbb54:	2122      	movs	r1, #34	; 0x22
 23fbb56:	f7ff bf15 	b.w	23fb984 <_ZN10JsonWriter10insertCharEc>
}
 23fbb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fbb5e:	bf00      	nop
 23fbb60:	023ffb58 	.word	0x023ffb58

023fbb64 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
 23fbb64:	6942      	ldr	r2, [r0, #20]
 23fbb66:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 23fbb6a:	7e1a      	ldrb	r2, [r3, #24]
 23fbb6c:	b112      	cbz	r2, 23fbb74 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 23fbb6e:	2200      	movs	r2, #0
 23fbb70:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
 23fbb72:	4770      	bx	lr
		insertChar(',');
 23fbb74:	212c      	movs	r1, #44	; 0x2c
 23fbb76:	f7ff bf05 	b.w	23fb984 <_ZN10JsonWriter10insertCharEc>
	...

023fbb7c <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 23fbb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbb7e:	4604      	mov	r4, r0
 23fbb80:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
 23fbb84:	f7fe fda0 	bl	23fa6c8 <__aeabi_f2d>
	if (floatPlaces >= 0) {
 23fbb88:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
		insertsprintf("%.*f", floatPlaces, value);
 23fbb8a:	4602      	mov	r2, r0
	if (floatPlaces >= 0) {
 23fbb8c:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
 23fbb8e:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
 23fbb90:	db08      	blt.n	23fbba4 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
 23fbb92:	e9cd 2300 	strd	r2, r3, [sp]
 23fbb96:	4620      	mov	r0, r4
 23fbb98:	462a      	mov	r2, r5
 23fbb9a:	4906      	ldr	r1, [pc, #24]	; (23fbbb4 <_ZN10JsonWriter11insertValueEf+0x38>)
 23fbb9c:	f7ff ff42 	bl	23fba24 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 23fbba0:	b003      	add	sp, #12
 23fbba2:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
 23fbba4:	4620      	mov	r0, r4
 23fbba6:	4904      	ldr	r1, [pc, #16]	; (23fbbb8 <_ZN10JsonWriter11insertValueEf+0x3c>)
}
 23fbba8:	b003      	add	sp, #12
 23fbbaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
 23fbbae:	f7ff bf39 	b.w	23fba24 <_ZN10JsonWriter13insertsprintfEPKcz>
 23fbbb2:	bf00      	nop
 23fbbb4:	023ffb5f 	.word	0x023ffb5f
 23fbbb8:	023ffb64 	.word	0x023ffb64

023fbbbc <accurrent_cfg_setup>:
void accurrent_cfg_setup ( accurrent_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->sck = HAL_PIN_NC;
    cfg->miso = HAL_PIN_NC;
 23fbbbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbbc0:	6003      	str	r3, [r0, #0]
    cfg->mosi = HAL_PIN_NC;
    cfg->cs = HAL_PIN_NC;

    // Additional gpio pins

    cfg->an = HAL_PIN_NC;
 23fbbc2:	7103      	strb	r3, [r0, #4]

    cfg->spi_mode = SPI_MASTER_MODE_0;
    cfg->cs_polarity = SPI_MASTER_CHIP_SELECT_POLARITY_ACTIVE_LOW;
    cfg->spi_speed = 100000; 
 23fbbc4:	4b02      	ldr	r3, [pc, #8]	; (23fbbd0 <accurrent_cfg_setup+0x14>)
 23fbbc6:	6083      	str	r3, [r0, #8]
    cfg->spi_mode = SPI_MASTER_MODE_0;
 23fbbc8:	2300      	movs	r3, #0
 23fbbca:	8183      	strh	r3, [r0, #12]
}
 23fbbcc:	4770      	bx	lr
 23fbbce:	bf00      	nop
 23fbbd0:	000186a0 	.word	0x000186a0

023fbbd4 <accurrent_init>:

ACCURRENT_RETVAL accurrent_init ( accurrent_t *ctx, accurrent_cfg_t *cfg )
{
 23fbbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbbd6:	460c      	mov	r4, r1
 23fbbd8:	4605      	mov	r5, r0
    spi_cfg.speed     = cfg->spi_speed;
    spi_cfg.mode      = cfg->spi_mode;
    spi_cfg.sck       = cfg->sck;
    spi_cfg.miso      = cfg->miso;
    spi_cfg.mosi      = cfg->mosi;
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fbbda:	2600      	movs	r6, #0
{
 23fbbdc:	b085      	sub	sp, #20
    spi_master_configure_default( &spi_cfg );
 23fbbde:	a801      	add	r0, sp, #4
 23fbbe0:	f000 f958 	bl	23fbe94 <_Z28spi_master_configure_defaultP19spi_master_config_t>
    spi_cfg.speed     = cfg->spi_speed;
 23fbbe4:	68a3      	ldr	r3, [r4, #8]

    digital_out_init( &ctx->cs, cfg->cs );
 23fbbe6:	78e1      	ldrb	r1, [r4, #3]
    spi_cfg.speed     = cfg->spi_speed;
 23fbbe8:	9302      	str	r3, [sp, #8]
    spi_cfg.mode      = cfg->spi_mode;
 23fbbea:	7b23      	ldrb	r3, [r4, #12]
    digital_out_init( &ctx->cs, cfg->cs );
 23fbbec:	4628      	mov	r0, r5
    spi_cfg.mode      = cfg->spi_mode;
 23fbbee:	f88d 300c 	strb.w	r3, [sp, #12]
    spi_cfg.sck       = cfg->sck;
 23fbbf2:	78a3      	ldrb	r3, [r4, #2]
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fbbf4:	f88d 6004 	strb.w	r6, [sp, #4]
    spi_cfg.sck       = cfg->sck;
 23fbbf8:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_cfg.miso      = cfg->miso;
 23fbbfc:	8823      	ldrh	r3, [r4, #0]
    ctx->chip_select = cfg->cs;

    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fbbfe:	1d2f      	adds	r7, r5, #4
    spi_cfg.miso      = cfg->miso;
 23fbc00:	f8ad 3006 	strh.w	r3, [sp, #6]
    digital_out_init( &ctx->cs, cfg->cs );
 23fbc04:	f000 f863 	bl	23fbcce <_Z16digital_out_initP13digital_out_th>
    ctx->chip_select = cfg->cs;
 23fbc08:	78e3      	ldrb	r3, [r4, #3]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fbc0a:	4638      	mov	r0, r7
    ctx->chip_select = cfg->cs;
 23fbc0c:	742b      	strb	r3, [r5, #16]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fbc0e:	a901      	add	r1, sp, #4
 23fbc10:	f000 f926 	bl	23fbe60 <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>
 23fbc14:	3001      	adds	r0, #1
 23fbc16:	d019      	beq.n	23fbc4c <accurrent_init+0x78>
    {
        return ACCURRENT_INIT_ERROR;
    }

    spi_master_set_default_write_data( &ctx->spi, ACCURRENT_DUMMY );
 23fbc18:	4631      	mov	r1, r6
 23fbc1a:	4638      	mov	r0, r7
 23fbc1c:	f000 f904 	bl	23fbe28 <_Z33spi_master_set_default_write_dataP12spi_master_th>
    spi_master_set_mode( &ctx->spi, spi_cfg.mode );
 23fbc20:	f89d 100c 	ldrb.w	r1, [sp, #12]
 23fbc24:	4638      	mov	r0, r7
 23fbc26:	f000 f959 	bl	23fbedc <_Z19spi_master_set_modeP12spi_master_th>
    spi_master_set_speed( &ctx->spi, spi_cfg.speed );
 23fbc2a:	9902      	ldr	r1, [sp, #8]
 23fbc2c:	4638      	mov	r0, r7
 23fbc2e:	f000 f960 	bl	23fbef2 <_Z20spi_master_set_speedP12spi_master_tm>
    spi_master_set_chip_select_polarity( cfg->cs_polarity );
 23fbc32:	7b60      	ldrb	r0, [r4, #13]
 23fbc34:	f000 f8f0 	bl	23fbe18 <_Z35spi_master_set_chip_select_polarityh>

    digital_in_init( &ctx->an, cfg->an );
 23fbc38:	7921      	ldrb	r1, [r4, #4]
 23fbc3a:	1ca8      	adds	r0, r5, #2
 23fbc3c:	f000 f83c 	bl	23fbcb8 <_Z15digital_in_initP12digital_in_th>
    spi_master_deselect_device( ctx->chip_select );  
 23fbc40:	7c28      	ldrb	r0, [r5, #16]
 23fbc42:	f000 f8d7 	bl	23fbdf4 <_Z26spi_master_deselect_deviceh>

    return ACCURRENT_OK;
 23fbc46:	4630      	mov	r0, r6
}
 23fbc48:	b005      	add	sp, #20
 23fbc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ACCURRENT_INIT_ERROR;
 23fbc4c:	20ff      	movs	r0, #255	; 0xff
 23fbc4e:	e7fb      	b.n	23fbc48 <accurrent_init+0x74>

023fbc50 <accurrent_get_a>:

    return avg;                                   // Returns the average ADC value
}

float accurrent_get_a ( accurrent_t *ctx )
{
 23fbc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbc52:	4606      	mov	r6, r0
 23fbc54:	250a      	movs	r5, #10

    // Initialize variables
    msb_mask = 0x00;
    tmp = 0;
    avg = 0;
    sum = 0;
 23fbc56:	2400      	movs	r4, #0
{
 23fbc58:	b085      	sub	sp, #20
        
    // SPI reading
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
    {
        spi_master_select_device( ctx->chip_select );
        spi_master_read( &ctx->spi, buffer, 2 );
 23fbc5a:	1d07      	adds	r7, r0, #4
        spi_master_select_device( ctx->chip_select );
 23fbc5c:	7c30      	ldrb	r0, [r6, #16]
 23fbc5e:	f000 f8b9 	bl	23fbdd4 <_Z24spi_master_select_deviceh>
        spi_master_read( &ctx->spi, buffer, 2 );
 23fbc62:	2202      	movs	r2, #2
 23fbc64:	a901      	add	r1, sp, #4
 23fbc66:	4638      	mov	r0, r7
 23fbc68:	f000 f950 	bl	23fbf0c <_Z15spi_master_readP12spi_master_tPhj>
        spi_master_deselect_device( ctx->chip_select );
 23fbc6c:	7c30      	ldrb	r0, [r6, #16]
 23fbc6e:	f000 f8c1 	bl	23fbdf4 <_Z26spi_master_deselect_deviceh>
        
        // Reading most significant and least significant bytes
        read_msb = buffer[ 0 ] & msb_mask;
 23fbc72:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fbc76:	3d01      	subs	r5, #1
        read_lsb = buffer[ 1 ];
        
        // Forming ADC_CONVERSION_SIZE
        tmp = ( ( read_msb & msb_mask ) << 8 );
 23fbc78:	f003 021f 	and.w	r2, r3, #31
        tmp =  tmp | read_lsb;
 23fbc7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fbc80:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        tmp =  tmp | read_lsb;
 23fbc84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        
        sum = sum + tmp;                            // Sum of the ADC readings
 23fbc88:	441c      	add	r4, r3
 23fbc8a:	b2a4      	uxth	r4, r4
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fbc8c:	d1e6      	bne.n	23fbc5c <accurrent_get_a+0xc>
    }
    
    // Average ADC value based on sum of the ADC readings
    avg = ( float ) (sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fbc8e:	230a      	movs	r3, #10
 23fbc90:	fbb4 f4f3 	udiv	r4, r4, r3
 23fbc94:	ee07 4a90 	vmov	s15, r4
    //avg = ( avg / max_val ) * 8.25 * 10;
    avg = ( avg / max_val ) * 8.25;
 23fbc98:	ed9f 7a05 	vldr	s14, [pc, #20]	; 23fbcb0 <accurrent_get_a+0x60>
    avg = ( float ) (sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fbc9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    avg = ( avg / max_val ) * 8.25;
 23fbca0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    return avg;                                   // Returns the average ADC value
}
 23fbca4:	eddf 7a03 	vldr	s15, [pc, #12]	; 23fbcb4 <accurrent_get_a+0x64>
 23fbca8:	ee20 0a27 	vmul.f32	s0, s0, s15
 23fbcac:	b005      	add	sp, #20
 23fbcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fbcb0:	457ff000 	.word	0x457ff000
 23fbcb4:	41040000 	.word	0x41040000

023fbcb8 <_Z15digital_in_initP12digital_in_th>:

#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fbcb8:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fbcba:	460c      	mov	r4, r1
 23fbcbc:	b921      	cbnz	r1, 23fbcc8 <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fbcbe:	7800      	ldrb	r0, [r0, #0]
 23fbcc0:	f003 fac4 	bl	23ff24c <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fbcc4:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fbcc6:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fbcc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbccc:	e7fb      	b.n	23fbcc6 <_Z15digital_in_initP12digital_in_th+0xe>

023fbcce <_Z16digital_out_initP13digital_out_th>:
#include "drv_digital_out.h"

//function for setting pin as output
int8_t digital_out_init(digital_out_t *out, uint8_t mode)
{
    if (mode == OUTPUT)
 23fbcce:	2901      	cmp	r1, #1
{
 23fbcd0:	b508      	push	{r3, lr}
    if (mode == OUTPUT)
 23fbcd2:	d104      	bne.n	23fbcde <_Z16digital_out_initP13digital_out_th+0x10>
    {
        pinMode(out->pin, static_cast<PinMode>(mode));      //static cast mode and set pin as output
 23fbcd4:	8800      	ldrh	r0, [r0, #0]
 23fbcd6:	f003 fab9 	bl	23ff24c <pinMode>
        return DIGITAL_OUT_SUCCESS;                         //return status
 23fbcda:	2000      	movs	r0, #0
    }
    else
    {
        return DIGITAL_OUT_UNSUPPORTED_PIN;                 //return status
    }
}
 23fbcdc:	bd08      	pop	{r3, pc}
        return DIGITAL_OUT_UNSUPPORTED_PIN;                 //return status
 23fbcde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fbce2:	e7fb      	b.n	23fbcdc <_Z16digital_out_initP13digital_out_th+0xe>

023fbce4 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{   
 23fbce4:	b510      	push	{r4, lr}
    addr = 0x00;                                    //set client address to 0x00
 23fbce6:	2400      	movs	r4, #0
 23fbce8:	4b05      	ldr	r3, [pc, #20]	; (23fbd00 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fbcea:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fbcec:	4b05      	ldr	r3, [pc, #20]	; (23fbd04 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fbcee:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fbcf0:	f003 fb04 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbcf4:	4621      	mov	r1, r4
}
 23fbcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fbcfa:	f001 bb81 	b.w	23fd400 <_ZN7TwoWire8setSpeedEm>
 23fbcfe:	bf00      	nop
 23fbd00:	1007ae2c 	.word	0x1007ae2c
 23fbd04:	1007ae30 	.word	0x1007ae30

023fbd08 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{   
 23fbd08:	b508      	push	{r3, lr}
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fbd0a:	f003 faf7 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd0e:	4b05      	ldr	r3, [pc, #20]	; (23fbd24 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fbd10:	6819      	ldr	r1, [r3, #0]
 23fbd12:	f001 fb75 	bl	23fd400 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fbd16:	f003 faf1 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd1a:	f001 fb75 	bl	23fd408 <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fbd1e:	2000      	movs	r0, #0
 23fbd20:	bd08      	pop	{r3, pc}
 23fbd22:	bf00      	nop
 23fbd24:	1007ae30 	.word	0x1007ae30

023fbd28 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{    
 23fbd28:	b510      	push	{r4, lr}
 23fbd2a:	460c      	mov	r4, r1
    set_speed = speed;              //set static global variable to new speed value
 23fbd2c:	4b04      	ldr	r3, [pc, #16]	; (23fbd40 <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fbd2e:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fbd30:	f003 fae4 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd34:	4621      	mov	r1, r4
 23fbd36:	f001 fb63 	bl	23fd400 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fbd3a:	2000      	movs	r0, #0
 23fbd3c:	bd10      	pop	{r4, pc}
 23fbd3e:	bf00      	nop
 23fbd40:	1007ae30 	.word	0x1007ae30

023fbd44 <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
}

//set 7-bit client address
int8_t i2c_master_set_slave_address(i2c_master_t *obj, uint8_t address)
{    
    addr = address;                 //set function parameter to global variable
 23fbd44:	4b01      	ldr	r3, [pc, #4]	; (23fbd4c <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fbd46:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fbd48:	7019      	strb	r1, [r3, #0]
}
 23fbd4a:	4770      	bx	lr
 23fbd4c:	1007ae2c 	.word	0x1007ae2c

023fbd50 <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{   
 23fbd50:	b513      	push	{r0, r1, r4, lr}
 23fbd52:	460c      	mov	r4, r1
 23fbd54:	9201      	str	r2, [sp, #4]
    Wire.beginTransmission(addr);                   //send device address byte using 7-bit client address
 23fbd56:	f003 fad1 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd5a:	4b0b      	ldr	r3, [pc, #44]	; (23fbd88 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fbd5c:	7819      	ldrb	r1, [r3, #0]
 23fbd5e:	f001 fb82 	bl	23fd466 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);     //write function parameter data and legnth to i2c bus
 23fbd62:	f003 facb 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd66:	6803      	ldr	r3, [r0, #0]
 23fbd68:	4621      	mov	r1, r4
 23fbd6a:	68db      	ldr	r3, [r3, #12]
 23fbd6c:	9a01      	ldr	r2, [sp, #4]
 23fbd6e:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)         //send stop condition (true)
 23fbd70:	f003 fac4 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd74:	2101      	movs	r1, #1
 23fbd76:	f001 fb7a 	bl	23fd46e <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;                  //return status
    }
    return I2C_MASTER_ERROR;                        //return status    
}
 23fbd7a:	3801      	subs	r0, #1
 23fbd7c:	bf18      	it	ne
 23fbd7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fbd82:	b002      	add	sp, #8
 23fbd84:	bd10      	pop	{r4, pc}
 23fbd86:	bf00      	nop
 23fbd88:	1007ae2c 	.word	0x1007ae2c

023fbd8c <_Z15i2c_master_readP12i2c_master_tPhj>:

//i2c read operation, R/W = 1
int8_t i2c_master_read(i2c_master_t *obj, uint8_t *read_data_buf, size_t len_read_data)
{   
 23fbd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbd90:	4615      	mov	r5, r2
 23fbd92:	460e      	mov	r6, r1
    //local variable 
    uint8_t temp;       //variable for determining error

    //read data from I2C bus
    temp = Wire.requestFrom(addr, len_read_data, true);     //true signals send stop after read
 23fbd94:	f003 fab2 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbd98:	490d      	ldr	r1, [pc, #52]	; (23fbdd0 <_Z15i2c_master_readP12i2c_master_tPhj+0x44>)
 23fbd9a:	2301      	movs	r3, #1
 23fbd9c:	462a      	mov	r2, r5
 23fbd9e:	7809      	ldrb	r1, [r1, #0]
 23fbda0:	f001 fb4f 	bl	23fd442 <_ZN7TwoWire11requestFromEhjh>
 23fbda4:	2700      	movs	r7, #0
 23fbda6:	b2c4      	uxtb	r4, r0
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fbda8:	fa5f f887 	uxtb.w	r8, r7
 23fbdac:	4545      	cmp	r5, r8
 23fbdae:	f107 0701 	add.w	r7, r7, #1
 23fbdb2:	d907      	bls.n	23fbdc4 <_Z15i2c_master_readP12i2c_master_tPhj+0x38>
    {
        read_data_buf[ii] = Wire.read();                    //write pointer function parameter
 23fbdb4:	f003 faa2 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23fbdb8:	6803      	ldr	r3, [r0, #0]
 23fbdba:	695b      	ldr	r3, [r3, #20]
 23fbdbc:	4798      	blx	r3
 23fbdbe:	f806 0008 	strb.w	r0, [r6, r8]
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fbdc2:	e7f1      	b.n	23fbda8 <_Z15i2c_master_readP12i2c_master_tPhj+0x1c>
    }
    
    //logic for successful transfer
    if(temp != 0)                       //requestFrom() returns 0 if timeout occurs
 23fbdc4:	fab4 f084 	clz	r0, r4
 23fbdc8:	0940      	lsrs	r0, r0, #5
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;            //return status
}
 23fbdca:	4240      	negs	r0, r0
 23fbdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbdd0:	1007ae2c 	.word	0x1007ae2c

023fbdd4 <_Z24spi_master_select_deviceh>:
    return SPI_MASTER_SUCCESS;                      //return status
}

//assert chip select
void spi_master_select_device(uint8_t chip_select)
{   
 23fbdd4:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);               //set function parameter as output
 23fbdd6:	2101      	movs	r1, #1
 23fbdd8:	9001      	str	r0, [sp, #4]
 23fbdda:	f003 fa37 	bl	23ff24c <pinMode>
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fbdde:	4b04      	ldr	r3, [pc, #16]	; (23fbdf0 <_Z24spi_master_select_deviceh+0x1c>)
 23fbde0:	9801      	ldr	r0, [sp, #4]
 23fbde2:	7819      	ldrb	r1, [r3, #0]
}
 23fbde4:	b003      	add	sp, #12
 23fbde6:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fbdea:	f003 ba40 	b.w	23ff26e <digitalWrite>
 23fbdee:	bf00      	nop
 23fbdf0:	1007ae40 	.word	0x1007ae40

023fbdf4 <_Z26spi_master_deselect_deviceh>:

//de-assert chip select
void spi_master_deselect_device(uint8_t chip_select) 
{  
 23fbdf4:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);                   //set function parameter as output
 23fbdf6:	2101      	movs	r1, #1
 23fbdf8:	9001      	str	r0, [sp, #4]
 23fbdfa:	f003 fa27 	bl	23ff24c <pinMode>
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fbdfe:	4b05      	ldr	r3, [pc, #20]	; (23fbe14 <_Z26spi_master_deselect_deviceh+0x20>)
 23fbe00:	9801      	ldr	r0, [sp, #4]
 23fbe02:	7819      	ldrb	r1, [r3, #0]
 23fbe04:	fab1 f181 	clz	r1, r1
 23fbe08:	0949      	lsrs	r1, r1, #5
}
 23fbe0a:	b003      	add	sp, #12
 23fbe0c:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fbe10:	f003 ba2d 	b.w	23ff26e <digitalWrite>
 23fbe14:	1007ae40 	.word	0x1007ae40

023fbe18 <_Z35spi_master_set_chip_select_polarityh>:

//sets chip select polarity
void spi_master_set_chip_select_polarity(uint8_t polarity)
{   
    if ((polarity == LOW) || (polarity == HIGH))        //check for valid function parameter
 23fbe18:	2801      	cmp	r0, #1
    {
        cs_polarity = polarity;                         //set new CS polarity
 23fbe1a:	bf9c      	itt	ls
 23fbe1c:	4b01      	ldrls	r3, [pc, #4]	; (23fbe24 <_Z35spi_master_set_chip_select_polarityh+0xc>)
 23fbe1e:	7018      	strbls	r0, [r3, #0]
    }
}
 23fbe20:	4770      	bx	lr
 23fbe22:	bf00      	nop
 23fbe24:	1007ae40 	.word	0x1007ae40

023fbe28 <_Z33spi_master_set_default_write_dataP12spi_master_th>:
//sets SPI default value, not implemented
int8_t spi_master_set_default_write_data(spi_master_t *obj, uint8_t  default_write_data) 
{
    #warning spi_master_set_default_write_data() function is not implemented
    return SPI_MASTER_SUCCESS;      //return status
}
 23fbe28:	2000      	movs	r0, #0
 23fbe2a:	4770      	bx	lr

023fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fbe2c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fbe2e:	4c0a      	ldr	r4, [pc, #40]	; (23fbe58 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fbe30:	e8d4 1f8f 	ldab	r1, [r4]
 23fbe34:	f011 0101 	ands.w	r1, r1, #1
 23fbe38:	d10b      	bne.n	23fbe52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fbe3a:	4620      	mov	r0, r4
 23fbe3c:	9101      	str	r1, [sp, #4]
 23fbe3e:	f7fe ffc7 	bl	23fadd0 <__cxa_guard_acquire>
 23fbe42:	9901      	ldr	r1, [sp, #4]
 23fbe44:	b128      	cbz	r0, 23fbe52 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fbe46:	4805      	ldr	r0, [pc, #20]	; (23fbe5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fbe48:	f002 fe2a 	bl	23feaa0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fbe4c:	4620      	mov	r0, r4
 23fbe4e:	f7fe ffc4 	bl	23fadda <__cxa_guard_release>
        return instance;
    }
 23fbe52:	4802      	ldr	r0, [pc, #8]	; (23fbe5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fbe54:	b002      	add	sp, #8
 23fbe56:	bd10      	pop	{r4, pc}
 23fbe58:	1007ae34 	.word	0x1007ae34
 23fbe5c:	1007ae38 	.word	0x1007ae38

023fbe60 <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>:
{   
 23fbe60:	b508      	push	{r3, lr}
    pinMode(MIKROBUS_1_CS_PIN, OUTPUT);             //set CS sginal mikroBUS1 as output
 23fbe62:	2101      	movs	r1, #1
 23fbe64:	2012      	movs	r0, #18
 23fbe66:	f003 f9f1 	bl	23ff24c <pinMode>
    pinMode(MIKROBUS_2_CS_PIN, OUTPUT);             //set CS sginal mikroBUS2 as output
 23fbe6a:	2101      	movs	r1, #1
 23fbe6c:	2005      	movs	r0, #5
 23fbe6e:	f003 f9ed 	bl	23ff24c <pinMode>
    digitalWrite(MIKROBUS_1_CS_PIN, HIGH);          //set CS HIGH
 23fbe72:	2101      	movs	r1, #1
 23fbe74:	2012      	movs	r0, #18
 23fbe76:	f003 f9fa 	bl	23ff26e <digitalWrite>
    digitalWrite(MIKROBUS_2_CS_PIN, HIGH);          //set CS HIGH
 23fbe7a:	2101      	movs	r1, #1
 23fbe7c:	2005      	movs	r0, #5
 23fbe7e:	f003 f9f6 	bl	23ff26e <digitalWrite>
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
 23fbe82:	f7ff ffd3 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbe86:	22ff      	movs	r2, #255	; 0xff
 23fbe88:	2100      	movs	r1, #0
 23fbe8a:	f002 fe13 	bl	23feab4 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
}
 23fbe8e:	2000      	movs	r0, #0
 23fbe90:	bd08      	pop	{r3, pc}
	...

023fbe94 <_Z28spi_master_configure_defaultP19spi_master_config_t>:
{
 23fbe94:	b510      	push	{r4, lr}
    cs_polarity = LOW;              //set CS active low          
 23fbe96:	2400      	movs	r4, #0
    pinMode(MIKROBUS_1_CS_PIN, OUTPUT);         //set CS sginal mikroBUS1 as output
 23fbe98:	2101      	movs	r1, #1
 23fbe9a:	2012      	movs	r0, #18
 23fbe9c:	f003 f9d6 	bl	23ff24c <pinMode>
    pinMode(MIKROBUS_2_CS_PIN, OUTPUT);         //set CS sginal mikroBUS2 as output
 23fbea0:	2101      	movs	r1, #1
 23fbea2:	2005      	movs	r0, #5
 23fbea4:	f003 f9d2 	bl	23ff24c <pinMode>
    digitalWrite(MIKROBUS_1_CS_PIN, HIGH);      //set CS HIGH
 23fbea8:	2101      	movs	r1, #1
 23fbeaa:	2012      	movs	r0, #18
 23fbeac:	f003 f9df 	bl	23ff26e <digitalWrite>
    digitalWrite(MIKROBUS_2_CS_PIN, HIGH);      //set CS HIGH
 23fbeb0:	2101      	movs	r1, #1
 23fbeb2:	2005      	movs	r0, #5
 23fbeb4:	f003 f9db 	bl	23ff26e <digitalWrite>
    cs_polarity = LOW;              //set CS active low          
 23fbeb8:	4b07      	ldr	r3, [pc, #28]	; (23fbed8 <_Z28spi_master_configure_defaultP19spi_master_config_t+0x44>)
 23fbeba:	701c      	strb	r4, [r3, #0]
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 23fbebc:	f7ff ffb6 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbec0:	4621      	mov	r1, r4
 23fbec2:	f002 fe0e 	bl	23feae2 <_ZN8SPIClass11setDataModeEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 23fbec6:	f7ff ffb1 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
 23fbeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fbece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fbed2:	2164      	movs	r1, #100	; 0x64
 23fbed4:	f002 be36 	b.w	23feb44 <_ZN8SPIClass13setClockSpeedEjj>
 23fbed8:	1007ae40 	.word	0x1007ae40

023fbedc <_Z19spi_master_set_modeP12spi_master_th>:
{
 23fbedc:	b507      	push	{r0, r1, r2, lr}
 23fbede:	9101      	str	r1, [sp, #4]
        instance().setDataMode(mode);
 23fbee0:	f7ff ffa4 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbee4:	9901      	ldr	r1, [sp, #4]
 23fbee6:	f002 fdfc 	bl	23feae2 <_ZN8SPIClass11setDataModeEh>
}
 23fbeea:	2000      	movs	r0, #0
 23fbeec:	b003      	add	sp, #12
 23fbeee:	f85d fb04 	ldr.w	pc, [sp], #4

023fbef2 <_Z20spi_master_set_speedP12spi_master_tm>:
{
 23fbef2:	b510      	push	{r4, lr}
 23fbef4:	460c      	mov	r4, r1
        return instance().setClockSpeed(value, scale);
 23fbef6:	f7ff ff99 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbefa:	2201      	movs	r2, #1
 23fbefc:	4621      	mov	r1, r4
 23fbefe:	f002 fe21 	bl	23feb44 <_ZN8SPIClass13setClockSpeedEjj>
}
 23fbf02:	1a20      	subs	r0, r4, r0
 23fbf04:	bf18      	it	ne
 23fbf06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fbf0a:	bd10      	pop	{r4, pc}

023fbf0c <_Z15spi_master_readP12spi_master_tPhj>:
    return SPI_MASTER_SUCCESS;                                                  //return status
}

//Reads byte(s) from SPI bus
int8_t spi_master_read(spi_master_t *obj, uint8_t *read_data_buffer, size_t read_data_length)  
{   
 23fbf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    #warning spi_master_read() assumes the read immediately occurs on first SCK. If data needs to be transmitted before read, use spi_master_write_then_read() instead
    
    //create dummy array size of read fill with zeros
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fbf10:	2500      	movs	r5, #0
{   
 23fbf12:	4614      	mov	r4, r2
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fbf14:	1dd3      	adds	r3, r2, #7
 23fbf16:	f023 0307 	bic.w	r3, r3, #7
{   
 23fbf1a:	b082      	sub	sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fbf1c:	42ac      	cmp	r4, r5
{   
 23fbf1e:	af02      	add	r7, sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fbf20:	ebad 0d03 	sub.w	sp, sp, r3
 23fbf24:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
{   
 23fbf28:	460e      	mov	r6, r1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fbf2a:	bfd8      	it	le
 23fbf2c:	462a      	movle	r2, r5
 23fbf2e:	4629      	mov	r1, r5
 23fbf30:	f10d 0009 	add.w	r0, sp, #9
 23fbf34:	f88d 5008 	strb.w	r5, [sp, #8]
 23fbf38:	f003 fb27 	bl	23ff58a <memset>
        return instance().beginTransaction();
 23fbf3c:	f7ff ff76 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbf40:	f002 fde3 	bl	23feb0a <_ZN8SPIClass16beginTransactionEv>

    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fbf44:	1c43      	adds	r3, r0, #1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fbf46:	f10d 0808 	add.w	r8, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fbf4a:	d00c      	beq.n	23fbf66 <_Z15spi_master_readP12spi_master_tPhj+0x5a>
    }
    byte transfer(byte data) {
        return instance().transfer(data);
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fbf4c:	f7ff ff6e 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbf50:	4623      	mov	r3, r4
 23fbf52:	4632      	mov	r2, r6
 23fbf54:	4641      	mov	r1, r8
 23fbf56:	9500      	str	r5, [sp, #0]
 23fbf58:	f002 fe26 	bl	23feba8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fbf5c:	f7ff ff66 	bl	23fbe2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fbf60:	f002 fdd6 	bl	23feb10 <_ZN8SPIClass14endTransactionEv>
        return SPI_MASTER_ERROR;                        //return status
    }

    SPI.transfer(read_dummy, read_data_buffer, read_data_length, NULL);     //spi transaction for read (write = NULL)
    SPI.endTransaction();                                                   //end transaction and release spi peripheral lock
    return SPI_MASTER_SUCCESS;                                              //return status
 23fbf64:	4628      	mov	r0, r5
}
 23fbf66:	46bd      	mov	sp, r7
 23fbf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbf6c <_ZL13temphum13_crct>:
}

// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS

static uint8_t temphum13_crc ( uint16_t input_value )
{
 23fbf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbf70:	b087      	sub	sp, #28
 23fbf72:	ab02      	add	r3, sp, #8
 23fbf74:	4601      	mov	r1, r0
    char do_invert;
    uint8_t ret_val;
    uint16_t aux_mask;
    char bit_string[ 16 ];
    
    aux_mask = 0x8000;
 23fbf76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
 23fbf7a:	2010      	movs	r0, #16
 23fbf7c:	469c      	mov	ip, r3
        {
            bit_string[ i ] = '1';
        }
        else
        {
            bit_string[ i ] = '0';
 23fbf7e:	2430      	movs	r4, #48	; 0x30
            bit_string[ i ] = '1';
 23fbf80:	2531      	movs	r5, #49	; 0x31
        if ( ( ( input_value & aux_mask ) != 0x0000 ) )
 23fbf82:	4211      	tst	r1, r2
    for ( i = 0; i < 16; i ++ )
 23fbf84:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
            bit_string[ i ] = '1';
 23fbf88:	bf14      	ite	ne
 23fbf8a:	701d      	strbne	r5, [r3, #0]
            bit_string[ i ] = '0';
 23fbf8c:	701c      	strbeq	r4, [r3, #0]
    for ( i = 0; i < 16; i ++ )
 23fbf8e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        }
        
        aux_mask >>= 1;
 23fbf92:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for ( i = 0; i < 16; i ++ )
 23fbf96:	f103 0301 	add.w	r3, r3, #1
 23fbf9a:	d1f2      	bne.n	23fbf82 <_ZL13temphum13_crct+0x16>
 23fbf9c:	4606      	mov	r6, r0
 23fbf9e:	4607      	mov	r7, r0
 23fbfa0:	4686      	mov	lr, r0
 23fbfa2:	4683      	mov	fp, r0
 23fbfa4:	4603      	mov	r3, r0
 23fbfa6:	4680      	mov	r8, r0
 23fbfa8:	4681      	mov	r9, r0
 23fbfaa:	4602      	mov	r2, r0
 23fbfac:	4605      	mov	r5, r0
        crc[ i ] = 0;
    }

    for ( i = 0; i < 16; ++ i )
    {
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fbfae:	f81c 1005 	ldrb.w	r1, [ip, r5]
    for ( i = 0; i < 16; ++ i )
 23fbfb2:	3501      	adds	r5, #1
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fbfb4:	2931      	cmp	r1, #49	; 0x31
 23fbfb6:	bf08      	it	eq
 23fbfb8:	f082 0201 	eoreq.w	r2, r2, #1
 23fbfbc:	b2d4      	uxtb	r4, r2

        crc[ 7 ] = crc[ 6 ];
        crc[ 6 ] = crc[ 5 ];
        crc[ 5 ] = crc[ 4 ] ^ do_invert;
 23fbfbe:	46c2      	mov	sl, r8
    for ( i = 0; i < 16; ++ i )
 23fbfc0:	2d10      	cmp	r5, #16
        crc[ 5 ] = crc[ 4 ] ^ do_invert;
 23fbfc2:	ea84 0803 	eor.w	r8, r4, r3
        crc[ 4 ] = crc[ 3 ] ^ do_invert;
 23fbfc6:	ea84 030b 	eor.w	r3, r4, fp
 23fbfca:	464a      	mov	r2, r9
 23fbfcc:	46f3      	mov	fp, lr
 23fbfce:	4631      	mov	r1, r6
 23fbfd0:	b2db      	uxtb	r3, r3
    for ( i = 0; i < 16; ++ i )
 23fbfd2:	d122      	bne.n	23fc01a <_ZL13temphum13_crct+0xae>
 23fbfd4:	f88d 3004 	strb.w	r3, [sp, #4]
 23fbfd8:	4669      	mov	r1, sp
    }

    ret_val = 0x00;
    aux_mask = 0x0001;
    
    for ( i = 0; i < 8; i ++ )
 23fbfda:	2300      	movs	r3, #0
    aux_mask = 0x0001;
 23fbfdc:	2201      	movs	r2, #1
 23fbfde:	f88d 9007 	strb.w	r9, [sp, #7]
 23fbfe2:	f88d a006 	strb.w	sl, [sp, #6]
 23fbfe6:	f88d 8005 	strb.w	r8, [sp, #5]
 23fbfea:	f88d e003 	strb.w	lr, [sp, #3]
 23fbfee:	f88d 7002 	strb.w	r7, [sp, #2]
 23fbff2:	f88d 6001 	strb.w	r6, [sp, #1]
 23fbff6:	f88d 4000 	strb.w	r4, [sp]
    {
        if ( ( ( crc[ i ] & 0x01 ) == 0x01 ) )
 23fbffa:	f811 4b01 	ldrb.w	r4, [r1], #1
    for ( i = 0; i < 8; i ++ )
 23fbffe:	3301      	adds	r3, #1
        if ( ( ( crc[ i ] & 0x01 ) == 0x01 ) )
 23fc000:	07e4      	lsls	r4, r4, #31
        {
            ret_val |= aux_mask;
 23fc002:	bf48      	it	mi
 23fc004:	4310      	orrmi	r0, r2
    for ( i = 0; i < 8; i ++ )
 23fc006:	b2db      	uxtb	r3, r3
            ret_val |= aux_mask;
 23fc008:	bf48      	it	mi
 23fc00a:	b2c0      	uxtbmi	r0, r0
        }
        aux_mask <<= 1;
 23fc00c:	0052      	lsls	r2, r2, #1
    for ( i = 0; i < 8; i ++ )
 23fc00e:	2b08      	cmp	r3, #8
        aux_mask <<= 1;
 23fc010:	b292      	uxth	r2, r2
    for ( i = 0; i < 8; i ++ )
 23fc012:	d1f2      	bne.n	23fbffa <_ZL13temphum13_crct+0x8e>
    }
    
    return ret_val;
}
 23fc014:	b007      	add	sp, #28
 23fc016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc01a:	46be      	mov	lr, r7
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fc01c:	4626      	mov	r6, r4
 23fc01e:	460f      	mov	r7, r1
 23fc020:	46d1      	mov	r9, sl
 23fc022:	e7c4      	b.n	23fbfae <_ZL13temphum13_crct+0x42>

023fc024 <_Z11Delay_100msv>:
inline void Delay_us(unsigned long us) {delayMicroseconds(us);}

//ms delays functions for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
 23fc024:	2064      	movs	r0, #100	; 0x64
 23fc026:	f000 be47 	b.w	23fccb8 <delay>

023fc02a <temphum13_cfg_setup>:
    cfg->scl = HAL_PIN_NC;
 23fc02a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fc02e:	8003      	strh	r3, [r0, #0]
    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fc030:	2300      	movs	r3, #0
 23fc032:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fc034:	2340      	movs	r3, #64	; 0x40
 23fc036:	7203      	strb	r3, [r0, #8]
}
 23fc038:	4770      	bx	lr

023fc03a <temphum13_init>:
{
 23fc03a:	b530      	push	{r4, r5, lr}
 23fc03c:	460d      	mov	r5, r1
 23fc03e:	4604      	mov	r4, r0
 23fc040:	b085      	sub	sp, #20
    i2c_master_configure_default( &i2c_cfg );
 23fc042:	a801      	add	r0, sp, #4
 23fc044:	f7ff fe4e 	bl	23fbce4 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fc048:	686b      	ldr	r3, [r5, #4]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc04a:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fc04c:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fc04e:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc050:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fc052:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fc056:	786b      	ldrb	r3, [r5, #1]
 23fc058:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fc05c:	7a2b      	ldrb	r3, [r5, #8]
 23fc05e:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fc060:	f7ff fe52 	bl	23fbd08 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fc064:	3001      	adds	r0, #1
 23fc066:	d00a      	beq.n	23fc07e <temphum13_init+0x44>
    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fc068:	7b21      	ldrb	r1, [r4, #12]
 23fc06a:	4620      	mov	r0, r4
 23fc06c:	f7ff fe6a 	bl	23fbd44 <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fc070:	4620      	mov	r0, r4
 23fc072:	6869      	ldr	r1, [r5, #4]
 23fc074:	f7ff fe58 	bl	23fbd28 <_Z20i2c_master_set_speedP12i2c_master_tm>
    return TEMPHUM13_OK;
 23fc078:	2000      	movs	r0, #0
}
 23fc07a:	b005      	add	sp, #20
 23fc07c:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23fc07e:	20ff      	movs	r0, #255	; 0xff
 23fc080:	e7fb      	b.n	23fc07a <temphum13_init+0x40>

023fc082 <temphum13_generic_read>:
{
 23fc082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc084:	461e      	mov	r6, r3
 23fc086:	4604      	mov	r4, r0
 23fc088:	4615      	mov	r5, r2
 23fc08a:	f88d 1007 	strb.w	r1, [sp, #7]
    i2c_master_write( &ctx->i2c, &reg, 1 );
 23fc08e:	2201      	movs	r2, #1
 23fc090:	f10d 0107 	add.w	r1, sp, #7
 23fc094:	f7ff fe5c 	bl	23fbd50 <_Z16i2c_master_writeP12i2c_master_tPhj>
    Delay_100ms( );
 23fc098:	f7ff ffc4 	bl	23fc024 <_Z11Delay_100msv>
    i2c_master_read( &ctx->i2c,data_buf, len );
 23fc09c:	4632      	mov	r2, r6
 23fc09e:	4629      	mov	r1, r5
 23fc0a0:	4620      	mov	r0, r4
 23fc0a2:	f7ff fe73 	bl	23fbd8c <_Z15i2c_master_readP12i2c_master_tPhj>
    Delay_100ms();
 23fc0a6:	f7ff ffbd 	bl	23fc024 <_Z11Delay_100msv>
}
 23fc0aa:	b002      	add	sp, #8
 23fc0ac:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc0b0 <temphum13_get_temperature>:
{
 23fc0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    temphum13_generic_read( ctx, aux_command, aux_buffer, 3 );
 23fc0b2:	2303      	movs	r3, #3
 23fc0b4:	21e3      	movs	r1, #227	; 0xe3
 23fc0b6:	aa01      	add	r2, sp, #4
 23fc0b8:	f7ff ffe3 	bl	23fc082 <temphum13_generic_read>
    aux_temperature |= aux_buffer[ 1 ];
 23fc0bc:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    if ( aux_buffer[ 2 ] == temphum13_crc( aux_temperature ) )
 23fc0c0:	f89d 5006 	ldrb.w	r5, [sp, #6]
 23fc0c4:	ba64      	rev16	r4, r4
 23fc0c6:	b2a4      	uxth	r4, r4
 23fc0c8:	4620      	mov	r0, r4
 23fc0ca:	f7ff ff4f 	bl	23fbf6c <_ZL13temphum13_crct>
 23fc0ce:	4285      	cmp	r5, r0
 23fc0d0:	d11d      	bne.n	23fc10e <temphum13_get_temperature+0x5e>
        aux_temperature &= 0xFFFC;
 23fc0d2:	f024 0003 	bic.w	r0, r4, #3
        retval_temperature *= 175.72;
 23fc0d6:	ee07 0a90 	vmov	s15, r0
 23fc0da:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 23fc0de:	ee17 0a90 	vmov	r0, s15
 23fc0e2:	f7fe faf1 	bl	23fa6c8 <__aeabi_f2d>
 23fc0e6:	a30d      	add	r3, pc, #52	; (adr r3, 23fc11c <temphum13_get_temperature+0x6c>)
 23fc0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc0ec:	f7fe fb44 	bl	23fa778 <__aeabi_dmul>
 23fc0f0:	f7fe fddc 	bl	23facac <__aeabi_d2f>
        retval_temperature -= 46.85;
 23fc0f4:	f7fe fae8 	bl	23fa6c8 <__aeabi_f2d>
 23fc0f8:	a30a      	add	r3, pc, #40	; (adr r3, 23fc124 <temphum13_get_temperature+0x74>)
 23fc0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc0fe:	f7fe f983 	bl	23fa408 <__aeabi_dsub>
 23fc102:	f7fe fdd3 	bl	23facac <__aeabi_d2f>
 23fc106:	ee00 0a10 	vmov	s0, r0
}
 23fc10a:	b003      	add	sp, #12
 23fc10c:	bd30      	pop	{r4, r5, pc}
    return 65536.00;
 23fc10e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23fc118 <temphum13_get_temperature+0x68>
 23fc112:	e7fa      	b.n	23fc10a <temphum13_get_temperature+0x5a>
 23fc114:	f3af 8000 	nop.w
 23fc118:	47800000 	.word	0x47800000
 23fc11c:	3d70a3d7 	.word	0x3d70a3d7
 23fc120:	4065f70a 	.word	0x4065f70a
 23fc124:	cccccccd 	.word	0xcccccccd
 23fc128:	40476ccc 	.word	0x40476ccc

023fc12c <temphum13_get_humidity>:
{
 23fc12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    temphum13_generic_read( ctx, aux_command, aux_buffer, 3 );
 23fc12e:	2303      	movs	r3, #3
 23fc130:	21e5      	movs	r1, #229	; 0xe5
 23fc132:	aa01      	add	r2, sp, #4
 23fc134:	f7ff ffa5 	bl	23fc082 <temphum13_generic_read>
    aux_humidity |= aux_buffer[ 1 ];
 23fc138:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    if ( aux_buffer[ 2 ] == temphum13_crc( aux_humidity ) )
 23fc13c:	f89d 5006 	ldrb.w	r5, [sp, #6]
 23fc140:	ba64      	rev16	r4, r4
 23fc142:	b2a4      	uxth	r4, r4
 23fc144:	4620      	mov	r0, r4
 23fc146:	f7ff ff11 	bl	23fbf6c <_ZL13temphum13_crct>
 23fc14a:	4285      	cmp	r5, r0
        aux_humidity &= 0xFFFC;
 23fc14c:	bf01      	itttt	eq
 23fc14e:	f024 0303 	biceq.w	r3, r4, #3
 23fc152:	ee07 3a90 	vmoveq	s15, r3
        retval_humidity -= 6.0;
 23fc156:	eeb9 0a08 	vmoveq.f32	s0, #152	; 0xc0c00000 -6.0
        retval_humidity /= 65536;
 23fc15a:	eefb 7ac8 	vcvteq.f32.u32	s15, s15, #16
        retval_humidity -= 6.0;
 23fc15e:	bf0a      	itet	eq
 23fc160:	ed9f 7a03 	vldreq	s14, [pc, #12]	; 23fc170 <temphum13_get_humidity+0x44>
    return 65536.00;
 23fc164:	ed9f 0a03 	vldrne	s0, [pc, #12]	; 23fc174 <temphum13_get_humidity+0x48>
        retval_humidity -= 6.0;
 23fc168:	eea7 0a87 	vfmaeq.f32	s0, s15, s14
}
 23fc16c:	b003      	add	sp, #12
 23fc16e:	bd30      	pop	{r4, r5, pc}
 23fc170:	42fa0000 	.word	0x42fa0000
 23fc174:	47800000 	.word	0x47800000

023fc178 <temphum13_soft_reset>:
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fc178:	23fe      	movs	r3, #254	; 0xfe
{
 23fc17a:	b507      	push	{r0, r1, r2, lr}
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fc17c:	2201      	movs	r2, #1
 23fc17e:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fc182:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fc186:	f7ff fde3 	bl	23fbd50 <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fc18a:	b003      	add	sp, #12
 23fc18c:	f85d fb04 	ldr.w	pc, [sp], #4

023fc190 <temphum13_default_cfg>:
{
 23fc190:	b507      	push	{r0, r1, r2, lr}
 23fc192:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fc194:	f7ff ff46 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc198:	f7ff ff44 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc19c:	f7ff ff42 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc1a0:	f7ff ff40 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc1a4:	f7ff ff3e 	bl	23fc024 <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23fc1a8:	9801      	ldr	r0, [sp, #4]
 23fc1aa:	f7ff ffe5 	bl	23fc178 <temphum13_soft_reset>
    Delay_100ms( );
 23fc1ae:	f7ff ff39 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc1b2:	f7ff ff37 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc1b6:	f7ff ff35 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc1ba:	f7ff ff33 	bl	23fc024 <_Z11Delay_100msv>
    Delay_100ms( );
 23fc1be:	f7ff ff31 	bl	23fc024 <_Z11Delay_100msv>
}
 23fc1c2:	b003      	add	sp, #12
 23fc1c4:	f85d fb04 	ldr.w	pc, [sp], #4

023fc1c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc1c8:	b509      	push	{r0, r3, lr}
 23fc1ca:	4804      	ldr	r0, [pc, #16]	; (23fc1dc <os_mutex_recursive_create+0x14>)
 23fc1cc:	6800      	ldr	r0, [r0, #0]
 23fc1ce:	4b04      	ldr	r3, [pc, #16]	; (23fc1e0 <os_mutex_recursive_create+0x18>)
 23fc1d0:	4403      	add	r3, r0
 23fc1d2:	681b      	ldr	r3, [r3, #0]
 23fc1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc1d6:	9302      	str	r3, [sp, #8]
 23fc1d8:	bd09      	pop	{r0, r3, pc}
 23fc1da:	0000      	.short	0x0000
 23fc1dc:	1007ad08 	.word	0x1007ad08
 23fc1e0:	00000030 	.word	0x00000030

023fc1e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc1e4:	b509      	push	{r0, r3, lr}
 23fc1e6:	4804      	ldr	r0, [pc, #16]	; (23fc1f8 <os_mutex_recursive_destroy+0x14>)
 23fc1e8:	6800      	ldr	r0, [r0, #0]
 23fc1ea:	4b04      	ldr	r3, [pc, #16]	; (23fc1fc <os_mutex_recursive_destroy+0x18>)
 23fc1ec:	4403      	add	r3, r0
 23fc1ee:	681b      	ldr	r3, [r3, #0]
 23fc1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc1f2:	9302      	str	r3, [sp, #8]
 23fc1f4:	bd09      	pop	{r0, r3, pc}
 23fc1f6:	0000      	.short	0x0000
 23fc1f8:	1007ad08 	.word	0x1007ad08
 23fc1fc:	00000030 	.word	0x00000030

023fc200 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc200:	b509      	push	{r0, r3, lr}
 23fc202:	4804      	ldr	r0, [pc, #16]	; (23fc214 <os_mutex_recursive_lock+0x14>)
 23fc204:	6800      	ldr	r0, [r0, #0]
 23fc206:	4b04      	ldr	r3, [pc, #16]	; (23fc218 <os_mutex_recursive_lock+0x18>)
 23fc208:	4403      	add	r3, r0
 23fc20a:	681b      	ldr	r3, [r3, #0]
 23fc20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc20e:	9302      	str	r3, [sp, #8]
 23fc210:	bd09      	pop	{r0, r3, pc}
 23fc212:	0000      	.short	0x0000
 23fc214:	1007ad08 	.word	0x1007ad08
 23fc218:	00000030 	.word	0x00000030

023fc21c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc21c:	b509      	push	{r0, r3, lr}
 23fc21e:	4804      	ldr	r0, [pc, #16]	; (23fc230 <os_mutex_recursive_unlock+0x14>)
 23fc220:	6800      	ldr	r0, [r0, #0]
 23fc222:	4b04      	ldr	r3, [pc, #16]	; (23fc234 <os_mutex_recursive_unlock+0x18>)
 23fc224:	4403      	add	r3, r0
 23fc226:	681b      	ldr	r3, [r3, #0]
 23fc228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc22a:	9302      	str	r3, [sp, #8]
 23fc22c:	bd09      	pop	{r0, r3, pc}
 23fc22e:	0000      	.short	0x0000
 23fc230:	1007ad08 	.word	0x1007ad08
 23fc234:	00000030 	.word	0x00000030

023fc238 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc238:	b509      	push	{r0, r3, lr}
 23fc23a:	4804      	ldr	r0, [pc, #16]	; (23fc24c <HAL_RNG_GetRandomNumber+0x14>)
 23fc23c:	6800      	ldr	r0, [r0, #0]
 23fc23e:	4b04      	ldr	r3, [pc, #16]	; (23fc250 <HAL_RNG_GetRandomNumber+0x18>)
 23fc240:	4403      	add	r3, r0
 23fc242:	681b      	ldr	r3, [r3, #0]
 23fc244:	685b      	ldr	r3, [r3, #4]
 23fc246:	9302      	str	r3, [sp, #8]
 23fc248:	bd09      	pop	{r0, r3, pc}
 23fc24a:	0000      	.short	0x0000
 23fc24c:	1007ad08 	.word	0x1007ad08
 23fc250:	00000000 	.word	0x00000000

023fc254 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc254:	b509      	push	{r0, r3, lr}
 23fc256:	4804      	ldr	r0, [pc, #16]	; (23fc268 <HAL_Delay_Microseconds+0x14>)
 23fc258:	6800      	ldr	r0, [r0, #0]
 23fc25a:	4b04      	ldr	r3, [pc, #16]	; (23fc26c <HAL_Delay_Microseconds+0x18>)
 23fc25c:	4403      	add	r3, r0
 23fc25e:	681b      	ldr	r3, [r3, #0]
 23fc260:	68db      	ldr	r3, [r3, #12]
 23fc262:	9302      	str	r3, [sp, #8]
 23fc264:	bd09      	pop	{r0, r3, pc}
 23fc266:	0000      	.short	0x0000
 23fc268:	1007ad08 	.word	0x1007ad08
 23fc26c:	00000000 	.word	0x00000000

023fc270 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fc270:	b509      	push	{r0, r3, lr}
 23fc272:	4804      	ldr	r0, [pc, #16]	; (23fc284 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fc274:	6800      	ldr	r0, [r0, #0]
 23fc276:	4b04      	ldr	r3, [pc, #16]	; (23fc288 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fc278:	4403      	add	r3, r0
 23fc27a:	681b      	ldr	r3, [r3, #0]
 23fc27c:	691b      	ldr	r3, [r3, #16]
 23fc27e:	9302      	str	r3, [sp, #8]
 23fc280:	bd09      	pop	{r0, r3, pc}
 23fc282:	0000      	.short	0x0000
 23fc284:	1007ad08 	.word	0x1007ad08
 23fc288:	00000000 	.word	0x00000000

023fc28c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc28c:	b509      	push	{r0, r3, lr}
 23fc28e:	4804      	ldr	r0, [pc, #16]	; (23fc2a0 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc290:	6800      	ldr	r0, [r0, #0]
 23fc292:	4b04      	ldr	r3, [pc, #16]	; (23fc2a4 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc294:	4403      	add	r3, r0
 23fc296:	681b      	ldr	r3, [r3, #0]
 23fc298:	695b      	ldr	r3, [r3, #20]
 23fc29a:	9302      	str	r3, [sp, #8]
 23fc29c:	bd09      	pop	{r0, r3, pc}
 23fc29e:	0000      	.short	0x0000
 23fc2a0:	1007ad08 	.word	0x1007ad08
 23fc2a4:	00000000 	.word	0x00000000

023fc2a8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23fc2a8:	b509      	push	{r0, r3, lr}
 23fc2aa:	4804      	ldr	r0, [pc, #16]	; (23fc2bc <hal_rtc_time_is_valid+0x14>)
 23fc2ac:	6800      	ldr	r0, [r0, #0]
 23fc2ae:	4b04      	ldr	r3, [pc, #16]	; (23fc2c0 <hal_rtc_time_is_valid+0x18>)
 23fc2b0:	4403      	add	r3, r0
 23fc2b2:	681b      	ldr	r3, [r3, #0]
 23fc2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fc2b6:	9302      	str	r3, [sp, #8]
 23fc2b8:	bd09      	pop	{r0, r3, pc}
 23fc2ba:	0000      	.short	0x0000
 23fc2bc:	1007ad08 	.word	0x1007ad08
 23fc2c0:	00000000 	.word	0x00000000

023fc2c4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23fc2c4:	b509      	push	{r0, r3, lr}
 23fc2c6:	4804      	ldr	r0, [pc, #16]	; (23fc2d8 <hal_rtc_get_time+0x14>)
 23fc2c8:	6800      	ldr	r0, [r0, #0]
 23fc2ca:	4b04      	ldr	r3, [pc, #16]	; (23fc2dc <hal_rtc_get_time+0x18>)
 23fc2cc:	4403      	add	r3, r0
 23fc2ce:	681b      	ldr	r3, [r3, #0]
 23fc2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23fc2d2:	9302      	str	r3, [sp, #8]
 23fc2d4:	bd09      	pop	{r0, r3, pc}
 23fc2d6:	0000      	.short	0x0000
 23fc2d8:	1007ad08 	.word	0x1007ad08
 23fc2dc:	00000000 	.word	0x00000000

023fc2e0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc2e0:	b509      	push	{r0, r3, lr}
 23fc2e2:	4804      	ldr	r0, [pc, #16]	; (23fc2f4 <hal_gpio_mode+0x14>)
 23fc2e4:	6800      	ldr	r0, [r0, #0]
 23fc2e6:	4b04      	ldr	r3, [pc, #16]	; (23fc2f8 <hal_gpio_mode+0x18>)
 23fc2e8:	4403      	add	r3, r0
 23fc2ea:	681b      	ldr	r3, [r3, #0]
 23fc2ec:	689b      	ldr	r3, [r3, #8]
 23fc2ee:	9302      	str	r3, [sp, #8]
 23fc2f0:	bd09      	pop	{r0, r3, pc}
 23fc2f2:	0000      	.short	0x0000
 23fc2f4:	1007ad08 	.word	0x1007ad08
 23fc2f8:	00000014 	.word	0x00000014

023fc2fc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc2fc:	b509      	push	{r0, r3, lr}
 23fc2fe:	4804      	ldr	r0, [pc, #16]	; (23fc310 <hal_gpio_get_mode+0x14>)
 23fc300:	6800      	ldr	r0, [r0, #0]
 23fc302:	4b04      	ldr	r3, [pc, #16]	; (23fc314 <hal_gpio_get_mode+0x18>)
 23fc304:	4403      	add	r3, r0
 23fc306:	681b      	ldr	r3, [r3, #0]
 23fc308:	68db      	ldr	r3, [r3, #12]
 23fc30a:	9302      	str	r3, [sp, #8]
 23fc30c:	bd09      	pop	{r0, r3, pc}
 23fc30e:	0000      	.short	0x0000
 23fc310:	1007ad08 	.word	0x1007ad08
 23fc314:	00000014 	.word	0x00000014

023fc318 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc318:	b509      	push	{r0, r3, lr}
 23fc31a:	4804      	ldr	r0, [pc, #16]	; (23fc32c <hal_gpio_write+0x14>)
 23fc31c:	6800      	ldr	r0, [r0, #0]
 23fc31e:	4b04      	ldr	r3, [pc, #16]	; (23fc330 <hal_gpio_write+0x18>)
 23fc320:	4403      	add	r3, r0
 23fc322:	681b      	ldr	r3, [r3, #0]
 23fc324:	691b      	ldr	r3, [r3, #16]
 23fc326:	9302      	str	r3, [sp, #8]
 23fc328:	bd09      	pop	{r0, r3, pc}
 23fc32a:	0000      	.short	0x0000
 23fc32c:	1007ad08 	.word	0x1007ad08
 23fc330:	00000014 	.word	0x00000014

023fc334 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fc334:	b509      	push	{r0, r3, lr}
 23fc336:	4804      	ldr	r0, [pc, #16]	; (23fc348 <hal_gpio_read+0x14>)
 23fc338:	6800      	ldr	r0, [r0, #0]
 23fc33a:	4b04      	ldr	r3, [pc, #16]	; (23fc34c <hal_gpio_read+0x18>)
 23fc33c:	4403      	add	r3, r0
 23fc33e:	681b      	ldr	r3, [r3, #0]
 23fc340:	695b      	ldr	r3, [r3, #20]
 23fc342:	9302      	str	r3, [sp, #8]
 23fc344:	bd09      	pop	{r0, r3, pc}
 23fc346:	0000      	.short	0x0000
 23fc348:	1007ad08 	.word	0x1007ad08
 23fc34c:	00000014 	.word	0x00000014

023fc350 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fc350:	b509      	push	{r0, r3, lr}
 23fc352:	4804      	ldr	r0, [pc, #16]	; (23fc364 <hal_i2c_set_speed+0x14>)
 23fc354:	6800      	ldr	r0, [r0, #0]
 23fc356:	4b04      	ldr	r3, [pc, #16]	; (23fc368 <hal_i2c_set_speed+0x18>)
 23fc358:	4403      	add	r3, r0
 23fc35a:	681b      	ldr	r3, [r3, #0]
 23fc35c:	681b      	ldr	r3, [r3, #0]
 23fc35e:	9302      	str	r3, [sp, #8]
 23fc360:	bd09      	pop	{r0, r3, pc}
 23fc362:	0000      	.short	0x0000
 23fc364:	1007ad08 	.word	0x1007ad08
 23fc368:	00000010 	.word	0x00000010

023fc36c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fc36c:	b509      	push	{r0, r3, lr}
 23fc36e:	4804      	ldr	r0, [pc, #16]	; (23fc380 <hal_i2c_begin+0x14>)
 23fc370:	6800      	ldr	r0, [r0, #0]
 23fc372:	4b04      	ldr	r3, [pc, #16]	; (23fc384 <hal_i2c_begin+0x18>)
 23fc374:	4403      	add	r3, r0
 23fc376:	681b      	ldr	r3, [r3, #0]
 23fc378:	68db      	ldr	r3, [r3, #12]
 23fc37a:	9302      	str	r3, [sp, #8]
 23fc37c:	bd09      	pop	{r0, r3, pc}
 23fc37e:	0000      	.short	0x0000
 23fc380:	1007ad08 	.word	0x1007ad08
 23fc384:	00000010 	.word	0x00000010

023fc388 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fc388:	b509      	push	{r0, r3, lr}
 23fc38a:	4804      	ldr	r0, [pc, #16]	; (23fc39c <hal_i2c_begin_transmission+0x14>)
 23fc38c:	6800      	ldr	r0, [r0, #0]
 23fc38e:	4b04      	ldr	r3, [pc, #16]	; (23fc3a0 <hal_i2c_begin_transmission+0x18>)
 23fc390:	4403      	add	r3, r0
 23fc392:	681b      	ldr	r3, [r3, #0]
 23fc394:	699b      	ldr	r3, [r3, #24]
 23fc396:	9302      	str	r3, [sp, #8]
 23fc398:	bd09      	pop	{r0, r3, pc}
 23fc39a:	0000      	.short	0x0000
 23fc39c:	1007ad08 	.word	0x1007ad08
 23fc3a0:	00000010 	.word	0x00000010

023fc3a4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fc3a4:	b509      	push	{r0, r3, lr}
 23fc3a6:	4804      	ldr	r0, [pc, #16]	; (23fc3b8 <hal_i2c_end_transmission+0x14>)
 23fc3a8:	6800      	ldr	r0, [r0, #0]
 23fc3aa:	4b04      	ldr	r3, [pc, #16]	; (23fc3bc <hal_i2c_end_transmission+0x18>)
 23fc3ac:	4403      	add	r3, r0
 23fc3ae:	681b      	ldr	r3, [r3, #0]
 23fc3b0:	69db      	ldr	r3, [r3, #28]
 23fc3b2:	9302      	str	r3, [sp, #8]
 23fc3b4:	bd09      	pop	{r0, r3, pc}
 23fc3b6:	0000      	.short	0x0000
 23fc3b8:	1007ad08 	.word	0x1007ad08
 23fc3bc:	00000010 	.word	0x00000010

023fc3c0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc3c0:	b509      	push	{r0, r3, lr}
 23fc3c2:	4804      	ldr	r0, [pc, #16]	; (23fc3d4 <hal_i2c_write+0x14>)
 23fc3c4:	6800      	ldr	r0, [r0, #0]
 23fc3c6:	4b04      	ldr	r3, [pc, #16]	; (23fc3d8 <hal_i2c_write+0x18>)
 23fc3c8:	4403      	add	r3, r0
 23fc3ca:	681b      	ldr	r3, [r3, #0]
 23fc3cc:	6a1b      	ldr	r3, [r3, #32]
 23fc3ce:	9302      	str	r3, [sp, #8]
 23fc3d0:	bd09      	pop	{r0, r3, pc}
 23fc3d2:	0000      	.short	0x0000
 23fc3d4:	1007ad08 	.word	0x1007ad08
 23fc3d8:	00000010 	.word	0x00000010

023fc3dc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc3dc:	b509      	push	{r0, r3, lr}
 23fc3de:	4804      	ldr	r0, [pc, #16]	; (23fc3f0 <hal_i2c_available+0x14>)
 23fc3e0:	6800      	ldr	r0, [r0, #0]
 23fc3e2:	4b04      	ldr	r3, [pc, #16]	; (23fc3f4 <hal_i2c_available+0x18>)
 23fc3e4:	4403      	add	r3, r0
 23fc3e6:	681b      	ldr	r3, [r3, #0]
 23fc3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc3ea:	9302      	str	r3, [sp, #8]
 23fc3ec:	bd09      	pop	{r0, r3, pc}
 23fc3ee:	0000      	.short	0x0000
 23fc3f0:	1007ad08 	.word	0x1007ad08
 23fc3f4:	00000010 	.word	0x00000010

023fc3f8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc3f8:	b509      	push	{r0, r3, lr}
 23fc3fa:	4804      	ldr	r0, [pc, #16]	; (23fc40c <hal_i2c_read+0x14>)
 23fc3fc:	6800      	ldr	r0, [r0, #0]
 23fc3fe:	4b04      	ldr	r3, [pc, #16]	; (23fc410 <hal_i2c_read+0x18>)
 23fc400:	4403      	add	r3, r0
 23fc402:	681b      	ldr	r3, [r3, #0]
 23fc404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc406:	9302      	str	r3, [sp, #8]
 23fc408:	bd09      	pop	{r0, r3, pc}
 23fc40a:	0000      	.short	0x0000
 23fc40c:	1007ad08 	.word	0x1007ad08
 23fc410:	00000010 	.word	0x00000010

023fc414 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc414:	b509      	push	{r0, r3, lr}
 23fc416:	4804      	ldr	r0, [pc, #16]	; (23fc428 <hal_i2c_peek+0x14>)
 23fc418:	6800      	ldr	r0, [r0, #0]
 23fc41a:	4b04      	ldr	r3, [pc, #16]	; (23fc42c <hal_i2c_peek+0x18>)
 23fc41c:	4403      	add	r3, r0
 23fc41e:	681b      	ldr	r3, [r3, #0]
 23fc420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc422:	9302      	str	r3, [sp, #8]
 23fc424:	bd09      	pop	{r0, r3, pc}
 23fc426:	0000      	.short	0x0000
 23fc428:	1007ad08 	.word	0x1007ad08
 23fc42c:	00000010 	.word	0x00000010

023fc430 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc430:	b509      	push	{r0, r3, lr}
 23fc432:	4804      	ldr	r0, [pc, #16]	; (23fc444 <hal_i2c_flush+0x14>)
 23fc434:	6800      	ldr	r0, [r0, #0]
 23fc436:	4b04      	ldr	r3, [pc, #16]	; (23fc448 <hal_i2c_flush+0x18>)
 23fc438:	4403      	add	r3, r0
 23fc43a:	681b      	ldr	r3, [r3, #0]
 23fc43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc43e:	9302      	str	r3, [sp, #8]
 23fc440:	bd09      	pop	{r0, r3, pc}
 23fc442:	0000      	.short	0x0000
 23fc444:	1007ad08 	.word	0x1007ad08
 23fc448:	00000010 	.word	0x00000010

023fc44c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc44c:	b509      	push	{r0, r3, lr}
 23fc44e:	4804      	ldr	r0, [pc, #16]	; (23fc460 <hal_i2c_is_enabled+0x14>)
 23fc450:	6800      	ldr	r0, [r0, #0]
 23fc452:	4b04      	ldr	r3, [pc, #16]	; (23fc464 <hal_i2c_is_enabled+0x18>)
 23fc454:	4403      	add	r3, r0
 23fc456:	681b      	ldr	r3, [r3, #0]
 23fc458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc45a:	9302      	str	r3, [sp, #8]
 23fc45c:	bd09      	pop	{r0, r3, pc}
 23fc45e:	0000      	.short	0x0000
 23fc460:	1007ad08 	.word	0x1007ad08
 23fc464:	00000010 	.word	0x00000010

023fc468 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc468:	b509      	push	{r0, r3, lr}
 23fc46a:	4804      	ldr	r0, [pc, #16]	; (23fc47c <hal_i2c_init+0x14>)
 23fc46c:	6800      	ldr	r0, [r0, #0]
 23fc46e:	4b04      	ldr	r3, [pc, #16]	; (23fc480 <hal_i2c_init+0x18>)
 23fc470:	4403      	add	r3, r0
 23fc472:	681b      	ldr	r3, [r3, #0]
 23fc474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc476:	9302      	str	r3, [sp, #8]
 23fc478:	bd09      	pop	{r0, r3, pc}
 23fc47a:	0000      	.short	0x0000
 23fc47c:	1007ad08 	.word	0x1007ad08
 23fc480:	00000010 	.word	0x00000010

023fc484 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fc484:	b509      	push	{r0, r3, lr}
 23fc486:	4804      	ldr	r0, [pc, #16]	; (23fc498 <hal_i2c_request_ex+0x14>)
 23fc488:	6800      	ldr	r0, [r0, #0]
 23fc48a:	4b04      	ldr	r3, [pc, #16]	; (23fc49c <hal_i2c_request_ex+0x18>)
 23fc48c:	4403      	add	r3, r0
 23fc48e:	681b      	ldr	r3, [r3, #0]
 23fc490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc492:	9302      	str	r3, [sp, #8]
 23fc494:	bd09      	pop	{r0, r3, pc}
 23fc496:	0000      	.short	0x0000
 23fc498:	1007ad08 	.word	0x1007ad08
 23fc49c:	00000010 	.word	0x00000010

023fc4a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc4a0:	b509      	push	{r0, r3, lr}
 23fc4a2:	4804      	ldr	r0, [pc, #16]	; (23fc4b4 <inet_inet_ntop+0x14>)
 23fc4a4:	6800      	ldr	r0, [r0, #0]
 23fc4a6:	4b04      	ldr	r3, [pc, #16]	; (23fc4b8 <inet_inet_ntop+0x18>)
 23fc4a8:	4403      	add	r3, r0
 23fc4aa:	681b      	ldr	r3, [r3, #0]
 23fc4ac:	695b      	ldr	r3, [r3, #20]
 23fc4ae:	9302      	str	r3, [sp, #8]
 23fc4b0:	bd09      	pop	{r0, r3, pc}
 23fc4b2:	0000      	.short	0x0000
 23fc4b4:	1007ad08 	.word	0x1007ad08
 23fc4b8:	0000004c 	.word	0x0000004c

023fc4bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc4bc:	b509      	push	{r0, r3, lr}
 23fc4be:	4804      	ldr	r0, [pc, #16]	; (23fc4d0 <netdb_freeaddrinfo+0x14>)
 23fc4c0:	6800      	ldr	r0, [r0, #0]
 23fc4c2:	4b04      	ldr	r3, [pc, #16]	; (23fc4d4 <netdb_freeaddrinfo+0x18>)
 23fc4c4:	4403      	add	r3, r0
 23fc4c6:	681b      	ldr	r3, [r3, #0]
 23fc4c8:	689b      	ldr	r3, [r3, #8]
 23fc4ca:	9302      	str	r3, [sp, #8]
 23fc4cc:	bd09      	pop	{r0, r3, pc}
 23fc4ce:	0000      	.short	0x0000
 23fc4d0:	1007ad08 	.word	0x1007ad08
 23fc4d4:	00000050 	.word	0x00000050

023fc4d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc4d8:	b509      	push	{r0, r3, lr}
 23fc4da:	4804      	ldr	r0, [pc, #16]	; (23fc4ec <netdb_getaddrinfo+0x14>)
 23fc4dc:	6800      	ldr	r0, [r0, #0]
 23fc4de:	4b04      	ldr	r3, [pc, #16]	; (23fc4f0 <netdb_getaddrinfo+0x18>)
 23fc4e0:	4403      	add	r3, r0
 23fc4e2:	681b      	ldr	r3, [r3, #0]
 23fc4e4:	68db      	ldr	r3, [r3, #12]
 23fc4e6:	9302      	str	r3, [sp, #8]
 23fc4e8:	bd09      	pop	{r0, r3, pc}
 23fc4ea:	0000      	.short	0x0000
 23fc4ec:	1007ad08 	.word	0x1007ad08
 23fc4f0:	00000050 	.word	0x00000050

023fc4f4 <hal_spi_set_data_mode>:
DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fc4f4:	b509      	push	{r0, r3, lr}
 23fc4f6:	4804      	ldr	r0, [pc, #16]	; (23fc508 <hal_spi_set_data_mode+0x14>)
 23fc4f8:	6800      	ldr	r0, [r0, #0]
 23fc4fa:	4b04      	ldr	r3, [pc, #16]	; (23fc50c <hal_spi_set_data_mode+0x18>)
 23fc4fc:	4403      	add	r3, r0
 23fc4fe:	681b      	ldr	r3, [r3, #0]
 23fc500:	68db      	ldr	r3, [r3, #12]
 23fc502:	9302      	str	r3, [sp, #8]
 23fc504:	bd09      	pop	{r0, r3, pc}
 23fc506:	0000      	.short	0x0000
 23fc508:	1007ad08 	.word	0x1007ad08
 23fc50c:	00000018 	.word	0x00000018

023fc510 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fc510:	b509      	push	{r0, r3, lr}
 23fc512:	4804      	ldr	r0, [pc, #16]	; (23fc524 <hal_spi_set_clock_divider+0x14>)
 23fc514:	6800      	ldr	r0, [r0, #0]
 23fc516:	4b04      	ldr	r3, [pc, #16]	; (23fc528 <hal_spi_set_clock_divider+0x18>)
 23fc518:	4403      	add	r3, r0
 23fc51a:	681b      	ldr	r3, [r3, #0]
 23fc51c:	691b      	ldr	r3, [r3, #16]
 23fc51e:	9302      	str	r3, [sp, #8]
 23fc520:	bd09      	pop	{r0, r3, pc}
 23fc522:	0000      	.short	0x0000
 23fc524:	1007ad08 	.word	0x1007ad08
 23fc528:	00000018 	.word	0x00000018

023fc52c <hal_spi_init>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc52c:	b509      	push	{r0, r3, lr}
 23fc52e:	4804      	ldr	r0, [pc, #16]	; (23fc540 <hal_spi_init+0x14>)
 23fc530:	6800      	ldr	r0, [r0, #0]
 23fc532:	4b04      	ldr	r3, [pc, #16]	; (23fc544 <hal_spi_init+0x18>)
 23fc534:	4403      	add	r3, r0
 23fc536:	681b      	ldr	r3, [r3, #0]
 23fc538:	69db      	ldr	r3, [r3, #28]
 23fc53a:	9302      	str	r3, [sp, #8]
 23fc53c:	bd09      	pop	{r0, r3, pc}
 23fc53e:	0000      	.short	0x0000
 23fc540:	1007ad08 	.word	0x1007ad08
 23fc544:	00000018 	.word	0x00000018

023fc548 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc548:	b509      	push	{r0, r3, lr}
 23fc54a:	4804      	ldr	r0, [pc, #16]	; (23fc55c <hal_spi_is_enabled+0x14>)
 23fc54c:	6800      	ldr	r0, [r0, #0]
 23fc54e:	4b04      	ldr	r3, [pc, #16]	; (23fc560 <hal_spi_is_enabled+0x18>)
 23fc550:	4403      	add	r3, r0
 23fc552:	681b      	ldr	r3, [r3, #0]
 23fc554:	6a1b      	ldr	r3, [r3, #32]
 23fc556:	9302      	str	r3, [sp, #8]
 23fc558:	bd09      	pop	{r0, r3, pc}
 23fc55a:	0000      	.short	0x0000
 23fc55c:	1007ad08 	.word	0x1007ad08
 23fc560:	00000018 	.word	0x00000018

023fc564 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fc564:	b509      	push	{r0, r3, lr}
 23fc566:	4804      	ldr	r0, [pc, #16]	; (23fc578 <hal_spi_info+0x14>)
 23fc568:	6800      	ldr	r0, [r0, #0]
 23fc56a:	4b04      	ldr	r3, [pc, #16]	; (23fc57c <hal_spi_info+0x18>)
 23fc56c:	4403      	add	r3, r0
 23fc56e:	681b      	ldr	r3, [r3, #0]
 23fc570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc572:	9302      	str	r3, [sp, #8]
 23fc574:	bd09      	pop	{r0, r3, pc}
 23fc576:	0000      	.short	0x0000
 23fc578:	1007ad08 	.word	0x1007ad08
 23fc57c:	00000018 	.word	0x00000018

023fc580 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fc580:	b509      	push	{r0, r3, lr}
 23fc582:	4804      	ldr	r0, [pc, #16]	; (23fc594 <hal_spi_transfer_dma+0x14>)
 23fc584:	6800      	ldr	r0, [r0, #0]
 23fc586:	4b04      	ldr	r3, [pc, #16]	; (23fc598 <hal_spi_transfer_dma+0x18>)
 23fc588:	4403      	add	r3, r0
 23fc58a:	681b      	ldr	r3, [r3, #0]
 23fc58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc58e:	9302      	str	r3, [sp, #8]
 23fc590:	bd09      	pop	{r0, r3, pc}
 23fc592:	0000      	.short	0x0000
 23fc594:	1007ad08 	.word	0x1007ad08
 23fc598:	00000018 	.word	0x00000018

023fc59c <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
 23fc59c:	b509      	push	{r0, r3, lr}
 23fc59e:	4804      	ldr	r0, [pc, #16]	; (23fc5b0 <hal_spi_begin_ext+0x14>)
 23fc5a0:	6800      	ldr	r0, [r0, #0]
 23fc5a2:	4b04      	ldr	r3, [pc, #16]	; (23fc5b4 <hal_spi_begin_ext+0x18>)
 23fc5a4:	4403      	add	r3, r0
 23fc5a6:	681b      	ldr	r3, [r3, #0]
 23fc5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc5aa:	9302      	str	r3, [sp, #8]
 23fc5ac:	bd09      	pop	{r0, r3, pc}
 23fc5ae:	0000      	.short	0x0000
 23fc5b0:	1007ad08 	.word	0x1007ad08
 23fc5b4:	00000018 	.word	0x00000018

023fc5b8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fc5b8:	b509      	push	{r0, r3, lr}
 23fc5ba:	4804      	ldr	r0, [pc, #16]	; (23fc5cc <hal_spi_transfer_dma_status+0x14>)
 23fc5bc:	6800      	ldr	r0, [r0, #0]
 23fc5be:	4b04      	ldr	r3, [pc, #16]	; (23fc5d0 <hal_spi_transfer_dma_status+0x18>)
 23fc5c0:	4403      	add	r3, r0
 23fc5c2:	681b      	ldr	r3, [r3, #0]
 23fc5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fc5c6:	9302      	str	r3, [sp, #8]
 23fc5c8:	bd09      	pop	{r0, r3, pc}
 23fc5ca:	0000      	.short	0x0000
 23fc5cc:	1007ad08 	.word	0x1007ad08
 23fc5d0:	00000018 	.word	0x00000018

023fc5d4 <hal_spi_acquire>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fc5d4:	b509      	push	{r0, r3, lr}
 23fc5d6:	4804      	ldr	r0, [pc, #16]	; (23fc5e8 <hal_spi_acquire+0x14>)
 23fc5d8:	6800      	ldr	r0, [r0, #0]
 23fc5da:	4b04      	ldr	r3, [pc, #16]	; (23fc5ec <hal_spi_acquire+0x18>)
 23fc5dc:	4403      	add	r3, r0
 23fc5de:	681b      	ldr	r3, [r3, #0]
 23fc5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc5e2:	9302      	str	r3, [sp, #8]
 23fc5e4:	bd09      	pop	{r0, r3, pc}
 23fc5e6:	0000      	.short	0x0000
 23fc5e8:	1007ad08 	.word	0x1007ad08
 23fc5ec:	00000018 	.word	0x00000018

023fc5f0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fc5f0:	b509      	push	{r0, r3, lr}
 23fc5f2:	4804      	ldr	r0, [pc, #16]	; (23fc604 <hal_spi_release+0x14>)
 23fc5f4:	6800      	ldr	r0, [r0, #0]
 23fc5f6:	4b04      	ldr	r3, [pc, #16]	; (23fc608 <hal_spi_release+0x18>)
 23fc5f8:	4403      	add	r3, r0
 23fc5fa:	681b      	ldr	r3, [r3, #0]
 23fc5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc5fe:	9302      	str	r3, [sp, #8]
 23fc600:	bd09      	pop	{r0, r3, pc}
 23fc602:	0000      	.short	0x0000
 23fc604:	1007ad08 	.word	0x1007ad08
 23fc608:	00000018 	.word	0x00000018

023fc60c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc60c:	b509      	push	{r0, r3, lr}
 23fc60e:	4804      	ldr	r0, [pc, #16]	; (23fc620 <hal_usart_end+0x14>)
 23fc610:	6800      	ldr	r0, [r0, #0]
 23fc612:	4b04      	ldr	r3, [pc, #16]	; (23fc624 <hal_usart_end+0x18>)
 23fc614:	4403      	add	r3, r0
 23fc616:	681b      	ldr	r3, [r3, #0]
 23fc618:	689b      	ldr	r3, [r3, #8]
 23fc61a:	9302      	str	r3, [sp, #8]
 23fc61c:	bd09      	pop	{r0, r3, pc}
 23fc61e:	0000      	.short	0x0000
 23fc620:	1007ad08 	.word	0x1007ad08
 23fc624:	00000024 	.word	0x00000024

023fc628 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc628:	b509      	push	{r0, r3, lr}
 23fc62a:	4804      	ldr	r0, [pc, #16]	; (23fc63c <hal_usart_write+0x14>)
 23fc62c:	6800      	ldr	r0, [r0, #0]
 23fc62e:	4b04      	ldr	r3, [pc, #16]	; (23fc640 <hal_usart_write+0x18>)
 23fc630:	4403      	add	r3, r0
 23fc632:	681b      	ldr	r3, [r3, #0]
 23fc634:	68db      	ldr	r3, [r3, #12]
 23fc636:	9302      	str	r3, [sp, #8]
 23fc638:	bd09      	pop	{r0, r3, pc}
 23fc63a:	0000      	.short	0x0000
 23fc63c:	1007ad08 	.word	0x1007ad08
 23fc640:	00000024 	.word	0x00000024

023fc644 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc644:	b509      	push	{r0, r3, lr}
 23fc646:	4804      	ldr	r0, [pc, #16]	; (23fc658 <hal_usart_available+0x14>)
 23fc648:	6800      	ldr	r0, [r0, #0]
 23fc64a:	4b04      	ldr	r3, [pc, #16]	; (23fc65c <hal_usart_available+0x18>)
 23fc64c:	4403      	add	r3, r0
 23fc64e:	681b      	ldr	r3, [r3, #0]
 23fc650:	691b      	ldr	r3, [r3, #16]
 23fc652:	9302      	str	r3, [sp, #8]
 23fc654:	bd09      	pop	{r0, r3, pc}
 23fc656:	0000      	.short	0x0000
 23fc658:	1007ad08 	.word	0x1007ad08
 23fc65c:	00000024 	.word	0x00000024

023fc660 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc660:	b509      	push	{r0, r3, lr}
 23fc662:	4804      	ldr	r0, [pc, #16]	; (23fc674 <hal_usart_read+0x14>)
 23fc664:	6800      	ldr	r0, [r0, #0]
 23fc666:	4b04      	ldr	r3, [pc, #16]	; (23fc678 <hal_usart_read+0x18>)
 23fc668:	4403      	add	r3, r0
 23fc66a:	681b      	ldr	r3, [r3, #0]
 23fc66c:	695b      	ldr	r3, [r3, #20]
 23fc66e:	9302      	str	r3, [sp, #8]
 23fc670:	bd09      	pop	{r0, r3, pc}
 23fc672:	0000      	.short	0x0000
 23fc674:	1007ad08 	.word	0x1007ad08
 23fc678:	00000024 	.word	0x00000024

023fc67c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc67c:	b509      	push	{r0, r3, lr}
 23fc67e:	4804      	ldr	r0, [pc, #16]	; (23fc690 <hal_usart_peek+0x14>)
 23fc680:	6800      	ldr	r0, [r0, #0]
 23fc682:	4b04      	ldr	r3, [pc, #16]	; (23fc694 <hal_usart_peek+0x18>)
 23fc684:	4403      	add	r3, r0
 23fc686:	681b      	ldr	r3, [r3, #0]
 23fc688:	699b      	ldr	r3, [r3, #24]
 23fc68a:	9302      	str	r3, [sp, #8]
 23fc68c:	bd09      	pop	{r0, r3, pc}
 23fc68e:	0000      	.short	0x0000
 23fc690:	1007ad08 	.word	0x1007ad08
 23fc694:	00000024 	.word	0x00000024

023fc698 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc698:	b509      	push	{r0, r3, lr}
 23fc69a:	4804      	ldr	r0, [pc, #16]	; (23fc6ac <hal_usart_flush+0x14>)
 23fc69c:	6800      	ldr	r0, [r0, #0]
 23fc69e:	4b04      	ldr	r3, [pc, #16]	; (23fc6b0 <hal_usart_flush+0x18>)
 23fc6a0:	4403      	add	r3, r0
 23fc6a2:	681b      	ldr	r3, [r3, #0]
 23fc6a4:	69db      	ldr	r3, [r3, #28]
 23fc6a6:	9302      	str	r3, [sp, #8]
 23fc6a8:	bd09      	pop	{r0, r3, pc}
 23fc6aa:	0000      	.short	0x0000
 23fc6ac:	1007ad08 	.word	0x1007ad08
 23fc6b0:	00000024 	.word	0x00000024

023fc6b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc6b4:	b509      	push	{r0, r3, lr}
 23fc6b6:	4804      	ldr	r0, [pc, #16]	; (23fc6c8 <hal_usart_is_enabled+0x14>)
 23fc6b8:	6800      	ldr	r0, [r0, #0]
 23fc6ba:	4b04      	ldr	r3, [pc, #16]	; (23fc6cc <hal_usart_is_enabled+0x18>)
 23fc6bc:	4403      	add	r3, r0
 23fc6be:	681b      	ldr	r3, [r3, #0]
 23fc6c0:	6a1b      	ldr	r3, [r3, #32]
 23fc6c2:	9302      	str	r3, [sp, #8]
 23fc6c4:	bd09      	pop	{r0, r3, pc}
 23fc6c6:	0000      	.short	0x0000
 23fc6c8:	1007ad08 	.word	0x1007ad08
 23fc6cc:	00000024 	.word	0x00000024

023fc6d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc6d0:	b509      	push	{r0, r3, lr}
 23fc6d2:	4804      	ldr	r0, [pc, #16]	; (23fc6e4 <hal_usart_available_data_for_write+0x14>)
 23fc6d4:	6800      	ldr	r0, [r0, #0]
 23fc6d6:	4b04      	ldr	r3, [pc, #16]	; (23fc6e8 <hal_usart_available_data_for_write+0x18>)
 23fc6d8:	4403      	add	r3, r0
 23fc6da:	681b      	ldr	r3, [r3, #0]
 23fc6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc6de:	9302      	str	r3, [sp, #8]
 23fc6e0:	bd09      	pop	{r0, r3, pc}
 23fc6e2:	0000      	.short	0x0000
 23fc6e4:	1007ad08 	.word	0x1007ad08
 23fc6e8:	00000024 	.word	0x00000024

023fc6ec <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc6ec:	b509      	push	{r0, r3, lr}
 23fc6ee:	4804      	ldr	r0, [pc, #16]	; (23fc700 <hal_usart_begin_config+0x14>)
 23fc6f0:	6800      	ldr	r0, [r0, #0]
 23fc6f2:	4b04      	ldr	r3, [pc, #16]	; (23fc704 <hal_usart_begin_config+0x18>)
 23fc6f4:	4403      	add	r3, r0
 23fc6f6:	681b      	ldr	r3, [r3, #0]
 23fc6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc6fa:	9302      	str	r3, [sp, #8]
 23fc6fc:	bd09      	pop	{r0, r3, pc}
 23fc6fe:	0000      	.short	0x0000
 23fc700:	1007ad08 	.word	0x1007ad08
 23fc704:	00000024 	.word	0x00000024

023fc708 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc708:	b509      	push	{r0, r3, lr}
 23fc70a:	4804      	ldr	r0, [pc, #16]	; (23fc71c <hal_usart_init_ex+0x14>)
 23fc70c:	6800      	ldr	r0, [r0, #0]
 23fc70e:	4b04      	ldr	r3, [pc, #16]	; (23fc720 <hal_usart_init_ex+0x18>)
 23fc710:	4403      	add	r3, r0
 23fc712:	681b      	ldr	r3, [r3, #0]
 23fc714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc716:	9302      	str	r3, [sp, #8]
 23fc718:	bd09      	pop	{r0, r3, pc}
 23fc71a:	0000      	.short	0x0000
 23fc71c:	1007ad08 	.word	0x1007ad08
 23fc720:	00000024 	.word	0x00000024

023fc724 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc724:	b509      	push	{r0, r3, lr}
 23fc726:	4804      	ldr	r0, [pc, #16]	; (23fc738 <HAL_USB_USART_Init+0x14>)
 23fc728:	6800      	ldr	r0, [r0, #0]
 23fc72a:	4b04      	ldr	r3, [pc, #16]	; (23fc73c <HAL_USB_USART_Init+0x18>)
 23fc72c:	4403      	add	r3, r0
 23fc72e:	681b      	ldr	r3, [r3, #0]
 23fc730:	681b      	ldr	r3, [r3, #0]
 23fc732:	9302      	str	r3, [sp, #8]
 23fc734:	bd09      	pop	{r0, r3, pc}
 23fc736:	0000      	.short	0x0000
 23fc738:	1007ad08 	.word	0x1007ad08
 23fc73c:	00000034 	.word	0x00000034

023fc740 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc740:	b509      	push	{r0, r3, lr}
 23fc742:	4804      	ldr	r0, [pc, #16]	; (23fc754 <HAL_USB_USART_Begin+0x14>)
 23fc744:	6800      	ldr	r0, [r0, #0]
 23fc746:	4b04      	ldr	r3, [pc, #16]	; (23fc758 <HAL_USB_USART_Begin+0x18>)
 23fc748:	4403      	add	r3, r0
 23fc74a:	681b      	ldr	r3, [r3, #0]
 23fc74c:	685b      	ldr	r3, [r3, #4]
 23fc74e:	9302      	str	r3, [sp, #8]
 23fc750:	bd09      	pop	{r0, r3, pc}
 23fc752:	0000      	.short	0x0000
 23fc754:	1007ad08 	.word	0x1007ad08
 23fc758:	00000034 	.word	0x00000034

023fc75c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc75c:	b509      	push	{r0, r3, lr}
 23fc75e:	4804      	ldr	r0, [pc, #16]	; (23fc770 <HAL_USB_USART_End+0x14>)
 23fc760:	6800      	ldr	r0, [r0, #0]
 23fc762:	4b04      	ldr	r3, [pc, #16]	; (23fc774 <HAL_USB_USART_End+0x18>)
 23fc764:	4403      	add	r3, r0
 23fc766:	681b      	ldr	r3, [r3, #0]
 23fc768:	689b      	ldr	r3, [r3, #8]
 23fc76a:	9302      	str	r3, [sp, #8]
 23fc76c:	bd09      	pop	{r0, r3, pc}
 23fc76e:	0000      	.short	0x0000
 23fc770:	1007ad08 	.word	0x1007ad08
 23fc774:	00000034 	.word	0x00000034

023fc778 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc778:	b509      	push	{r0, r3, lr}
 23fc77a:	4804      	ldr	r0, [pc, #16]	; (23fc78c <HAL_USB_USART_Available_Data+0x14>)
 23fc77c:	6800      	ldr	r0, [r0, #0]
 23fc77e:	4b04      	ldr	r3, [pc, #16]	; (23fc790 <HAL_USB_USART_Available_Data+0x18>)
 23fc780:	4403      	add	r3, r0
 23fc782:	681b      	ldr	r3, [r3, #0]
 23fc784:	691b      	ldr	r3, [r3, #16]
 23fc786:	9302      	str	r3, [sp, #8]
 23fc788:	bd09      	pop	{r0, r3, pc}
 23fc78a:	0000      	.short	0x0000
 23fc78c:	1007ad08 	.word	0x1007ad08
 23fc790:	00000034 	.word	0x00000034

023fc794 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc794:	b509      	push	{r0, r3, lr}
 23fc796:	4804      	ldr	r0, [pc, #16]	; (23fc7a8 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc798:	6800      	ldr	r0, [r0, #0]
 23fc79a:	4b04      	ldr	r3, [pc, #16]	; (23fc7ac <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc79c:	4403      	add	r3, r0
 23fc79e:	681b      	ldr	r3, [r3, #0]
 23fc7a0:	695b      	ldr	r3, [r3, #20]
 23fc7a2:	9302      	str	r3, [sp, #8]
 23fc7a4:	bd09      	pop	{r0, r3, pc}
 23fc7a6:	0000      	.short	0x0000
 23fc7a8:	1007ad08 	.word	0x1007ad08
 23fc7ac:	00000034 	.word	0x00000034

023fc7b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc7b0:	b509      	push	{r0, r3, lr}
 23fc7b2:	4804      	ldr	r0, [pc, #16]	; (23fc7c4 <HAL_USB_USART_Receive_Data+0x14>)
 23fc7b4:	6800      	ldr	r0, [r0, #0]
 23fc7b6:	4b04      	ldr	r3, [pc, #16]	; (23fc7c8 <HAL_USB_USART_Receive_Data+0x18>)
 23fc7b8:	4403      	add	r3, r0
 23fc7ba:	681b      	ldr	r3, [r3, #0]
 23fc7bc:	699b      	ldr	r3, [r3, #24]
 23fc7be:	9302      	str	r3, [sp, #8]
 23fc7c0:	bd09      	pop	{r0, r3, pc}
 23fc7c2:	0000      	.short	0x0000
 23fc7c4:	1007ad08 	.word	0x1007ad08
 23fc7c8:	00000034 	.word	0x00000034

023fc7cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc7cc:	b509      	push	{r0, r3, lr}
 23fc7ce:	4804      	ldr	r0, [pc, #16]	; (23fc7e0 <HAL_USB_USART_Send_Data+0x14>)
 23fc7d0:	6800      	ldr	r0, [r0, #0]
 23fc7d2:	4b04      	ldr	r3, [pc, #16]	; (23fc7e4 <HAL_USB_USART_Send_Data+0x18>)
 23fc7d4:	4403      	add	r3, r0
 23fc7d6:	681b      	ldr	r3, [r3, #0]
 23fc7d8:	69db      	ldr	r3, [r3, #28]
 23fc7da:	9302      	str	r3, [sp, #8]
 23fc7dc:	bd09      	pop	{r0, r3, pc}
 23fc7de:	0000      	.short	0x0000
 23fc7e0:	1007ad08 	.word	0x1007ad08
 23fc7e4:	00000034 	.word	0x00000034

023fc7e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc7e8:	b509      	push	{r0, r3, lr}
 23fc7ea:	4804      	ldr	r0, [pc, #16]	; (23fc7fc <HAL_USB_USART_Flush_Data+0x14>)
 23fc7ec:	6800      	ldr	r0, [r0, #0]
 23fc7ee:	4b04      	ldr	r3, [pc, #16]	; (23fc800 <HAL_USB_USART_Flush_Data+0x18>)
 23fc7f0:	4403      	add	r3, r0
 23fc7f2:	681b      	ldr	r3, [r3, #0]
 23fc7f4:	6a1b      	ldr	r3, [r3, #32]
 23fc7f6:	9302      	str	r3, [sp, #8]
 23fc7f8:	bd09      	pop	{r0, r3, pc}
 23fc7fa:	0000      	.short	0x0000
 23fc7fc:	1007ad08 	.word	0x1007ad08
 23fc800:	00000034 	.word	0x00000034

023fc804 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc804:	b509      	push	{r0, r3, lr}
 23fc806:	4804      	ldr	r0, [pc, #16]	; (23fc818 <panic_+0x14>)
 23fc808:	6800      	ldr	r0, [r0, #0]
 23fc80a:	4b04      	ldr	r3, [pc, #16]	; (23fc81c <panic_+0x18>)
 23fc80c:	4403      	add	r3, r0
 23fc80e:	681b      	ldr	r3, [r3, #0]
 23fc810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc812:	9302      	str	r3, [sp, #8]
 23fc814:	bd09      	pop	{r0, r3, pc}
 23fc816:	0000      	.short	0x0000
 23fc818:	1007ad08 	.word	0x1007ad08
 23fc81c:	00000048 	.word	0x00000048

023fc820 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fc820:	b509      	push	{r0, r3, lr}
 23fc822:	4804      	ldr	r0, [pc, #16]	; (23fc834 <log_message_v+0x14>)
 23fc824:	6800      	ldr	r0, [r0, #0]
 23fc826:	4b04      	ldr	r3, [pc, #16]	; (23fc838 <log_message_v+0x18>)
 23fc828:	4403      	add	r3, r0
 23fc82a:	681b      	ldr	r3, [r3, #0]
 23fc82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc82e:	9302      	str	r3, [sp, #8]
 23fc830:	bd09      	pop	{r0, r3, pc}
 23fc832:	0000      	.short	0x0000
 23fc834:	1007ad08 	.word	0x1007ad08
 23fc838:	00000048 	.word	0x00000048

023fc83c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc83c:	b509      	push	{r0, r3, lr}
 23fc83e:	4804      	ldr	r0, [pc, #16]	; (23fc850 <log_level_name+0x14>)
 23fc840:	6800      	ldr	r0, [r0, #0]
 23fc842:	4b04      	ldr	r3, [pc, #16]	; (23fc854 <log_level_name+0x18>)
 23fc844:	4403      	add	r3, r0
 23fc846:	681b      	ldr	r3, [r3, #0]
 23fc848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc84a:	9302      	str	r3, [sp, #8]
 23fc84c:	bd09      	pop	{r0, r3, pc}
 23fc84e:	0000      	.short	0x0000
 23fc850:	1007ad08 	.word	0x1007ad08
 23fc854:	00000048 	.word	0x00000048

023fc858 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc858:	b509      	push	{r0, r3, lr}
 23fc85a:	4804      	ldr	r0, [pc, #16]	; (23fc86c <log_set_callbacks+0x14>)
 23fc85c:	6800      	ldr	r0, [r0, #0]
 23fc85e:	4b04      	ldr	r3, [pc, #16]	; (23fc870 <log_set_callbacks+0x18>)
 23fc860:	4403      	add	r3, r0
 23fc862:	681b      	ldr	r3, [r3, #0]
 23fc864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc866:	9302      	str	r3, [sp, #8]
 23fc868:	bd09      	pop	{r0, r3, pc}
 23fc86a:	0000      	.short	0x0000
 23fc86c:	1007ad08 	.word	0x1007ad08
 23fc870:	00000048 	.word	0x00000048

023fc874 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23fc874:	b509      	push	{r0, r3, lr}
 23fc876:	4804      	ldr	r0, [pc, #16]	; (23fc888 <system_mode+0x14>)
 23fc878:	6800      	ldr	r0, [r0, #0]
 23fc87a:	4b04      	ldr	r3, [pc, #16]	; (23fc88c <system_mode+0x18>)
 23fc87c:	4403      	add	r3, r0
 23fc87e:	681b      	ldr	r3, [r3, #0]
 23fc880:	681b      	ldr	r3, [r3, #0]
 23fc882:	9302      	str	r3, [sp, #8]
 23fc884:	bd09      	pop	{r0, r3, pc}
 23fc886:	0000      	.short	0x0000
 23fc888:	1007ad08 	.word	0x1007ad08
 23fc88c:	00000008 	.word	0x00000008

023fc890 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc890:	b509      	push	{r0, r3, lr}
 23fc892:	4804      	ldr	r0, [pc, #16]	; (23fc8a4 <set_system_mode+0x14>)
 23fc894:	6800      	ldr	r0, [r0, #0]
 23fc896:	4b04      	ldr	r3, [pc, #16]	; (23fc8a8 <set_system_mode+0x18>)
 23fc898:	4403      	add	r3, r0
 23fc89a:	681b      	ldr	r3, [r3, #0]
 23fc89c:	685b      	ldr	r3, [r3, #4]
 23fc89e:	9302      	str	r3, [sp, #8]
 23fc8a0:	bd09      	pop	{r0, r3, pc}
 23fc8a2:	0000      	.short	0x0000
 23fc8a4:	1007ad08 	.word	0x1007ad08
 23fc8a8:	00000008 	.word	0x00000008

023fc8ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc8ac:	b509      	push	{r0, r3, lr}
 23fc8ae:	4804      	ldr	r0, [pc, #16]	; (23fc8c0 <system_delay_ms+0x14>)
 23fc8b0:	6800      	ldr	r0, [r0, #0]
 23fc8b2:	4b04      	ldr	r3, [pc, #16]	; (23fc8c4 <system_delay_ms+0x18>)
 23fc8b4:	4403      	add	r3, r0
 23fc8b6:	681b      	ldr	r3, [r3, #0]
 23fc8b8:	695b      	ldr	r3, [r3, #20]
 23fc8ba:	9302      	str	r3, [sp, #8]
 23fc8bc:	bd09      	pop	{r0, r3, pc}
 23fc8be:	0000      	.short	0x0000
 23fc8c0:	1007ad08 	.word	0x1007ad08
 23fc8c4:	00000008 	.word	0x00000008

023fc8c8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fc8c8:	b509      	push	{r0, r3, lr}
 23fc8ca:	4804      	ldr	r0, [pc, #16]	; (23fc8dc <system_thread_set_state+0x14>)
 23fc8cc:	6800      	ldr	r0, [r0, #0]
 23fc8ce:	4b04      	ldr	r3, [pc, #16]	; (23fc8e0 <system_thread_set_state+0x18>)
 23fc8d0:	4403      	add	r3, r0
 23fc8d2:	681b      	ldr	r3, [r3, #0]
 23fc8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc8d6:	9302      	str	r3, [sp, #8]
 23fc8d8:	bd09      	pop	{r0, r3, pc}
 23fc8da:	0000      	.short	0x0000
 23fc8dc:	1007ad08 	.word	0x1007ad08
 23fc8e0:	00000008 	.word	0x00000008

023fc8e4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fc8e4:	b509      	push	{r0, r3, lr}
 23fc8e6:	4804      	ldr	r0, [pc, #16]	; (23fc8f8 <application_thread_current+0x14>)
 23fc8e8:	6800      	ldr	r0, [r0, #0]
 23fc8ea:	4b04      	ldr	r3, [pc, #16]	; (23fc8fc <application_thread_current+0x18>)
 23fc8ec:	4403      	add	r3, r0
 23fc8ee:	681b      	ldr	r3, [r3, #0]
 23fc8f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc8f2:	9302      	str	r3, [sp, #8]
 23fc8f4:	bd09      	pop	{r0, r3, pc}
 23fc8f6:	0000      	.short	0x0000
 23fc8f8:	1007ad08 	.word	0x1007ad08
 23fc8fc:	00000008 	.word	0x00000008

023fc900 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fc900:	b509      	push	{r0, r3, lr}
 23fc902:	4804      	ldr	r0, [pc, #16]	; (23fc914 <application_thread_invoke+0x14>)
 23fc904:	6800      	ldr	r0, [r0, #0]
 23fc906:	4b04      	ldr	r3, [pc, #16]	; (23fc918 <application_thread_invoke+0x18>)
 23fc908:	4403      	add	r3, r0
 23fc90a:	681b      	ldr	r3, [r3, #0]
 23fc90c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc90e:	9302      	str	r3, [sp, #8]
 23fc910:	bd09      	pop	{r0, r3, pc}
 23fc912:	0000      	.short	0x0000
 23fc914:	1007ad08 	.word	0x1007ad08
 23fc918:	00000008 	.word	0x00000008

023fc91c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23fc91c:	b509      	push	{r0, r3, lr}
 23fc91e:	4804      	ldr	r0, [pc, #16]	; (23fc930 <system_thread_get_state+0x14>)
 23fc920:	6800      	ldr	r0, [r0, #0]
 23fc922:	4b04      	ldr	r3, [pc, #16]	; (23fc934 <system_thread_get_state+0x18>)
 23fc924:	4403      	add	r3, r0
 23fc926:	681b      	ldr	r3, [r3, #0]
 23fc928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fc92a:	9302      	str	r3, [sp, #8]
 23fc92c:	bd09      	pop	{r0, r3, pc}
 23fc92e:	0000      	.short	0x0000
 23fc930:	1007ad08 	.word	0x1007ad08
 23fc934:	00000008 	.word	0x00000008

023fc938 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc938:	b509      	push	{r0, r3, lr}
 23fc93a:	4804      	ldr	r0, [pc, #16]	; (23fc94c <system_ctrl_set_app_request_handler+0x14>)
 23fc93c:	6800      	ldr	r0, [r0, #0]
 23fc93e:	4b04      	ldr	r3, [pc, #16]	; (23fc950 <system_ctrl_set_app_request_handler+0x18>)
 23fc940:	4403      	add	r3, r0
 23fc942:	681b      	ldr	r3, [r3, #0]
 23fc944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc948:	9302      	str	r3, [sp, #8]
 23fc94a:	bd09      	pop	{r0, r3, pc}
 23fc94c:	1007ad08 	.word	0x1007ad08
 23fc950:	00000008 	.word	0x00000008

023fc954 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc954:	b509      	push	{r0, r3, lr}
 23fc956:	4804      	ldr	r0, [pc, #16]	; (23fc968 <system_ctrl_set_result+0x14>)
 23fc958:	6800      	ldr	r0, [r0, #0]
 23fc95a:	4b04      	ldr	r3, [pc, #16]	; (23fc96c <system_ctrl_set_result+0x18>)
 23fc95c:	4403      	add	r3, r0
 23fc95e:	681b      	ldr	r3, [r3, #0]
 23fc960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc964:	9302      	str	r3, [sp, #8]
 23fc966:	bd09      	pop	{r0, r3, pc}
 23fc968:	1007ad08 	.word	0x1007ad08
 23fc96c:	00000008 	.word	0x00000008

023fc970 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23fc970:	b509      	push	{r0, r3, lr}
 23fc972:	4804      	ldr	r0, [pc, #16]	; (23fc984 <spark_function+0x14>)
 23fc974:	6800      	ldr	r0, [r0, #0]
 23fc976:	4b04      	ldr	r3, [pc, #16]	; (23fc988 <spark_function+0x18>)
 23fc978:	4403      	add	r3, r0
 23fc97a:	681b      	ldr	r3, [r3, #0]
 23fc97c:	685b      	ldr	r3, [r3, #4]
 23fc97e:	9302      	str	r3, [sp, #8]
 23fc980:	bd09      	pop	{r0, r3, pc}
 23fc982:	0000      	.short	0x0000
 23fc984:	1007ad08 	.word	0x1007ad08
 23fc988:	0000002c 	.word	0x0000002c

023fc98c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fc98c:	b509      	push	{r0, r3, lr}
 23fc98e:	4804      	ldr	r0, [pc, #16]	; (23fc9a0 <spark_process+0x14>)
 23fc990:	6800      	ldr	r0, [r0, #0]
 23fc992:	4b04      	ldr	r3, [pc, #16]	; (23fc9a4 <spark_process+0x18>)
 23fc994:	4403      	add	r3, r0
 23fc996:	681b      	ldr	r3, [r3, #0]
 23fc998:	689b      	ldr	r3, [r3, #8]
 23fc99a:	9302      	str	r3, [sp, #8]
 23fc99c:	bd09      	pop	{r0, r3, pc}
 23fc99e:	0000      	.short	0x0000
 23fc9a0:	1007ad08 	.word	0x1007ad08
 23fc9a4:	0000002c 	.word	0x0000002c

023fc9a8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fc9a8:	b509      	push	{r0, r3, lr}
 23fc9aa:	4804      	ldr	r0, [pc, #16]	; (23fc9bc <spark_cloud_flag_connect+0x14>)
 23fc9ac:	6800      	ldr	r0, [r0, #0]
 23fc9ae:	4b04      	ldr	r3, [pc, #16]	; (23fc9c0 <spark_cloud_flag_connect+0x18>)
 23fc9b0:	4403      	add	r3, r0
 23fc9b2:	681b      	ldr	r3, [r3, #0]
 23fc9b4:	68db      	ldr	r3, [r3, #12]
 23fc9b6:	9302      	str	r3, [sp, #8]
 23fc9b8:	bd09      	pop	{r0, r3, pc}
 23fc9ba:	0000      	.short	0x0000
 23fc9bc:	1007ad08 	.word	0x1007ad08
 23fc9c0:	0000002c 	.word	0x0000002c

023fc9c4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fc9c4:	b509      	push	{r0, r3, lr}
 23fc9c6:	4804      	ldr	r0, [pc, #16]	; (23fc9d8 <spark_cloud_flag_connected+0x14>)
 23fc9c8:	6800      	ldr	r0, [r0, #0]
 23fc9ca:	4b04      	ldr	r3, [pc, #16]	; (23fc9dc <spark_cloud_flag_connected+0x18>)
 23fc9cc:	4403      	add	r3, r0
 23fc9ce:	681b      	ldr	r3, [r3, #0]
 23fc9d0:	695b      	ldr	r3, [r3, #20]
 23fc9d2:	9302      	str	r3, [sp, #8]
 23fc9d4:	bd09      	pop	{r0, r3, pc}
 23fc9d6:	0000      	.short	0x0000
 23fc9d8:	1007ad08 	.word	0x1007ad08
 23fc9dc:	0000002c 	.word	0x0000002c

023fc9e0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fc9e0:	b509      	push	{r0, r3, lr}
 23fc9e2:	4804      	ldr	r0, [pc, #16]	; (23fc9f4 <spark_send_event+0x14>)
 23fc9e4:	6800      	ldr	r0, [r0, #0]
 23fc9e6:	4b04      	ldr	r3, [pc, #16]	; (23fc9f8 <spark_send_event+0x18>)
 23fc9e8:	4403      	add	r3, r0
 23fc9ea:	681b      	ldr	r3, [r3, #0]
 23fc9ec:	6a1b      	ldr	r3, [r3, #32]
 23fc9ee:	9302      	str	r3, [sp, #8]
 23fc9f0:	bd09      	pop	{r0, r3, pc}
 23fc9f2:	0000      	.short	0x0000
 23fc9f4:	1007ad08 	.word	0x1007ad08
 23fc9f8:	0000002c 	.word	0x0000002c

023fc9fc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23fc9fc:	b509      	push	{r0, r3, lr}
 23fc9fe:	4804      	ldr	r0, [pc, #16]	; (23fca10 <spark_sync_time_pending+0x14>)
 23fca00:	6800      	ldr	r0, [r0, #0]
 23fca02:	4b04      	ldr	r3, [pc, #16]	; (23fca14 <spark_sync_time_pending+0x18>)
 23fca04:	4403      	add	r3, r0
 23fca06:	681b      	ldr	r3, [r3, #0]
 23fca08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fca0a:	9302      	str	r3, [sp, #8]
 23fca0c:	bd09      	pop	{r0, r3, pc}
 23fca0e:	0000      	.short	0x0000
 23fca10:	1007ad08 	.word	0x1007ad08
 23fca14:	0000002c 	.word	0x0000002c

023fca18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fca18:	b509      	push	{r0, r3, lr}
 23fca1a:	4804      	ldr	r0, [pc, #16]	; (23fca2c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fca1c:	6800      	ldr	r0, [r0, #0]
 23fca1e:	4b04      	ldr	r3, [pc, #16]	; (23fca30 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fca20:	4403      	add	r3, r0
 23fca22:	681b      	ldr	r3, [r3, #0]
 23fca24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fca26:	9302      	str	r3, [sp, #8]
 23fca28:	bd09      	pop	{r0, r3, pc}
 23fca2a:	0000      	.short	0x0000
 23fca2c:	1007ad08 	.word	0x1007ad08
 23fca30:	0000002c 	.word	0x0000002c

023fca34 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fca34:	b509      	push	{r0, r3, lr}
 23fca36:	4804      	ldr	r0, [pc, #16]	; (23fca48 <network_connect+0x14>)
 23fca38:	6800      	ldr	r0, [r0, #0]
 23fca3a:	4b04      	ldr	r3, [pc, #16]	; (23fca4c <network_connect+0x18>)
 23fca3c:	4403      	add	r3, r0
 23fca3e:	681b      	ldr	r3, [r3, #0]
 23fca40:	685b      	ldr	r3, [r3, #4]
 23fca42:	9302      	str	r3, [sp, #8]
 23fca44:	bd09      	pop	{r0, r3, pc}
 23fca46:	0000      	.short	0x0000
 23fca48:	1007ad08 	.word	0x1007ad08
 23fca4c:	00000028 	.word	0x00000028

023fca50 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fca50:	b509      	push	{r0, r3, lr}
 23fca52:	4804      	ldr	r0, [pc, #16]	; (23fca64 <network_connecting+0x14>)
 23fca54:	6800      	ldr	r0, [r0, #0]
 23fca56:	4b04      	ldr	r3, [pc, #16]	; (23fca68 <network_connecting+0x18>)
 23fca58:	4403      	add	r3, r0
 23fca5a:	681b      	ldr	r3, [r3, #0]
 23fca5c:	689b      	ldr	r3, [r3, #8]
 23fca5e:	9302      	str	r3, [sp, #8]
 23fca60:	bd09      	pop	{r0, r3, pc}
 23fca62:	0000      	.short	0x0000
 23fca64:	1007ad08 	.word	0x1007ad08
 23fca68:	00000028 	.word	0x00000028

023fca6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fca6c:	b509      	push	{r0, r3, lr}
 23fca6e:	4804      	ldr	r0, [pc, #16]	; (23fca80 <network_disconnect+0x14>)
 23fca70:	6800      	ldr	r0, [r0, #0]
 23fca72:	4b04      	ldr	r3, [pc, #16]	; (23fca84 <network_disconnect+0x18>)
 23fca74:	4403      	add	r3, r0
 23fca76:	681b      	ldr	r3, [r3, #0]
 23fca78:	68db      	ldr	r3, [r3, #12]
 23fca7a:	9302      	str	r3, [sp, #8]
 23fca7c:	bd09      	pop	{r0, r3, pc}
 23fca7e:	0000      	.short	0x0000
 23fca80:	1007ad08 	.word	0x1007ad08
 23fca84:	00000028 	.word	0x00000028

023fca88 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fca88:	b509      	push	{r0, r3, lr}
 23fca8a:	4804      	ldr	r0, [pc, #16]	; (23fca9c <network_ready+0x14>)
 23fca8c:	6800      	ldr	r0, [r0, #0]
 23fca8e:	4b04      	ldr	r3, [pc, #16]	; (23fcaa0 <network_ready+0x18>)
 23fca90:	4403      	add	r3, r0
 23fca92:	681b      	ldr	r3, [r3, #0]
 23fca94:	691b      	ldr	r3, [r3, #16]
 23fca96:	9302      	str	r3, [sp, #8]
 23fca98:	bd09      	pop	{r0, r3, pc}
 23fca9a:	0000      	.short	0x0000
 23fca9c:	1007ad08 	.word	0x1007ad08
 23fcaa0:	00000028 	.word	0x00000028

023fcaa4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcaa4:	b509      	push	{r0, r3, lr}
 23fcaa6:	4804      	ldr	r0, [pc, #16]	; (23fcab8 <network_on+0x14>)
 23fcaa8:	6800      	ldr	r0, [r0, #0]
 23fcaaa:	4b04      	ldr	r3, [pc, #16]	; (23fcabc <network_on+0x18>)
 23fcaac:	4403      	add	r3, r0
 23fcaae:	681b      	ldr	r3, [r3, #0]
 23fcab0:	695b      	ldr	r3, [r3, #20]
 23fcab2:	9302      	str	r3, [sp, #8]
 23fcab4:	bd09      	pop	{r0, r3, pc}
 23fcab6:	0000      	.short	0x0000
 23fcab8:	1007ad08 	.word	0x1007ad08
 23fcabc:	00000028 	.word	0x00000028

023fcac0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fcac0:	b509      	push	{r0, r3, lr}
 23fcac2:	4804      	ldr	r0, [pc, #16]	; (23fcad4 <network_off+0x14>)
 23fcac4:	6800      	ldr	r0, [r0, #0]
 23fcac6:	4b04      	ldr	r3, [pc, #16]	; (23fcad8 <network_off+0x18>)
 23fcac8:	4403      	add	r3, r0
 23fcaca:	681b      	ldr	r3, [r3, #0]
 23fcacc:	699b      	ldr	r3, [r3, #24]
 23fcace:	9302      	str	r3, [sp, #8]
 23fcad0:	bd09      	pop	{r0, r3, pc}
 23fcad2:	0000      	.short	0x0000
 23fcad4:	1007ad08 	.word	0x1007ad08
 23fcad8:	00000028 	.word	0x00000028

023fcadc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fcadc:	b509      	push	{r0, r3, lr}
 23fcade:	4804      	ldr	r0, [pc, #16]	; (23fcaf0 <network_listen+0x14>)
 23fcae0:	6800      	ldr	r0, [r0, #0]
 23fcae2:	4b04      	ldr	r3, [pc, #16]	; (23fcaf4 <network_listen+0x18>)
 23fcae4:	4403      	add	r3, r0
 23fcae6:	681b      	ldr	r3, [r3, #0]
 23fcae8:	69db      	ldr	r3, [r3, #28]
 23fcaea:	9302      	str	r3, [sp, #8]
 23fcaec:	bd09      	pop	{r0, r3, pc}
 23fcaee:	0000      	.short	0x0000
 23fcaf0:	1007ad08 	.word	0x1007ad08
 23fcaf4:	00000028 	.word	0x00000028

023fcaf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fcaf8:	b509      	push	{r0, r3, lr}
 23fcafa:	4804      	ldr	r0, [pc, #16]	; (23fcb0c <network_listening+0x14>)
 23fcafc:	6800      	ldr	r0, [r0, #0]
 23fcafe:	4b04      	ldr	r3, [pc, #16]	; (23fcb10 <network_listening+0x18>)
 23fcb00:	4403      	add	r3, r0
 23fcb02:	681b      	ldr	r3, [r3, #0]
 23fcb04:	6a1b      	ldr	r3, [r3, #32]
 23fcb06:	9302      	str	r3, [sp, #8]
 23fcb08:	bd09      	pop	{r0, r3, pc}
 23fcb0a:	0000      	.short	0x0000
 23fcb0c:	1007ad08 	.word	0x1007ad08
 23fcb10:	00000028 	.word	0x00000028

023fcb14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fcb14:	b509      	push	{r0, r3, lr}
 23fcb16:	4804      	ldr	r0, [pc, #16]	; (23fcb28 <network_set_listen_timeout+0x14>)
 23fcb18:	6800      	ldr	r0, [r0, #0]
 23fcb1a:	4b04      	ldr	r3, [pc, #16]	; (23fcb2c <network_set_listen_timeout+0x18>)
 23fcb1c:	4403      	add	r3, r0
 23fcb1e:	681b      	ldr	r3, [r3, #0]
 23fcb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcb22:	9302      	str	r3, [sp, #8]
 23fcb24:	bd09      	pop	{r0, r3, pc}
 23fcb26:	0000      	.short	0x0000
 23fcb28:	1007ad08 	.word	0x1007ad08
 23fcb2c:	00000028 	.word	0x00000028

023fcb30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fcb30:	b509      	push	{r0, r3, lr}
 23fcb32:	4804      	ldr	r0, [pc, #16]	; (23fcb44 <network_get_listen_timeout+0x14>)
 23fcb34:	6800      	ldr	r0, [r0, #0]
 23fcb36:	4b04      	ldr	r3, [pc, #16]	; (23fcb48 <network_get_listen_timeout+0x18>)
 23fcb38:	4403      	add	r3, r0
 23fcb3a:	681b      	ldr	r3, [r3, #0]
 23fcb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcb3e:	9302      	str	r3, [sp, #8]
 23fcb40:	bd09      	pop	{r0, r3, pc}
 23fcb42:	0000      	.short	0x0000
 23fcb44:	1007ad08 	.word	0x1007ad08
 23fcb48:	00000028 	.word	0x00000028

023fcb4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fcb4c:	b509      	push	{r0, r3, lr}
 23fcb4e:	4804      	ldr	r0, [pc, #16]	; (23fcb60 <network_is_on+0x14>)
 23fcb50:	6800      	ldr	r0, [r0, #0]
 23fcb52:	4b04      	ldr	r3, [pc, #16]	; (23fcb64 <network_is_on+0x18>)
 23fcb54:	4403      	add	r3, r0
 23fcb56:	681b      	ldr	r3, [r3, #0]
 23fcb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcb5a:	9302      	str	r3, [sp, #8]
 23fcb5c:	bd09      	pop	{r0, r3, pc}
 23fcb5e:	0000      	.short	0x0000
 23fcb60:	1007ad08 	.word	0x1007ad08
 23fcb64:	00000028 	.word	0x00000028

023fcb68 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fcb68:	b509      	push	{r0, r3, lr}
 23fcb6a:	4804      	ldr	r0, [pc, #16]	; (23fcb7c <network_is_off+0x14>)
 23fcb6c:	6800      	ldr	r0, [r0, #0]
 23fcb6e:	4b04      	ldr	r3, [pc, #16]	; (23fcb80 <network_is_off+0x18>)
 23fcb70:	4403      	add	r3, r0
 23fcb72:	681b      	ldr	r3, [r3, #0]
 23fcb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcb76:	9302      	str	r3, [sp, #8]
 23fcb78:	bd09      	pop	{r0, r3, pc}
 23fcb7a:	0000      	.short	0x0000
 23fcb7c:	1007ad08 	.word	0x1007ad08
 23fcb80:	00000028 	.word	0x00000028

023fcb84 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fcb84:	b509      	push	{r0, r3, lr}
 23fcb86:	4804      	ldr	r0, [pc, #16]	; (23fcb98 <malloc+0x14>)
 23fcb88:	6800      	ldr	r0, [r0, #0]
 23fcb8a:	4b04      	ldr	r3, [pc, #16]	; (23fcb9c <malloc+0x18>)
 23fcb8c:	4403      	add	r3, r0
 23fcb8e:	681b      	ldr	r3, [r3, #0]
 23fcb90:	681b      	ldr	r3, [r3, #0]
 23fcb92:	9302      	str	r3, [sp, #8]
 23fcb94:	bd09      	pop	{r0, r3, pc}
 23fcb96:	0000      	.short	0x0000
 23fcb98:	1007ad08 	.word	0x1007ad08
 23fcb9c:	00000004 	.word	0x00000004

023fcba0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fcba0:	b509      	push	{r0, r3, lr}
 23fcba2:	4804      	ldr	r0, [pc, #16]	; (23fcbb4 <free+0x14>)
 23fcba4:	6800      	ldr	r0, [r0, #0]
 23fcba6:	4b04      	ldr	r3, [pc, #16]	; (23fcbb8 <free+0x18>)
 23fcba8:	4403      	add	r3, r0
 23fcbaa:	681b      	ldr	r3, [r3, #0]
 23fcbac:	685b      	ldr	r3, [r3, #4]
 23fcbae:	9302      	str	r3, [sp, #8]
 23fcbb0:	bd09      	pop	{r0, r3, pc}
 23fcbb2:	0000      	.short	0x0000
 23fcbb4:	1007ad08 	.word	0x1007ad08
 23fcbb8:	00000004 	.word	0x00000004

023fcbbc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fcbbc:	b509      	push	{r0, r3, lr}
 23fcbbe:	4804      	ldr	r0, [pc, #16]	; (23fcbd0 <realloc+0x14>)
 23fcbc0:	6800      	ldr	r0, [r0, #0]
 23fcbc2:	4b04      	ldr	r3, [pc, #16]	; (23fcbd4 <realloc+0x18>)
 23fcbc4:	4403      	add	r3, r0
 23fcbc6:	681b      	ldr	r3, [r3, #0]
 23fcbc8:	689b      	ldr	r3, [r3, #8]
 23fcbca:	9302      	str	r3, [sp, #8]
 23fcbcc:	bd09      	pop	{r0, r3, pc}
 23fcbce:	0000      	.short	0x0000
 23fcbd0:	1007ad08 	.word	0x1007ad08
 23fcbd4:	00000004 	.word	0x00000004

023fcbd8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23fcbd8:	b509      	push	{r0, r3, lr}
 23fcbda:	4804      	ldr	r0, [pc, #16]	; (23fcbec <siprintf+0x14>)
 23fcbdc:	6800      	ldr	r0, [r0, #0]
 23fcbde:	4b04      	ldr	r3, [pc, #16]	; (23fcbf0 <siprintf+0x18>)
 23fcbe0:	4403      	add	r3, r0
 23fcbe2:	681b      	ldr	r3, [r3, #0]
 23fcbe4:	691b      	ldr	r3, [r3, #16]
 23fcbe6:	9302      	str	r3, [sp, #8]
 23fcbe8:	bd09      	pop	{r0, r3, pc}
 23fcbea:	0000      	.short	0x0000
 23fcbec:	1007ad08 	.word	0x1007ad08
 23fcbf0:	00000004 	.word	0x00000004

023fcbf4 <vsnprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fcbf4:	b509      	push	{r0, r3, lr}
 23fcbf6:	4804      	ldr	r0, [pc, #16]	; (23fcc08 <vsnprintf+0x14>)
 23fcbf8:	6800      	ldr	r0, [r0, #0]
 23fcbfa:	4b04      	ldr	r3, [pc, #16]	; (23fcc0c <vsnprintf+0x18>)
 23fcbfc:	4403      	add	r3, r0
 23fcbfe:	681b      	ldr	r3, [r3, #0]
 23fcc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcc02:	9302      	str	r3, [sp, #8]
 23fcc04:	bd09      	pop	{r0, r3, pc}
 23fcc06:	0000      	.short	0x0000
 23fcc08:	1007ad08 	.word	0x1007ad08
 23fcc0c:	00000004 	.word	0x00000004

023fcc10 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fcc10:	b509      	push	{r0, r3, lr}
 23fcc12:	4804      	ldr	r0, [pc, #16]	; (23fcc24 <abort+0x14>)
 23fcc14:	6800      	ldr	r0, [r0, #0]
 23fcc16:	4b04      	ldr	r3, [pc, #16]	; (23fcc28 <abort+0x18>)
 23fcc18:	4403      	add	r3, r0
 23fcc1a:	681b      	ldr	r3, [r3, #0]
 23fcc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcc1e:	9302      	str	r3, [sp, #8]
 23fcc20:	bd09      	pop	{r0, r3, pc}
 23fcc22:	0000      	.short	0x0000
 23fcc24:	1007ad08 	.word	0x1007ad08
 23fcc28:	00000004 	.word	0x00000004

023fcc2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fcc2c:	b509      	push	{r0, r3, lr}
 23fcc2e:	4804      	ldr	r0, [pc, #16]	; (23fcc40 <_malloc_r+0x14>)
 23fcc30:	6800      	ldr	r0, [r0, #0]
 23fcc32:	4b04      	ldr	r3, [pc, #16]	; (23fcc44 <_malloc_r+0x18>)
 23fcc34:	4403      	add	r3, r0
 23fcc36:	681b      	ldr	r3, [r3, #0]
 23fcc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcc3a:	9302      	str	r3, [sp, #8]
 23fcc3c:	bd09      	pop	{r0, r3, pc}
 23fcc3e:	0000      	.short	0x0000
 23fcc40:	1007ad08 	.word	0x1007ad08
 23fcc44:	00000004 	.word	0x00000004

023fcc48 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fcc48:	b509      	push	{r0, r3, lr}
 23fcc4a:	4804      	ldr	r0, [pc, #16]	; (23fcc5c <__errno+0x14>)
 23fcc4c:	6800      	ldr	r0, [r0, #0]
 23fcc4e:	4b04      	ldr	r3, [pc, #16]	; (23fcc60 <__errno+0x18>)
 23fcc50:	4403      	add	r3, r0
 23fcc52:	681b      	ldr	r3, [r3, #0]
 23fcc54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcc56:	9302      	str	r3, [sp, #8]
 23fcc58:	bd09      	pop	{r0, r3, pc}
 23fcc5a:	0000      	.short	0x0000
 23fcc5c:	1007ad08 	.word	0x1007ad08
 23fcc60:	00000004 	.word	0x00000004

023fcc64 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fcc64:	b509      	push	{r0, r3, lr}
 23fcc66:	4804      	ldr	r0, [pc, #16]	; (23fcc78 <__assert_func+0x14>)
 23fcc68:	6800      	ldr	r0, [r0, #0]
 23fcc6a:	4b04      	ldr	r3, [pc, #16]	; (23fcc7c <__assert_func+0x18>)
 23fcc6c:	4403      	add	r3, r0
 23fcc6e:	681b      	ldr	r3, [r3, #0]
 23fcc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcc72:	9302      	str	r3, [sp, #8]
 23fcc74:	bd09      	pop	{r0, r3, pc}
 23fcc76:	0000      	.short	0x0000
 23fcc78:	1007ad08 	.word	0x1007ad08
 23fcc7c:	00000004 	.word	0x00000004

023fcc80 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fcc80:	b509      	push	{r0, r3, lr}
 23fcc82:	4804      	ldr	r0, [pc, #16]	; (23fcc94 <newlib_impure_ptr_callback+0x14>)
 23fcc84:	6800      	ldr	r0, [r0, #0]
 23fcc86:	4b04      	ldr	r3, [pc, #16]	; (23fcc98 <newlib_impure_ptr_callback+0x18>)
 23fcc88:	4403      	add	r3, r0
 23fcc8a:	681b      	ldr	r3, [r3, #0]
 23fcc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcc8e:	9302      	str	r3, [sp, #8]
 23fcc90:	bd09      	pop	{r0, r3, pc}
 23fcc92:	0000      	.short	0x0000
 23fcc94:	1007ad08 	.word	0x1007ad08
 23fcc98:	00000004 	.word	0x00000004

023fcc9c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23fcc9c:	b509      	push	{r0, r3, lr}
 23fcc9e:	4804      	ldr	r0, [pc, #16]	; (23fccb0 <localtime_r+0x14>)
 23fcca0:	6800      	ldr	r0, [r0, #0]
 23fcca2:	4b04      	ldr	r3, [pc, #16]	; (23fccb4 <localtime_r+0x18>)
 23fcca4:	4403      	add	r3, r0
 23fcca6:	681b      	ldr	r3, [r3, #0]
 23fcca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fccaa:	9302      	str	r3, [sp, #8]
 23fccac:	bd09      	pop	{r0, r3, pc}
 23fccae:	0000      	.short	0x0000
 23fccb0:	1007ad08 	.word	0x1007ad08
 23fccb4:	00000004 	.word	0x00000004

023fccb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fccb8:	2100      	movs	r1, #0
 23fccba:	f7ff bdf7 	b.w	23fc8ac <system_delay_ms>

023fccbe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fccbe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fccc0:	6883      	ldr	r3, [r0, #8]
 23fccc2:	4604      	mov	r4, r0
 23fccc4:	b90b      	cbnz	r3, 23fccca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fccc6:	f002 fc01 	bl	23ff4cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fccca:	68c3      	ldr	r3, [r0, #12]
 23fcccc:	4798      	blx	r3
      if (_M_manager)
 23fccce:	68a3      	ldr	r3, [r4, #8]
 23fccd0:	b11b      	cbz	r3, 23fccda <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fccd2:	2203      	movs	r2, #3
 23fccd4:	4621      	mov	r1, r4
 23fccd6:	4620      	mov	r0, r4
 23fccd8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fccda:	4620      	mov	r0, r4
}
 23fccdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fcce0:	2110      	movs	r1, #16
 23fcce2:	f7fe b866 	b.w	23fadb2 <_ZdlPvj>

023fcce6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fcce6:	b510      	push	{r4, lr}
      if (_M_manager)
 23fcce8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fccea:	4604      	mov	r4, r0
      if (_M_manager)
 23fccec:	b113      	cbz	r3, 23fccf4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fccee:	2203      	movs	r2, #3
 23fccf0:	4601      	mov	r1, r0
 23fccf2:	4798      	blx	r3
    }
 23fccf4:	4620      	mov	r0, r4
 23fccf6:	bd10      	pop	{r4, pc}

023fccf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fccf8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fccfa:	6843      	ldr	r3, [r0, #4]
    {
 23fccfc:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fccfe:	3b01      	subs	r3, #1
 23fcd00:	6043      	str	r3, [r0, #4]
 23fcd02:	b963      	cbnz	r3, 23fcd1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fcd04:	6803      	ldr	r3, [r0, #0]
 23fcd06:	689b      	ldr	r3, [r3, #8]
 23fcd08:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcd0a:	68a3      	ldr	r3, [r4, #8]
 23fcd0c:	3b01      	subs	r3, #1
 23fcd0e:	60a3      	str	r3, [r4, #8]
 23fcd10:	b92b      	cbnz	r3, 23fcd1e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fcd12:	6823      	ldr	r3, [r4, #0]
 23fcd14:	4620      	mov	r0, r4
    }
 23fcd16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fcd1a:	68db      	ldr	r3, [r3, #12]
 23fcd1c:	4718      	bx	r3
    }
 23fcd1e:	bd10      	pop	{r4, pc}

023fcd20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcd20:	b570      	push	{r4, r5, r6, lr}
 23fcd22:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcd24:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcd28:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcd2c:	42ae      	cmp	r6, r5
 23fcd2e:	d004      	beq.n	23fcd3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fcd30:	4628      	mov	r0, r5
 23fcd32:	f001 ff4c 	bl	23febce <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcd36:	3510      	adds	r5, #16
 23fcd38:	e7f8      	b.n	23fcd2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcd3a:	6820      	ldr	r0, [r4, #0]
 23fcd3c:	f7ff ff30 	bl	23fcba0 <free>
    AllocatorT::free(data_);
}
 23fcd40:	4620      	mov	r0, r4
 23fcd42:	bd70      	pop	{r4, r5, r6, pc}

023fcd44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fcd44:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcd46:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fcd48:	460b      	mov	r3, r1
 23fcd4a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcd4c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fcd50:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fcd54:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fcd58:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fcd5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fcd60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fcd64:	b002      	add	sp, #8
 23fcd66:	bd10      	pop	{r4, pc}

023fcd68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fcd68:	2300      	movs	r3, #0
 23fcd6a:	4802      	ldr	r0, [pc, #8]	; (23fcd74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcd6c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fcd6e:	f7ff ba2b 	b.w	23fc1c8 <os_mutex_recursive_create>
 23fcd72:	bf00      	nop
 23fcd74:	1007ae44 	.word	0x1007ae44

023fcd78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcd78:	4770      	bx	lr

023fcd7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fcd7a:	2000      	movs	r0, #0
 23fcd7c:	4770      	bx	lr

023fcd7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fcd7e:	b510      	push	{r4, lr}
 23fcd80:	4604      	mov	r4, r0
 23fcd82:	2110      	movs	r1, #16
 23fcd84:	f7fe f815 	bl	23fadb2 <_ZdlPvj>
 23fcd88:	4620      	mov	r0, r4
 23fcd8a:	bd10      	pop	{r4, pc}

023fcd8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fcd8c:	b508      	push	{r3, lr}
      { delete this; }
 23fcd8e:	f7ff fff6 	bl	23fcd7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fcd92:	bd08      	pop	{r3, pc}

023fcd94 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fcd94:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fcd96:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fcd98:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fcd9c:	6002      	str	r2, [r0, #0]
 23fcd9e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcda0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcda2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcda4:	680c      	ldr	r4, [r1, #0]
 23fcda6:	8085      	strh	r5, [r0, #4]
 23fcda8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcdaa:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fcdac:	bd30      	pop	{r4, r5, pc}

023fcdae <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fcdae:	b510      	push	{r4, lr}
 23fcdb0:	4604      	mov	r4, r0
    free((void*)msg_);
 23fcdb2:	6800      	ldr	r0, [r0, #0]
 23fcdb4:	f7ff fef4 	bl	23fcba0 <free>
}
 23fcdb8:	4620      	mov	r0, r4
 23fcdba:	bd10      	pop	{r4, pc}

023fcdbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fcdbc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fcdbe:	68c4      	ldr	r4, [r0, #12]
 23fcdc0:	b314      	cbz	r4, 23fce08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fcdc2:	7823      	ldrb	r3, [r4, #0]
 23fcdc4:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fcdc6:	2b02      	cmp	r3, #2
 23fcdc8:	d103      	bne.n	23fcdd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fcdca:	f104 000c 	add.w	r0, r4, #12
 23fcdce:	f7ff ffee 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fcdd2:	1d23      	adds	r3, r4, #4
 23fcdd4:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fcdd6:	b135      	cbz	r5, 23fcde6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fcdd8:	4628      	mov	r0, r5
 23fcdda:	f7ff ff84 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
 23fcdde:	2110      	movs	r1, #16
 23fcde0:	4628      	mov	r0, r5
 23fcde2:	f7fd ffe6 	bl	23fadb2 <_ZdlPvj>
 23fcde6:	f104 0308 	add.w	r3, r4, #8
 23fcdea:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fcdec:	b135      	cbz	r5, 23fcdfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fcdee:	4628      	mov	r0, r5
 23fcdf0:	f7ff ff79 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
 23fcdf4:	2110      	movs	r1, #16
 23fcdf6:	4628      	mov	r0, r5
 23fcdf8:	f7fd ffdb 	bl	23fadb2 <_ZdlPvj>
 23fcdfc:	4620      	mov	r0, r4
 23fcdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fce02:	2114      	movs	r1, #20
 23fce04:	f7fd bfd5 	b.w	23fadb2 <_ZdlPvj>
 23fce08:	bd38      	pop	{r3, r4, r5, pc}

023fce0a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23fce0a:	b510      	push	{r4, lr}
 23fce0c:	b088      	sub	sp, #32
 23fce0e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23fce10:	4668      	mov	r0, sp
 23fce12:	f001 ff27 	bl	23fec64 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23fce16:	4669      	mov	r1, sp
 23fce18:	a804      	add	r0, sp, #16
 23fce1a:	f001 ff6e 	bl	23fecfa <_ZN6StringC1ERKS_>
 23fce1e:	a804      	add	r0, sp, #16
 23fce20:	47a0      	blx	r4
 23fce22:	4604      	mov	r4, r0
 23fce24:	a804      	add	r0, sp, #16
 23fce26:	f001 fed2 	bl	23febce <_ZN6StringD1Ev>
    String p(param);
 23fce2a:	4668      	mov	r0, sp
 23fce2c:	f001 fecf 	bl	23febce <_ZN6StringD1Ev>
}
 23fce30:	4620      	mov	r0, r4
 23fce32:	b008      	add	sp, #32
 23fce34:	bd10      	pop	{r4, pc}

023fce36 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23fce36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23fce38:	2300      	movs	r3, #0
         size = sizeof(*this);
 23fce3a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23fce3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23fce40:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23fce42:	4669      	mov	r1, sp
 23fce44:	461a      	mov	r2, r3
 23fce46:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23fce48:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23fce4c:	f8ad 4000 	strh.w	r4, [sp]
 23fce50:	f7ff fd8e 	bl	23fc970 <spark_function>
}
 23fce54:	b004      	add	sp, #16
 23fce56:	bd10      	pop	{r4, pc}

023fce58 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fce58:	680b      	ldr	r3, [r1, #0]
 23fce5a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fce5c:	684b      	ldr	r3, [r1, #4]
 23fce5e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fce60:	b113      	cbz	r3, 23fce68 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fce62:	685a      	ldr	r2, [r3, #4]
 23fce64:	3201      	adds	r2, #1
 23fce66:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fce68:	4770      	bx	lr

023fce6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fce6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fce6c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fce6e:	4668      	mov	r0, sp
 23fce70:	460d      	mov	r5, r1
 23fce72:	f7ff fff1 	bl	23fce58 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fce76:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fce78:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fce7a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fce7c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fce7e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fce80:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fce82:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fce84:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fce86:	f7fe f8af 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fce8a:	b135      	cbz	r5, 23fce9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fce8c:	1d28      	adds	r0, r5, #4
 23fce8e:	f7fe f8ab 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fce92:	2108      	movs	r1, #8
 23fce94:	4628      	mov	r0, r5
 23fce96:	f7fd ff8c 	bl	23fadb2 <_ZdlPvj>
        return p;
    }
 23fce9a:	4620      	mov	r0, r4
 23fce9c:	b003      	add	sp, #12
 23fce9e:	bd30      	pop	{r4, r5, pc}

023fcea0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fcea0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcea2:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcea4:	b90a      	cbnz	r2, 23fceaa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fcea6:	f002 fb11 	bl	23ff4cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fceaa:	68c3      	ldr	r3, [r0, #12]
    }
 23fceac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fceb0:	4718      	bx	r3

023fceb2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fceb2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fceb4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fceb6:	f100 0110 	add.w	r1, r0, #16
 23fceba:	f7ff fff1 	bl	23fcea0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fcebe:	bd08      	pop	{r3, pc}

023fcec0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fcec0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fcec2:	b510      	push	{r4, lr}
      if (_M_empty())
 23fcec4:	b90a      	cbnz	r2, 23fceca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fcec6:	f002 fb01 	bl	23ff4cc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fceca:	68c3      	ldr	r3, [r0, #12]
    }
 23fcecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fced0:	4718      	bx	r3

023fced2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fced2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fced4:	6800      	ldr	r0, [r0, #0]
 23fced6:	f100 0110 	add.w	r1, r0, #16
 23fceda:	f7ff fff1 	bl	23fcec0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fcede:	bd08      	pop	{r3, pc}

023fcee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fcee0:	b538      	push	{r3, r4, r5, lr}
 23fcee2:	2300      	movs	r3, #0
 23fcee4:	4604      	mov	r4, r0
 23fcee6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcee8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fceea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fceec:	f7fd ff5d 	bl	23fadaa <_Znwj>
 23fcef0:	b128      	cbz	r0, 23fcefe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fcef2:	2301      	movs	r3, #1
 23fcef4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fcef8:	4b02      	ldr	r3, [pc, #8]	; (23fcf04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fcefa:	60c5      	str	r5, [r0, #12]
 23fcefc:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fcefe:	6020      	str	r0, [r4, #0]
	}
 23fcf00:	4620      	mov	r0, r4
 23fcf02:	bd38      	pop	{r3, r4, r5, pc}
 23fcf04:	023ffb90 	.word	0x023ffb90

023fcf08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fcf08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fcf0a:	2300      	movs	r3, #0
 23fcf0c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fcf0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fcf10:	4604      	mov	r4, r0
 23fcf12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fcf14:	b12b      	cbz	r3, 23fcf22 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fcf16:	2202      	movs	r2, #2
 23fcf18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fcf1a:	68eb      	ldr	r3, [r5, #12]
 23fcf1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fcf1e:	68ab      	ldr	r3, [r5, #8]
 23fcf20:	60a3      	str	r3, [r4, #8]
    }
 23fcf22:	4620      	mov	r0, r4
 23fcf24:	bd38      	pop	{r3, r4, r5, pc}
	...

023fcf28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fcf28:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcf2a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fcf2c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fcf2e:	4668      	mov	r0, sp
 23fcf30:	f7ff ff30 	bl	23fcd94 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fcf34:	f04f 0302 	mov.w	r3, #2
 23fcf38:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fcf3c:	2a00      	cmp	r2, #0
 23fcf3e:	d103      	bne.n	23fcf48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fcf40:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fcf44:	2900      	cmp	r1, #0
 23fcf46:	d1f7      	bne.n	23fcf38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fcf48:	d121      	bne.n	23fcf8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fcf4a:	f104 050c 	add.w	r5, r4, #12
 23fcf4e:	4669      	mov	r1, sp
 23fcf50:	4628      	mov	r0, r5
 23fcf52:	f7ff ff1f 	bl	23fcd94 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fcf56:	2201      	movs	r2, #1
 23fcf58:	1c63      	adds	r3, r4, #1
 23fcf5a:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fcf5e:	2000      	movs	r0, #0
 23fcf60:	f104 0308 	add.w	r3, r4, #8
 23fcf64:	e8d3 6fef 	ldaex	r6, [r3]
 23fcf68:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fcf6c:	2a00      	cmp	r2, #0
 23fcf6e:	d1f9      	bne.n	23fcf64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fcf70:	b16e      	cbz	r6, 23fcf8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fcf72:	f7ff fcb7 	bl	23fc8e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fcf76:	b178      	cbz	r0, 23fcf98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fcf78:	4629      	mov	r1, r5
 23fcf7a:	4630      	mov	r0, r6
 23fcf7c:	f7ff ff90 	bl	23fcea0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fcf80:	4630      	mov	r0, r6
 23fcf82:	f7ff feb0 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fcf86:	2110      	movs	r1, #16
 23fcf88:	4630      	mov	r0, r6
 23fcf8a:	f7fd ff12 	bl	23fadb2 <_ZdlPvj>
        p_->setError(std::move(error));
 23fcf8e:	4668      	mov	r0, sp
 23fcf90:	f7ff ff0d 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
    }
 23fcf94:	b009      	add	sp, #36	; 0x24
 23fcf96:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fcf98:	4631      	mov	r1, r6
 23fcf9a:	a802      	add	r0, sp, #8
 23fcf9c:	f7ff ffb4 	bl	23fcf08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fcfa0:	68e0      	ldr	r0, [r4, #12]
 23fcfa2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fcfa6:	b108      	cbz	r0, 23fcfac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fcfa8:	f002 fb46 	bl	23ff638 <strdup>
        type_(type) {
 23fcfac:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fcfae:	2010      	movs	r0, #16
 23fcfb0:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fcfb4:	f7fd fef9 	bl	23fadaa <_Znwj>
 23fcfb8:	4605      	mov	r5, r0
 23fcfba:	b1e8      	cbz	r0, 23fcff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fcfbc:	2700      	movs	r7, #0
 23fcfbe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcfc0:	2018      	movs	r0, #24
 23fcfc2:	f7fd fef2 	bl	23fadaa <_Znwj>
 23fcfc6:	4604      	mov	r4, r0
 23fcfc8:	b188      	cbz	r0, 23fcfee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fcfca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fcfcc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fcfce:	a802      	add	r0, sp, #8
 23fcfd0:	f7ff feb8 	bl	23fcd44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfd4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcfd6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfd8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcfda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcfdc:	9204      	str	r2, [sp, #16]
 23fcfde:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fcfe0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfe2:	60e3      	str	r3, [r4, #12]
 23fcfe4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fcfe8:	9205      	str	r2, [sp, #20]
 23fcfea:	f7ff fed3 	bl	23fcd94 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fcfee:	4b08      	ldr	r3, [pc, #32]	; (23fd010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fcff0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fcff2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fcff4:	4b07      	ldr	r3, [pc, #28]	; (23fd014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fcff6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fcff8:	a806      	add	r0, sp, #24
 23fcffa:	f7ff fed8 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fcffe:	a802      	add	r0, sp, #8
 23fd000:	f7ff fe71 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd004:	2200      	movs	r2, #0
 23fd006:	4629      	mov	r1, r5
 23fd008:	4803      	ldr	r0, [pc, #12]	; (23fd018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fd00a:	f7ff fc79 	bl	23fc900 <application_thread_invoke>
 23fd00e:	e7b7      	b.n	23fcf80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fd010:	023fceb3 	.word	0x023fceb3
 23fd014:	023fd12d 	.word	0x023fd12d
 23fd018:	023fccbf 	.word	0x023fccbf

023fd01c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fd01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd020:	b08b      	sub	sp, #44	; 0x2c
 23fd022:	4605      	mov	r5, r0
 23fd024:	460f      	mov	r7, r1
 23fd026:	4690      	mov	r8, r2
 23fd028:	4699      	mov	r9, r3
 23fd02a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd02e:	f7ff fcc9 	bl	23fc9c4 <spark_cloud_flag_connected>
 23fd032:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fd034:	4683      	mov	fp, r0
 23fd036:	bb38      	cbnz	r0, 23fd088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fd038:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fd03c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd03e:	a905      	add	r1, sp, #20
 23fd040:	4630      	mov	r0, r6
 23fd042:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd046:	f7ff fea5 	bl	23fcd94 <_ZN8particle5ErrorC1EOS0_>
 23fd04a:	2014      	movs	r0, #20
 23fd04c:	f7fd fead 	bl	23fadaa <_Znwj>
 23fd050:	4604      	mov	r4, r0
 23fd052:	b148      	cbz	r0, 23fd068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fd054:	2302      	movs	r3, #2
 23fd056:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd058:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd05a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd05e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fd060:	4631      	mov	r1, r6
 23fd062:	300c      	adds	r0, #12
 23fd064:	f7ff fe96 	bl	23fcd94 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd068:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fd06a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd06c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fd070:	f7ff ff36 	bl	23fcee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd074:	4630      	mov	r0, r6
 23fd076:	f7ff fe9a 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fd07a:	a805      	add	r0, sp, #20
 23fd07c:	f7ff fe97 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fd080:	4628      	mov	r0, r5
 23fd082:	b00b      	add	sp, #44	; 0x2c
 23fd084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fd088:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fd08a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fd08c:	2014      	movs	r0, #20
 23fd08e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fd092:	9307      	str	r3, [sp, #28]
 23fd094:	f7fd fe89 	bl	23fadaa <_Znwj>
 23fd098:	4601      	mov	r1, r0
 23fd09a:	b118      	cbz	r0, 23fd0a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd09c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fd0a0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd0a2:	7044      	strb	r4, [r0, #1]
 23fd0a4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd0a6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fd0a8:	f7ff ff1a 	bl	23fcee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fd0ac:	4b1e      	ldr	r3, [pc, #120]	; (23fd128 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fd0ae:	2008      	movs	r0, #8
 23fd0b0:	9308      	str	r3, [sp, #32]
 23fd0b2:	f7fd fe7a 	bl	23fadaa <_Znwj>
 23fd0b6:	4604      	mov	r4, r0
 23fd0b8:	b110      	cbz	r0, 23fd0c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fd0ba:	a903      	add	r1, sp, #12
 23fd0bc:	f7ff fecc 	bl	23fce58 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd0c0:	464a      	mov	r2, r9
 23fd0c2:	4641      	mov	r1, r8
 23fd0c4:	4638      	mov	r0, r7
 23fd0c6:	9600      	str	r6, [sp, #0]
 23fd0c8:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fd0cc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd0ce:	f7ff fc87 	bl	23fc9e0 <spark_send_event>
 23fd0d2:	b9b8      	cbnz	r0, 23fd104 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fd0d4:	9b03      	ldr	r3, [sp, #12]
 23fd0d6:	3301      	adds	r3, #1
 23fd0d8:	781b      	ldrb	r3, [r3, #0]
 23fd0da:	b2db      	uxtb	r3, r3
 23fd0dc:	b993      	cbnz	r3, 23fd104 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fd0de:	9305      	str	r3, [sp, #20]
 23fd0e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fd0e4:	a905      	add	r1, sp, #20
 23fd0e6:	a803      	add	r0, sp, #12
 23fd0e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd0ec:	f7ff ff1c 	bl	23fcf28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd0f0:	a805      	add	r0, sp, #20
 23fd0f2:	f7ff fe5c 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fd0f6:	a805      	add	r0, sp, #20
 23fd0f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fd0fa:	f7ff feb6 	bl	23fce6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fd0fe:	a806      	add	r0, sp, #24
 23fd100:	f7fd ff72 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd104:	a903      	add	r1, sp, #12
 23fd106:	a805      	add	r0, sp, #20
 23fd108:	f7ff fea6 	bl	23fce58 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd10c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd10e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd110:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fd112:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd114:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fd116:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fd118:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fd11a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fd11c:	f7fd ff64 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd120:	a804      	add	r0, sp, #16
 23fd122:	f7fd ff61 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fd126:	e7ab      	b.n	23fd080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fd128:	023fd1a9 	.word	0x023fd1a9

023fd12c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fd12c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd130:	4605      	mov	r5, r0
	switch (__op)
 23fd132:	d103      	bne.n	23fd13c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd134:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd136:	6003      	str	r3, [r0, #0]
      }
 23fd138:	2000      	movs	r0, #0
 23fd13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fd13c:	2a02      	cmp	r2, #2
 23fd13e:	d010      	beq.n	23fd162 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fd140:	2a03      	cmp	r2, #3
 23fd142:	d1f9      	bne.n	23fd138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd144:	6804      	ldr	r4, [r0, #0]
 23fd146:	2c00      	cmp	r4, #0
 23fd148:	d0f6      	beq.n	23fd138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fd14a:	f104 0010 	add.w	r0, r4, #16
 23fd14e:	f7ff fe2e 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd152:	4620      	mov	r0, r4
 23fd154:	f7ff fdc7 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd158:	2118      	movs	r1, #24
 23fd15a:	4620      	mov	r0, r4
 23fd15c:	f7fd fe29 	bl	23fadb2 <_ZdlPvj>
 23fd160:	e7ea      	b.n	23fd138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd162:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fd164:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd166:	f7fd fe20 	bl	23fadaa <_Znwj>
 23fd16a:	4604      	mov	r4, r0
 23fd16c:	b150      	cbz	r0, 23fd184 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fd16e:	4631      	mov	r1, r6
 23fd170:	f7ff feca 	bl	23fcf08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd174:	6930      	ldr	r0, [r6, #16]
 23fd176:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd17a:	b108      	cbz	r0, 23fd180 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fd17c:	f002 fa5c 	bl	23ff638 <strdup>
        type_(type) {
 23fd180:	6120      	str	r0, [r4, #16]
 23fd182:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fd184:	602c      	str	r4, [r5, #0]
	}
 23fd186:	e7d7      	b.n	23fd138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fd188 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fd188:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd18a:	2300      	movs	r3, #0
 23fd18c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd18e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd190:	4604      	mov	r4, r0
 23fd192:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd194:	b12b      	cbz	r3, 23fd1a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd196:	2202      	movs	r2, #2
 23fd198:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd19a:	68eb      	ldr	r3, [r5, #12]
 23fd19c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd19e:	68ab      	ldr	r3, [r5, #8]
 23fd1a0:	60a3      	str	r3, [r4, #8]
    }
 23fd1a2:	4620      	mov	r0, r4
 23fd1a4:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd1a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fd1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd1aa:	4604      	mov	r4, r0
 23fd1ac:	b089      	sub	sp, #36	; 0x24
 23fd1ae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fd1b0:	a801      	add	r0, sp, #4
 23fd1b2:	4611      	mov	r1, r2
 23fd1b4:	f7ff fe59 	bl	23fce6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fd1b8:	b1a4      	cbz	r4, 23fd1e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fd1ba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd1bc:	b11d      	cbz	r5, 23fd1c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fd1be:	4628      	mov	r0, r5
 23fd1c0:	f002 fa3a 	bl	23ff638 <strdup>
 23fd1c4:	4605      	mov	r5, r0
 23fd1c6:	a801      	add	r0, sp, #4
 23fd1c8:	a903      	add	r1, sp, #12
        type_(type) {
 23fd1ca:	9503      	str	r5, [sp, #12]
 23fd1cc:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fd1d0:	f7ff feaa 	bl	23fcf28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd1d4:	a803      	add	r0, sp, #12
 23fd1d6:	f7ff fdea 	bl	23fcdae <_ZN8particle5ErrorD1Ev>
 23fd1da:	a802      	add	r0, sp, #8
 23fd1dc:	f7fd ff04 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd1e0:	b009      	add	sp, #36	; 0x24
 23fd1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd1e4:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fd1e6:	9d01      	ldr	r5, [sp, #4]
 23fd1e8:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fd1ec:	2a00      	cmp	r2, #0
 23fd1ee:	d103      	bne.n	23fd1f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fd1f0:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fd1f4:	2900      	cmp	r1, #0
 23fd1f6:	d1f7      	bne.n	23fd1e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fd1f8:	d1ef      	bne.n	23fd1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fd1fa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd1fc:	2201      	movs	r2, #1
 23fd1fe:	18eb      	adds	r3, r5, r3
 23fd200:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd204:	1d2b      	adds	r3, r5, #4
 23fd206:	e8d3 6fef 	ldaex	r6, [r3]
 23fd20a:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fd20e:	2a00      	cmp	r2, #0
 23fd210:	d1f9      	bne.n	23fd206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fd212:	2e00      	cmp	r6, #0
 23fd214:	d0e1      	beq.n	23fd1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fd216:	4620      	mov	r0, r4
 23fd218:	f7ff fb64 	bl	23fc8e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd21c:	4607      	mov	r7, r0
 23fd21e:	b160      	cbz	r0, 23fd23a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd220:	4630      	mov	r0, r6
 23fd222:	f105 010c 	add.w	r1, r5, #12
 23fd226:	f7ff fe4b 	bl	23fcec0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fd22a:	4630      	mov	r0, r6
 23fd22c:	f7ff fd5b 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd230:	2110      	movs	r1, #16
 23fd232:	4630      	mov	r0, r6
 23fd234:	f7fd fdbd 	bl	23fadb2 <_ZdlPvj>
 23fd238:	e7cf      	b.n	23fd1da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd23a:	4631      	mov	r1, r6
 23fd23c:	a803      	add	r0, sp, #12
 23fd23e:	f7ff ffa3 	bl	23fd188 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd242:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd244:	2010      	movs	r0, #16
 23fd246:	f88d 301c 	strb.w	r3, [sp, #28]
 23fd24a:	f7fd fdae 	bl	23fadaa <_Znwj>
 23fd24e:	4605      	mov	r5, r0
 23fd250:	b1d0      	cbz	r0, 23fd288 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fd252:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd254:	2014      	movs	r0, #20
 23fd256:	f7fd fda8 	bl	23fadaa <_Znwj>
 23fd25a:	4604      	mov	r4, r0
 23fd25c:	b178      	cbz	r0, 23fd27e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fd25e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd260:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd262:	a803      	add	r0, sp, #12
 23fd264:	f7ff fd6e 	bl	23fcd44 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd268:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd26a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd26c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd26e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fd270:	9205      	str	r2, [sp, #20]
 23fd272:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd274:	60e3      	str	r3, [r4, #12]
 23fd276:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fd27a:	9206      	str	r2, [sp, #24]
 23fd27c:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd27e:	4b07      	ldr	r3, [pc, #28]	; (23fd29c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd280:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd282:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd284:	4b06      	ldr	r3, [pc, #24]	; (23fd2a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fd286:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fd288:	a803      	add	r0, sp, #12
 23fd28a:	f7ff fd2c 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd28e:	2200      	movs	r2, #0
 23fd290:	4629      	mov	r1, r5
 23fd292:	4804      	ldr	r0, [pc, #16]	; (23fd2a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fd294:	f7ff fb34 	bl	23fc900 <application_thread_invoke>
 23fd298:	e7c7      	b.n	23fd22a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fd29a:	bf00      	nop
 23fd29c:	023fced3 	.word	0x023fced3
 23fd2a0:	023fd2a9 	.word	0x023fd2a9
 23fd2a4:	023fccbf 	.word	0x023fccbf

023fd2a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fd2a8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd2aa:	b570      	push	{r4, r5, r6, lr}
 23fd2ac:	4604      	mov	r4, r0
	switch (__op)
 23fd2ae:	d103      	bne.n	23fd2b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd2b0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd2b2:	6003      	str	r3, [r0, #0]
      }
 23fd2b4:	2000      	movs	r0, #0
 23fd2b6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fd2b8:	2a02      	cmp	r2, #2
 23fd2ba:	d00c      	beq.n	23fd2d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fd2bc:	2a03      	cmp	r2, #3
 23fd2be:	d1f9      	bne.n	23fd2b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd2c0:	6804      	ldr	r4, [r0, #0]
 23fd2c2:	2c00      	cmp	r4, #0
 23fd2c4:	d0f6      	beq.n	23fd2b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fd2c6:	4620      	mov	r0, r4
 23fd2c8:	f7ff fd0d 	bl	23fcce6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd2cc:	2114      	movs	r1, #20
 23fd2ce:	4620      	mov	r0, r4
 23fd2d0:	f7fd fd6f 	bl	23fadb2 <_ZdlPvj>
 23fd2d4:	e7ee      	b.n	23fd2b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd2d6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fd2d8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd2da:	f7fd fd66 	bl	23fadaa <_Znwj>
 23fd2de:	4605      	mov	r5, r0
 23fd2e0:	b120      	cbz	r0, 23fd2ec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fd2e2:	4631      	mov	r1, r6
 23fd2e4:	f7ff ff50 	bl	23fd188 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fd2e8:	7c33      	ldrb	r3, [r6, #16]
 23fd2ea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fd2ec:	6025      	str	r5, [r4, #0]
	}
 23fd2ee:	e7e1      	b.n	23fd2b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fd2f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd2f0:	2200      	movs	r2, #0
 23fd2f2:	6840      	ldr	r0, [r0, #4]
 23fd2f4:	4611      	mov	r1, r2
 23fd2f6:	f7ff bbff 	b.w	23fcaf8 <network_listening>

023fd2fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd2fa:	2200      	movs	r2, #0
 23fd2fc:	6840      	ldr	r0, [r0, #4]
 23fd2fe:	4611      	mov	r1, r2
 23fd300:	f7ff bc16 	b.w	23fcb30 <network_get_listen_timeout>

023fd304 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd304:	2200      	movs	r2, #0
 23fd306:	6840      	ldr	r0, [r0, #4]
 23fd308:	f7ff bc04 	b.w	23fcb14 <network_set_listen_timeout>

023fd30c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd30c:	2200      	movs	r2, #0
 23fd30e:	6840      	ldr	r0, [r0, #4]
 23fd310:	f081 0101 	eor.w	r1, r1, #1
 23fd314:	f7ff bbe2 	b.w	23fcadc <network_listen>

023fd318 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd318:	2300      	movs	r3, #0
 23fd31a:	6840      	ldr	r0, [r0, #4]
 23fd31c:	461a      	mov	r2, r3
 23fd31e:	4619      	mov	r1, r3
 23fd320:	f7ff bbce 	b.w	23fcac0 <network_off>

023fd324 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd324:	2300      	movs	r3, #0
 23fd326:	6840      	ldr	r0, [r0, #4]
 23fd328:	461a      	mov	r2, r3
 23fd32a:	4619      	mov	r1, r3
 23fd32c:	f7ff bbba 	b.w	23fcaa4 <network_on>

023fd330 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd330:	2200      	movs	r2, #0
 23fd332:	6840      	ldr	r0, [r0, #4]
 23fd334:	4611      	mov	r1, r2
 23fd336:	f7ff bba7 	b.w	23fca88 <network_ready>

023fd33a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd33a:	2200      	movs	r2, #0
 23fd33c:	6840      	ldr	r0, [r0, #4]
 23fd33e:	4611      	mov	r1, r2
 23fd340:	f7ff bb86 	b.w	23fca50 <network_connecting>

023fd344 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd344:	2200      	movs	r2, #0
 23fd346:	2102      	movs	r1, #2
 23fd348:	6840      	ldr	r0, [r0, #4]
 23fd34a:	f7ff bb8f 	b.w	23fca6c <network_disconnect>

023fd34e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd34e:	2300      	movs	r3, #0
 23fd350:	6840      	ldr	r0, [r0, #4]
 23fd352:	461a      	mov	r2, r3
 23fd354:	f7ff bb6e 	b.w	23fca34 <network_connect>

023fd358 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd358:	2203      	movs	r2, #3
 23fd35a:	4b02      	ldr	r3, [pc, #8]	; (23fd364 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd35c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd35e:	4a02      	ldr	r2, [pc, #8]	; (23fd368 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd360:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd362:	4770      	bx	lr
 23fd364:	1007ae48 	.word	0x1007ae48
 23fd368:	023ffbac 	.word	0x023ffbac

023fd36c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fd36c:	4770      	bx	lr

023fd36e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fd36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd370:	4606      	mov	r6, r0
 23fd372:	4615      	mov	r5, r2
 23fd374:	460c      	mov	r4, r1
 23fd376:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fd378:	42bc      	cmp	r4, r7
 23fd37a:	d006      	beq.n	23fd38a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fd37c:	6833      	ldr	r3, [r6, #0]
 23fd37e:	4630      	mov	r0, r6
 23fd380:	689b      	ldr	r3, [r3, #8]
 23fd382:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd386:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fd388:	e7f6      	b.n	23fd378 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fd38a:	4628      	mov	r0, r5
 23fd38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd38e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fd38e:	2200      	movs	r2, #0
 23fd390:	7c00      	ldrb	r0, [r0, #16]
 23fd392:	f7ff b815 	b.w	23fc3c0 <hal_i2c_write>

023fd396 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fd396:	2100      	movs	r1, #0
 23fd398:	7c00      	ldrb	r0, [r0, #16]
 23fd39a:	f7ff b81f 	b.w	23fc3dc <hal_i2c_available>

023fd39e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fd39e:	2100      	movs	r1, #0
 23fd3a0:	7c00      	ldrb	r0, [r0, #16]
 23fd3a2:	f7ff b829 	b.w	23fc3f8 <hal_i2c_read>

023fd3a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fd3a6:	2100      	movs	r1, #0
 23fd3a8:	7c00      	ldrb	r0, [r0, #16]
 23fd3aa:	f7ff b833 	b.w	23fc414 <hal_i2c_peek>

023fd3ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fd3ae:	2100      	movs	r1, #0
 23fd3b0:	7c00      	ldrb	r0, [r0, #16]
 23fd3b2:	f7ff b83d 	b.w	23fc430 <hal_i2c_flush>

023fd3b6 <_ZN7TwoWireD0Ev>:
 23fd3b6:	b510      	push	{r4, lr}
 23fd3b8:	4604      	mov	r4, r0
 23fd3ba:	2114      	movs	r1, #20
 23fd3bc:	f7fd fcf9 	bl	23fadb2 <_ZdlPvj>
 23fd3c0:	4620      	mov	r0, r4
 23fd3c2:	bd10      	pop	{r4, pc}

023fd3c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd3c4:	b538      	push	{r3, r4, r5, lr}
 23fd3c6:	4604      	mov	r4, r0
 23fd3c8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fd3ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd3ce:	2200      	movs	r2, #0
 23fd3d0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fd3d4:	4b09      	ldr	r3, [pc, #36]	; (23fd3fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fd3d6:	4608      	mov	r0, r1
  _i2c = i2c;
 23fd3d8:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fd3da:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fd3dc:	4629      	mov	r1, r5
 23fd3de:	f7ff f843 	bl	23fc468 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd3e2:	30bf      	adds	r0, #191	; 0xbf
 23fd3e4:	d108      	bne.n	23fd3f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fd3e6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fd3e8:	07db      	lsls	r3, r3, #31
 23fd3ea:	d505      	bpl.n	23fd3f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fd3ec:	6868      	ldr	r0, [r5, #4]
 23fd3ee:	f7ff fbd7 	bl	23fcba0 <free>
    free(conf.tx_buffer);
 23fd3f2:	68e8      	ldr	r0, [r5, #12]
 23fd3f4:	f7ff fbd4 	bl	23fcba0 <free>
}
 23fd3f8:	4620      	mov	r0, r4
 23fd3fa:	bd38      	pop	{r3, r4, r5, pc}
 23fd3fc:	023ffbe8 	.word	0x023ffbe8

023fd400 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fd400:	2200      	movs	r2, #0
 23fd402:	7c00      	ldrb	r0, [r0, #16]
 23fd404:	f7fe bfa4 	b.w	23fc350 <hal_i2c_set_speed>

023fd408 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fd408:	2300      	movs	r3, #0
 23fd40a:	7c00      	ldrb	r0, [r0, #16]
 23fd40c:	461a      	mov	r2, r3
 23fd40e:	4619      	mov	r1, r3
 23fd410:	f7fe bfac 	b.w	23fc36c <hal_i2c_begin>

023fd414 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fd414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fd416:	2200      	movs	r2, #0
 23fd418:	2314      	movs	r3, #20
 23fd41a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fd41e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fd422:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fd424:	7c00      	ldrb	r0, [r0, #16]
 23fd426:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd42a:	684b      	ldr	r3, [r1, #4]
 23fd42c:	9303      	str	r3, [sp, #12]
 23fd42e:	68cb      	ldr	r3, [r1, #12]
 23fd430:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fd432:	7a0b      	ldrb	r3, [r1, #8]
 23fd434:	a901      	add	r1, sp, #4
 23fd436:	9305      	str	r3, [sp, #20]
 23fd438:	f7ff f824 	bl	23fc484 <hal_i2c_request_ex>
}
 23fd43c:	b007      	add	sp, #28
 23fd43e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd442 <_ZN7TwoWire11requestFromEhjh>:
{
 23fd442:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fd444:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fd446:	f88d 1000 	strb.w	r1, [sp]
 23fd44a:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fd44e:	bf18      	it	ne
 23fd450:	2301      	movne	r3, #1
 23fd452:	9103      	str	r1, [sp, #12]
 23fd454:	4669      	mov	r1, sp
    size_ = size;
 23fd456:	9201      	str	r2, [sp, #4]
 23fd458:	f88d 3008 	strb.w	r3, [sp, #8]
 23fd45c:	f7ff ffda 	bl	23fd414 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fd460:	b005      	add	sp, #20
 23fd462:	f85d fb04 	ldr.w	pc, [sp], #4

023fd466 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fd466:	2200      	movs	r2, #0
 23fd468:	7c00      	ldrb	r0, [r0, #16]
 23fd46a:	f7fe bf8d 	b.w	23fc388 <hal_i2c_begin_transmission>

023fd46e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fd46e:	2200      	movs	r2, #0
 23fd470:	7c00      	ldrb	r0, [r0, #16]
 23fd472:	f7fe bf97 	b.w	23fc3a4 <hal_i2c_end_transmission>

023fd476 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd476:	4770      	bx	lr

023fd478 <_ZN9IPAddressD0Ev>:
 23fd478:	b510      	push	{r4, lr}
 23fd47a:	4604      	mov	r4, r0
 23fd47c:	2118      	movs	r1, #24
 23fd47e:	f7fd fc98 	bl	23fadb2 <_ZdlPvj>
 23fd482:	4620      	mov	r0, r4
 23fd484:	bd10      	pop	{r4, pc}

023fd486 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd486:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd488:	7d03      	ldrb	r3, [r0, #20]
{
 23fd48a:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd48c:	2b06      	cmp	r3, #6
 23fd48e:	f04f 0400 	mov.w	r4, #0
{
 23fd492:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd494:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd498:	d012      	beq.n	23fd4c0 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd49a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd49e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd4a2:	220a      	movs	r2, #10
 23fd4a4:	4630      	mov	r0, r6
 23fd4a6:	f001 fad0 	bl	23fea4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd4aa:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd4ac:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd4ae:	d019      	beq.n	23fd4e4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd4b0:	2c00      	cmp	r4, #0
 23fd4b2:	d0f4      	beq.n	23fd49e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd4b4:	212e      	movs	r1, #46	; 0x2e
 23fd4b6:	4630      	mov	r0, r6
 23fd4b8:	f001 fac4 	bl	23fea44 <_ZN5Print5printEc>
 23fd4bc:	4404      	add	r4, r0
 23fd4be:	e7ee      	b.n	23fd49e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd4c0:	232f      	movs	r3, #47	; 0x2f
 23fd4c2:	466a      	mov	r2, sp
 23fd4c4:	4639      	mov	r1, r7
 23fd4c6:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd4c8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd4cc:	f7fe ffe8 	bl	23fc4a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd4d0:	4668      	mov	r0, sp
 23fd4d2:	f7fd fc45 	bl	23fad60 <strlen>
 23fd4d6:	6833      	ldr	r3, [r6, #0]
 23fd4d8:	4602      	mov	r2, r0
 23fd4da:	4669      	mov	r1, sp
 23fd4dc:	4630      	mov	r0, r6
 23fd4de:	68db      	ldr	r3, [r3, #12]
 23fd4e0:	4798      	blx	r3
 23fd4e2:	4604      	mov	r4, r0
    }
    return n;
}
 23fd4e4:	4620      	mov	r0, r4
 23fd4e6:	b00d      	add	sp, #52	; 0x34
 23fd4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fd4ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd4ec:	b510      	push	{r4, lr}
 23fd4ee:	4604      	mov	r4, r0
 23fd4f0:	4b04      	ldr	r3, [pc, #16]	; (23fd504 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd4f2:	2211      	movs	r2, #17
 23fd4f4:	2100      	movs	r1, #0
 23fd4f6:	f840 3b04 	str.w	r3, [r0], #4
 23fd4fa:	f002 f846 	bl	23ff58a <memset>
}
 23fd4fe:	4620      	mov	r0, r4
 23fd500:	bd10      	pop	{r4, pc}
 23fd502:	bf00      	nop
 23fd504:	023ffc10 	.word	0x023ffc10

023fd508 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd508:	4603      	mov	r3, r0
 23fd50a:	4a07      	ldr	r2, [pc, #28]	; (23fd528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd50c:	b510      	push	{r4, lr}
 23fd50e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd512:	f101 0210 	add.w	r2, r1, #16
 23fd516:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd51a:	4291      	cmp	r1, r2
 23fd51c:	f843 4b04 	str.w	r4, [r3], #4
 23fd520:	d1f9      	bne.n	23fd516 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd522:	780a      	ldrb	r2, [r1, #0]
 23fd524:	701a      	strb	r2, [r3, #0]
}
 23fd526:	bd10      	pop	{r4, pc}
 23fd528:	023ffc10 	.word	0x023ffc10

023fd52c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd52c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd52e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd532:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd536:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd53a:	2304      	movs	r3, #4
 23fd53c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd540:	6041      	str	r1, [r0, #4]
 23fd542:	7503      	strb	r3, [r0, #20]
}
 23fd544:	bd10      	pop	{r4, pc}
	...

023fd548 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd548:	b507      	push	{r0, r1, r2, lr}
 23fd54a:	4b06      	ldr	r3, [pc, #24]	; (23fd564 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd54c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd54e:	78cb      	ldrb	r3, [r1, #3]
 23fd550:	9300      	str	r3, [sp, #0]
 23fd552:	788b      	ldrb	r3, [r1, #2]
 23fd554:	784a      	ldrb	r2, [r1, #1]
 23fd556:	7809      	ldrb	r1, [r1, #0]
 23fd558:	f7ff ffe8 	bl	23fd52c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd55c:	b003      	add	sp, #12
 23fd55e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd562:	bf00      	nop
 23fd564:	023ffc10 	.word	0x023ffc10

023fd568 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fd568:	2201      	movs	r2, #1
 23fd56a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fd56e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fd572:	4618      	mov	r0, r3
 23fd574:	2901      	cmp	r1, #1
 23fd576:	d108      	bne.n	23fd58a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fd578:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fd57c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fd580:	3a01      	subs	r2, #1
 23fd582:	f103 0310 	add.w	r3, r3, #16
 23fd586:	d1f2      	bne.n	23fd56e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fd588:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fd58a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fd58c:	bf04      	itt	eq
 23fd58e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fd592:	1852      	addeq	r2, r2, r1
 23fd594:	e7f4      	b.n	23fd580 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fd596 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd596:	b40e      	push	{r1, r2, r3}
 23fd598:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd59a:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd59c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fd59e:	af00      	add	r7, sp, #0
 23fd5a0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fd5a4:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd5a8:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd5aa:	462b      	mov	r3, r5
 23fd5ac:	1878      	adds	r0, r7, r1
 23fd5ae:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd5b0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd5b2:	f7ff fb1f 	bl	23fcbf4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fd5b6:	280f      	cmp	r0, #15
 23fd5b8:	687a      	ldr	r2, [r7, #4]
 23fd5ba:	d91a      	bls.n	23fd5f2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fd5bc:	f100 0308 	add.w	r3, r0, #8
 23fd5c0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fd5c4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fd5c6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd5ca:	1c41      	adds	r1, r0, #1
 23fd5cc:	462b      	mov	r3, r5
 23fd5ce:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd5d0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd5d2:	f7ff fb0f 	bl	23fcbf4 <vsnprintf>
        if (n > 0) {
 23fd5d6:	1e02      	subs	r2, r0, #0
 23fd5d8:	dd04      	ble.n	23fd5e4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fd5da:	6823      	ldr	r3, [r4, #0]
 23fd5dc:	4669      	mov	r1, sp
 23fd5de:	4620      	mov	r0, r4
 23fd5e0:	689b      	ldr	r3, [r3, #8]
 23fd5e2:	4798      	blx	r3
 23fd5e4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fd5e6:	3720      	adds	r7, #32
 23fd5e8:	46bd      	mov	sp, r7
 23fd5ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd5ee:	b003      	add	sp, #12
 23fd5f0:	4770      	bx	lr
    } else if (n > 0) {
 23fd5f2:	2800      	cmp	r0, #0
 23fd5f4:	d0f7      	beq.n	23fd5e6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fd5f6:	6823      	ldr	r3, [r4, #0]
 23fd5f8:	4602      	mov	r2, r0
 23fd5fa:	689b      	ldr	r3, [r3, #8]
 23fd5fc:	4620      	mov	r0, r4
 23fd5fe:	f107 0110 	add.w	r1, r7, #16
 23fd602:	4798      	blx	r3
}
 23fd604:	e7ef      	b.n	23fd5e6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fd606 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd606:	b538      	push	{r3, r4, r5, lr}
 23fd608:	680b      	ldr	r3, [r1, #0]
 23fd60a:	4604      	mov	r4, r0
 23fd60c:	6003      	str	r3, [r0, #0]
 23fd60e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fd610:	6843      	ldr	r3, [r0, #4]
 23fd612:	429d      	cmp	r5, r3
 23fd614:	d008      	beq.n	23fd628 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fd616:	b115      	cbz	r5, 23fd61e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fd618:	686b      	ldr	r3, [r5, #4]
 23fd61a:	3301      	adds	r3, #1
 23fd61c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fd61e:	6860      	ldr	r0, [r4, #4]
 23fd620:	b108      	cbz	r0, 23fd626 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fd622:	f7ff fb69 	bl	23fccf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd626:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fd628:	bd38      	pop	{r3, r4, r5, pc}

023fd62a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fd62a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd62c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fd62e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd632:	2201      	movs	r2, #1
 23fd634:	689b      	ldr	r3, [r3, #8]
 23fd636:	f10d 0107 	add.w	r1, sp, #7
 23fd63a:	4798      	blx	r3
}
 23fd63c:	b003      	add	sp, #12
 23fd63e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd642 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd642:	460b      	mov	r3, r1
 23fd644:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fd646:	2200      	movs	r2, #0
 23fd648:	b510      	push	{r4, lr}
 23fd64a:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd64c:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fd650:	6083      	str	r3, [r0, #8]
    if (t) {
 23fd652:	b90b      	cbnz	r3, 23fd658 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fd654:	4620      	mov	r0, r4
 23fd656:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fd658:	f7ff ffd5 	bl	23fd606 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fd65c:	e7fa      	b.n	23fd654 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fd65e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fd65e:	6883      	ldr	r3, [r0, #8]
 23fd660:	b1eb      	cbz	r3, 23fd69e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fd662:	781a      	ldrb	r2, [r3, #0]
 23fd664:	2a03      	cmp	r2, #3
 23fd666:	d81a      	bhi.n	23fd69e <_ZNK5spark9JSONValue4typeEv+0x40>
 23fd668:	e8df f002 	tbb	[pc, r2]
 23fd66c:	1b021704 	.word	0x1b021704
 23fd670:	2005      	movs	r0, #5
 23fd672:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fd674:	6802      	ldr	r2, [r0, #0]
 23fd676:	685b      	ldr	r3, [r3, #4]
 23fd678:	6852      	ldr	r2, [r2, #4]
 23fd67a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fd67c:	282d      	cmp	r0, #45	; 0x2d
 23fd67e:	d012      	beq.n	23fd6a6 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fd680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fd684:	2b09      	cmp	r3, #9
 23fd686:	d90e      	bls.n	23fd6a6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fd688:	2874      	cmp	r0, #116	; 0x74
 23fd68a:	d00e      	beq.n	23fd6aa <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fd68c:	2866      	cmp	r0, #102	; 0x66
 23fd68e:	d00c      	beq.n	23fd6aa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fd690:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fd694:	4258      	negs	r0, r3
 23fd696:	4158      	adcs	r0, r3
 23fd698:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fd69a:	2006      	movs	r0, #6
 23fd69c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fd69e:	2000      	movs	r0, #0
 23fd6a0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fd6a2:	2004      	movs	r0, #4
 23fd6a4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fd6a6:	2003      	movs	r0, #3
 23fd6a8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fd6aa:	2002      	movs	r0, #2
}
 23fd6ac:	4770      	bx	lr

023fd6ae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fd6ae:	b510      	push	{r4, lr}
 23fd6b0:	4604      	mov	r4, r0
    switch (type()) {
 23fd6b2:	f7ff ffd4 	bl	23fd65e <_ZNK5spark9JSONValue4typeEv>
 23fd6b6:	2802      	cmp	r0, #2
 23fd6b8:	d00e      	beq.n	23fd6d8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fd6ba:	1ec3      	subs	r3, r0, #3
 23fd6bc:	b2db      	uxtb	r3, r3
 23fd6be:	2b01      	cmp	r3, #1
 23fd6c0:	d814      	bhi.n	23fd6ec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fd6c2:	6822      	ldr	r2, [r4, #0]
 23fd6c4:	68a3      	ldr	r3, [r4, #8]
 23fd6c6:	6850      	ldr	r0, [r2, #4]
 23fd6c8:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fd6ca:	220a      	movs	r2, #10
}
 23fd6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fd6d0:	2100      	movs	r1, #0
 23fd6d2:	4418      	add	r0, r3
 23fd6d4:	f002 b878 	b.w	23ff7c8 <strtol>
        const char* const s = d_->json + t_->start;
 23fd6d8:	6822      	ldr	r2, [r4, #0]
 23fd6da:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fd6dc:	6852      	ldr	r2, [r2, #4]
 23fd6de:	685b      	ldr	r3, [r3, #4]
 23fd6e0:	5cd0      	ldrb	r0, [r2, r3]
 23fd6e2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fd6e6:	4258      	negs	r0, r3
 23fd6e8:	4158      	adcs	r0, r3
}
 23fd6ea:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fd6ec:	2000      	movs	r0, #0
 23fd6ee:	e7fc      	b.n	23fd6ea <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fd6f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd6f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd6f2:	2300      	movs	r3, #0
 23fd6f4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd6f6:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fd6fa:	480e      	ldr	r0, [pc, #56]	; (23fd734 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fd6fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fd700:	b1a9      	cbz	r1, 23fd72e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fd702:	780b      	ldrb	r3, [r1, #0]
 23fd704:	2b03      	cmp	r3, #3
 23fd706:	d006      	beq.n	23fd716 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fd708:	b98b      	cbnz	r3, 23fd72e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fd70a:	6813      	ldr	r3, [r2, #0]
 23fd70c:	6858      	ldr	r0, [r3, #4]
 23fd70e:	684b      	ldr	r3, [r1, #4]
 23fd710:	5cc3      	ldrb	r3, [r0, r3]
 23fd712:	2b6e      	cmp	r3, #110	; 0x6e
 23fd714:	d007      	beq.n	23fd726 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fd716:	6813      	ldr	r3, [r2, #0]
 23fd718:	684d      	ldr	r5, [r1, #4]
 23fd71a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fd71c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fd71e:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fd720:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fd722:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fd724:	60e3      	str	r3, [r4, #12]
 23fd726:	4611      	mov	r1, r2
 23fd728:	4620      	mov	r0, r4
 23fd72a:	f7ff ff6c 	bl	23fd606 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd72e:	4620      	mov	r0, r4
 23fd730:	bd38      	pop	{r3, r4, r5, pc}
 23fd732:	bf00      	nop
 23fd734:	023ffc7f 	.word	0x023ffc7f

023fd738 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fd738:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fd73a:	2500      	movs	r5, #0
 23fd73c:	460b      	mov	r3, r1
 23fd73e:	4604      	mov	r4, r0
 23fd740:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fd742:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fd746:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd74a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fd74e:	b14b      	cbz	r3, 23fd764 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fd750:	781a      	ldrb	r2, [r3, #0]
 23fd752:	2a01      	cmp	r2, #1
 23fd754:	d106      	bne.n	23fd764 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fd756:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fd75a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fd75c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fd75e:	6143      	str	r3, [r0, #20]
 23fd760:	f7ff ff51 	bl	23fd606 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fd764:	4620      	mov	r0, r4
 23fd766:	bd38      	pop	{r3, r4, r5, pc}

023fd768 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fd768:	b510      	push	{r4, lr}
    if (!n_) {
 23fd76a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fd76c:	4604      	mov	r4, r0
    if (!n_) {
 23fd76e:	b163      	cbz	r3, 23fd78a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fd770:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fd772:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fd774:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fd776:	3010      	adds	r0, #16
 23fd778:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fd77a:	6120      	str	r0, [r4, #16]
    --n_;
 23fd77c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fd77e:	b113      	cbz	r3, 23fd786 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fd780:	f7ff fef2 	bl	23fd568 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fd784:	60a0      	str	r0, [r4, #8]
    return true;
 23fd786:	2001      	movs	r0, #1
 23fd788:	e000      	b.n	23fd78c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fd78a:	4618      	mov	r0, r3
}
 23fd78c:	bd10      	pop	{r4, pc}

023fd78e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd78e:	b510      	push	{r4, lr}
    write('}');
 23fd790:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fd792:	4604      	mov	r4, r0
    write('}');
 23fd794:	f7ff ff49 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fd798:	2301      	movs	r3, #1
}
 23fd79a:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd79c:	7123      	strb	r3, [r4, #4]
}
 23fd79e:	bd10      	pop	{r4, pc}

023fd7a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fd7a0:	b508      	push	{r3, lr}
    switch (state_) {
 23fd7a2:	7903      	ldrb	r3, [r0, #4]
 23fd7a4:	2b01      	cmp	r3, #1
 23fd7a6:	d002      	beq.n	23fd7ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fd7a8:	2b02      	cmp	r3, #2
 23fd7aa:	d004      	beq.n	23fd7b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fd7ac:	bd08      	pop	{r3, pc}
        write(',');
 23fd7ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fd7b0:	f7ff ff3b 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
}
 23fd7b4:	e7fa      	b.n	23fd7ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fd7b6:	213a      	movs	r1, #58	; 0x3a
 23fd7b8:	e7fa      	b.n	23fd7b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fd7ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fd7ba:	b510      	push	{r4, lr}
 23fd7bc:	4604      	mov	r4, r0
    writeSeparator();
 23fd7be:	f7ff ffef 	bl	23fd7a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fd7c2:	4620      	mov	r0, r4
 23fd7c4:	217b      	movs	r1, #123	; 0x7b
 23fd7c6:	f7ff ff30 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fd7ca:	2300      	movs	r3, #0
}
 23fd7cc:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fd7ce:	7123      	strb	r3, [r4, #4]
}
 23fd7d0:	bd10      	pop	{r4, pc}
	...

023fd7d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fd7d4:	b513      	push	{r0, r1, r4, lr}
 23fd7d6:	4604      	mov	r4, r0
 23fd7d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd7da:	f7ff ffe1 	bl	23fd7a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fd7de:	6823      	ldr	r3, [r4, #0]
 23fd7e0:	4620      	mov	r0, r4
 23fd7e2:	68db      	ldr	r3, [r3, #12]
 23fd7e4:	9a01      	ldr	r2, [sp, #4]
 23fd7e6:	4903      	ldr	r1, [pc, #12]	; (23fd7f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fd7e8:	4798      	blx	r3
    state_ = NEXT;
 23fd7ea:	2301      	movs	r3, #1
}
 23fd7ec:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd7ee:	7123      	strb	r3, [r4, #4]
}
 23fd7f0:	b002      	add	sp, #8
 23fd7f2:	bd10      	pop	{r4, pc}
 23fd7f4:	023ff906 	.word	0x023ff906

023fd7f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fd7f8:	b513      	push	{r0, r1, r4, lr}
 23fd7fa:	4604      	mov	r4, r0
 23fd7fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fd7fe:	f7ff ffcf 	bl	23fd7a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fd802:	6823      	ldr	r3, [r4, #0]
 23fd804:	4620      	mov	r0, r4
 23fd806:	68db      	ldr	r3, [r3, #12]
 23fd808:	9a01      	ldr	r2, [sp, #4]
 23fd80a:	4903      	ldr	r1, [pc, #12]	; (23fd818 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fd80c:	4798      	blx	r3
    state_ = NEXT;
 23fd80e:	2301      	movs	r3, #1
}
 23fd810:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd812:	7123      	strb	r3, [r4, #4]
}
 23fd814:	b002      	add	sp, #8
 23fd816:	bd10      	pop	{r4, pc}
 23fd818:	023ffc1c 	.word	0x023ffc1c

023fd81c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd820:	460d      	mov	r5, r1
 23fd822:	4690      	mov	r8, r2
    write('"');
 23fd824:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fd826:	4604      	mov	r4, r0
 23fd828:	462f      	mov	r7, r5
    write('"');
 23fd82a:	f7ff fefe 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fd82e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fd8d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fd832:	44a8      	add	r8, r5
    while (s != end) {
 23fd834:	4547      	cmp	r7, r8
 23fd836:	46ba      	mov	sl, r7
 23fd838:	d03d      	beq.n	23fd8b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fd83a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fd83e:	2e22      	cmp	r6, #34	; 0x22
 23fd840:	d006      	beq.n	23fd850 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd842:	2e5c      	cmp	r6, #92	; 0x5c
 23fd844:	d004      	beq.n	23fd850 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fd846:	4630      	mov	r0, r6
 23fd848:	f001 fe70 	bl	23ff52c <isprint>
 23fd84c:	2800      	cmp	r0, #0
 23fd84e:	d1f1      	bne.n	23fd834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fd850:	6823      	ldr	r3, [r4, #0]
 23fd852:	4629      	mov	r1, r5
 23fd854:	4620      	mov	r0, r4
 23fd856:	689b      	ldr	r3, [r3, #8]
 23fd858:	ebaa 0205 	sub.w	r2, sl, r5
 23fd85c:	4798      	blx	r3
            write('\\');
 23fd85e:	215c      	movs	r1, #92	; 0x5c
 23fd860:	4620      	mov	r0, r4
 23fd862:	f7ff fee2 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fd866:	2e0d      	cmp	r6, #13
 23fd868:	d80a      	bhi.n	23fd880 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fd86a:	2e07      	cmp	r6, #7
 23fd86c:	d91c      	bls.n	23fd8a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd86e:	f1a6 0308 	sub.w	r3, r6, #8
 23fd872:	2b05      	cmp	r3, #5
 23fd874:	d818      	bhi.n	23fd8a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fd876:	e8df f003 	tbb	[pc, r3]
 23fd87a:	0f0d      	.short	0x0f0d
 23fd87c:	15131711 	.word	0x15131711
 23fd880:	2e22      	cmp	r6, #34	; 0x22
 23fd882:	d001      	beq.n	23fd888 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fd884:	2e5c      	cmp	r6, #92	; 0x5c
 23fd886:	d10f      	bne.n	23fd8a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fd888:	4631      	mov	r1, r6
                write('b');
 23fd88a:	4620      	mov	r0, r4
 23fd88c:	f7ff fecd 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fd890:	463d      	mov	r5, r7
    while (s != end) {
 23fd892:	e7cf      	b.n	23fd834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fd894:	2162      	movs	r1, #98	; 0x62
 23fd896:	e7f8      	b.n	23fd88a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fd898:	2174      	movs	r1, #116	; 0x74
 23fd89a:	e7f6      	b.n	23fd88a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fd89c:	216e      	movs	r1, #110	; 0x6e
 23fd89e:	e7f4      	b.n	23fd88a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fd8a0:	2166      	movs	r1, #102	; 0x66
 23fd8a2:	e7f2      	b.n	23fd88a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fd8a4:	2172      	movs	r1, #114	; 0x72
 23fd8a6:	e7f0      	b.n	23fd88a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fd8a8:	6823      	ldr	r3, [r4, #0]
 23fd8aa:	4632      	mov	r2, r6
 23fd8ac:	4649      	mov	r1, r9
 23fd8ae:	4620      	mov	r0, r4
 23fd8b0:	68db      	ldr	r3, [r3, #12]
 23fd8b2:	4798      	blx	r3
                break;
 23fd8b4:	e7ec      	b.n	23fd890 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fd8b6:	42bd      	cmp	r5, r7
 23fd8b8:	d005      	beq.n	23fd8c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fd8ba:	6823      	ldr	r3, [r4, #0]
 23fd8bc:	4629      	mov	r1, r5
 23fd8be:	4620      	mov	r0, r4
 23fd8c0:	689b      	ldr	r3, [r3, #8]
 23fd8c2:	1b7a      	subs	r2, r7, r5
 23fd8c4:	4798      	blx	r3
    }
    write('"');
 23fd8c6:	2122      	movs	r1, #34	; 0x22
 23fd8c8:	4620      	mov	r0, r4
 23fd8ca:	f7ff feae 	bl	23fd62a <_ZN5spark10JSONWriter5writeEc>
}
 23fd8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd8d2:	bf00      	nop
 23fd8d4:	023ffc1f 	.word	0x023ffc1f

023fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fd8d8:	b513      	push	{r0, r1, r4, lr}
 23fd8da:	4604      	mov	r4, r0
 23fd8dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd8e0:	f7ff ff5e 	bl	23fd7a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fd8e4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd8e8:	4620      	mov	r0, r4
 23fd8ea:	f7ff ff97 	bl	23fd81c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fd8ee:	2302      	movs	r3, #2
}
 23fd8f0:	4620      	mov	r0, r4
    state_ = VALUE;
 23fd8f2:	7123      	strb	r3, [r4, #4]
}
 23fd8f4:	b002      	add	sp, #8
 23fd8f6:	bd10      	pop	{r4, pc}

023fd8f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fd8f8:	b513      	push	{r0, r1, r4, lr}
 23fd8fa:	4604      	mov	r4, r0
 23fd8fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fd900:	f7ff ff4e 	bl	23fd7a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fd904:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fd908:	4620      	mov	r0, r4
 23fd90a:	f7ff ff87 	bl	23fd81c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fd90e:	2301      	movs	r3, #1
}
 23fd910:	4620      	mov	r0, r4
    state_ = NEXT;
 23fd912:	7123      	strb	r3, [r4, #4]
}
 23fd914:	b002      	add	sp, #8
 23fd916:	bd10      	pop	{r4, pc}

023fd918 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd918:	6880      	ldr	r0, [r0, #8]
 23fd91a:	6803      	ldr	r3, [r0, #0]
 23fd91c:	68db      	ldr	r3, [r3, #12]
 23fd91e:	4718      	bx	r3

023fd920 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd920:	4770      	bx	lr

023fd922 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd922:	4608      	mov	r0, r1
 23fd924:	b111      	cbz	r1, 23fd92c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd926:	680b      	ldr	r3, [r1, #0]
 23fd928:	685b      	ldr	r3, [r3, #4]
 23fd92a:	4718      	bx	r3
}
 23fd92c:	4770      	bx	lr

023fd92e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd92e:	4770      	bx	lr

023fd930 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd930:	4770      	bx	lr

023fd932 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd932:	4770      	bx	lr

023fd934 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd934:	4770      	bx	lr

023fd936 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd936:	b538      	push	{r3, r4, r5, lr}
 23fd938:	4604      	mov	r4, r0
 23fd93a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd93c:	6800      	ldr	r0, [r0, #0]
 23fd93e:	212e      	movs	r1, #46	; 0x2e
 23fd940:	f001 fe67 	bl	23ff612 <strchrnul>
    size = s - category;
 23fd944:	6823      	ldr	r3, [r4, #0]
 23fd946:	1ac3      	subs	r3, r0, r3
 23fd948:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd94a:	b123      	cbz	r3, 23fd956 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd94c:	7803      	ldrb	r3, [r0, #0]
 23fd94e:	b103      	cbz	r3, 23fd952 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd950:	3001      	adds	r0, #1
 23fd952:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd954:	6020      	str	r0, [r4, #0]
}
 23fd956:	4618      	mov	r0, r3
 23fd958:	bd38      	pop	{r3, r4, r5, pc}

023fd95a <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd95a:	b510      	push	{r4, lr}
 23fd95c:	4604      	mov	r4, r0
 23fd95e:	210c      	movs	r1, #12
 23fd960:	f7fd fa27 	bl	23fadb2 <_ZdlPvj>
 23fd964:	4620      	mov	r0, r4
 23fd966:	bd10      	pop	{r4, pc}

023fd968 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd968:	b510      	push	{r4, lr}
 23fd96a:	4604      	mov	r4, r0
 23fd96c:	2104      	movs	r1, #4
 23fd96e:	f7fd fa20 	bl	23fadb2 <_ZdlPvj>
 23fd972:	4620      	mov	r0, r4
 23fd974:	bd10      	pop	{r4, pc}

023fd976 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd976:	b510      	push	{r4, lr}
 23fd978:	4604      	mov	r4, r0
 23fd97a:	2104      	movs	r1, #4
 23fd97c:	f7fd fa19 	bl	23fadb2 <_ZdlPvj>
 23fd980:	4620      	mov	r0, r4
 23fd982:	bd10      	pop	{r4, pc}

023fd984 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd984:	f7fe bc3c 	b.w	23fc200 <os_mutex_recursive_lock>

023fd988 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd988:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd98a:	f7fd f9df 	bl	23fad4c <strcmp>
}
 23fd98e:	fab0 f080 	clz	r0, r0
 23fd992:	0940      	lsrs	r0, r0, #5
 23fd994:	bd08      	pop	{r3, pc}

023fd996 <__tcf_1>:
 23fd996:	4770      	bx	lr

023fd998 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd998:	b510      	push	{r4, lr}
 23fd99a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd99c:	f001 fb0e 	bl	23fefbc <_Z16_fetch_usbserialv>
 23fd9a0:	4284      	cmp	r4, r0
 23fd9a2:	d105      	bne.n	23fd9b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd9a4:	f001 fb0a 	bl	23fefbc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd9ac:	f001 bafa 	b.w	23fefa4 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd9b0:	f001 fcf8 	bl	23ff3a4 <_Z22__fetch_global_Serial1v>
 23fd9b4:	4284      	cmp	r4, r0
 23fd9b6:	d105      	bne.n	23fd9c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd9b8:	f001 fcf4 	bl	23ff3a4 <_Z22__fetch_global_Serial1v>
}
 23fd9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd9c0:	f001 ba93 	b.w	23feeea <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd9c4:	b12c      	cbz	r4, 23fd9d2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd9c6:	6823      	ldr	r3, [r4, #0]
 23fd9c8:	4620      	mov	r0, r4
}
 23fd9ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd9ce:	685b      	ldr	r3, [r3, #4]
 23fd9d0:	4718      	bx	r3
 23fd9d2:	bd10      	pop	{r4, pc}

023fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd9d4:	680b      	ldr	r3, [r1, #0]
 23fd9d6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd9d8:	684b      	ldr	r3, [r1, #4]
 23fd9da:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd9dc:	b113      	cbz	r3, 23fd9e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd9de:	685a      	ldr	r2, [r3, #4]
 23fd9e0:	3201      	adds	r2, #1
 23fd9e2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd9e4:	4770      	bx	lr

023fd9e6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd9e6:	b513      	push	{r0, r1, r4, lr}
 23fd9e8:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd9ea:	4608      	mov	r0, r1
 23fd9ec:	9101      	str	r1, [sp, #4]
 23fd9ee:	f7fd f9b7 	bl	23fad60 <strlen>
 23fd9f2:	4602      	mov	r2, r0
 23fd9f4:	4620      	mov	r0, r4
 23fd9f6:	9901      	ldr	r1, [sp, #4]
}
 23fd9f8:	b002      	add	sp, #8
 23fd9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd9fe:	f7ff bf7b 	b.w	23fd8f8 <_ZN5spark10JSONWriter5valueEPKcj>

023fda02 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fda02:	b513      	push	{r0, r1, r4, lr}
 23fda04:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fda06:	4608      	mov	r0, r1
 23fda08:	9101      	str	r1, [sp, #4]
 23fda0a:	f7fd f9a9 	bl	23fad60 <strlen>
 23fda0e:	4602      	mov	r2, r0
 23fda10:	4620      	mov	r0, r4
 23fda12:	6823      	ldr	r3, [r4, #0]
 23fda14:	9901      	ldr	r1, [sp, #4]
 23fda16:	68db      	ldr	r3, [r3, #12]
}
 23fda18:	b002      	add	sp, #8
 23fda1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fda1e:	4718      	bx	r3

023fda20 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fda20:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fda22:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fda24:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fda28:	2201      	movs	r2, #1
 23fda2a:	68db      	ldr	r3, [r3, #12]
 23fda2c:	f10d 0107 	add.w	r1, sp, #7
 23fda30:	4798      	blx	r3
}
 23fda32:	b003      	add	sp, #12
 23fda34:	f85d fb04 	ldr.w	pc, [sp], #4

023fda38 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fda38:	680a      	ldr	r2, [r1, #0]
 23fda3a:	b510      	push	{r4, lr}
 23fda3c:	6002      	str	r2, [r0, #0]
 23fda3e:	684a      	ldr	r2, [r1, #4]
 23fda40:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fda42:	2200      	movs	r2, #0
 23fda44:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fda48:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fda4a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda4c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fda4e:	6084      	str	r4, [r0, #8]
 23fda50:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda52:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fda54:	60c4      	str	r4, [r0, #12]
 23fda56:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda58:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fda5a:	6104      	str	r4, [r0, #16]
 23fda5c:	bd10      	pop	{r4, pc}
	...

023fda60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fda60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fda64:	f04f 0a14 	mov.w	sl, #20
 23fda68:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fda6c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fda6e:	4645      	mov	r5, r8
 23fda70:	fb0a f404 	mul.w	r4, sl, r4
 23fda74:	9300      	str	r3, [sp, #0]
 23fda76:	4b17      	ldr	r3, [pc, #92]	; (23fdad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fda78:	10a4      	asrs	r4, r4, #2
 23fda7a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fda7c:	2c00      	cmp	r4, #0
 23fda7e:	dd21      	ble.n	23fdac4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fda80:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fda82:	fb0a f006 	mul.w	r0, sl, r6
 23fda86:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fda8a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fda8e:	463a      	mov	r2, r7
 23fda90:	455f      	cmp	r7, fp
 23fda92:	bf28      	it	cs
 23fda94:	465a      	movcs	r2, fp
 23fda96:	5828      	ldr	r0, [r5, r0]
 23fda98:	9101      	str	r1, [sp, #4]
 23fda9a:	f001 fdea 	bl	23ff672 <strncmp>
                if (cmp == 0) {
 23fda9e:	2800      	cmp	r0, #0
 23fdaa0:	f04f 0301 	mov.w	r3, #1
 23fdaa4:	9901      	ldr	r1, [sp, #4]
 23fdaa6:	d10b      	bne.n	23fdac0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fdaa8:	455f      	cmp	r7, fp
 23fdaaa:	d103      	bne.n	23fdab4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fdaac:	9a00      	ldr	r2, [sp, #0]
 23fdaae:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdab0:	4634      	mov	r4, r6
 23fdab2:	e7e3      	b.n	23fda7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fdab4:	d9fc      	bls.n	23fdab0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fdab6:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fdab8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fdabc:	3e01      	subs	r6, #1
 23fdabe:	e7f7      	b.n	23fdab0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fdac0:	dbf9      	blt.n	23fdab6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fdac2:	e7f5      	b.n	23fdab0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fdac4:	eba5 0508 	sub.w	r5, r5, r8
}
 23fdac8:	4802      	ldr	r0, [pc, #8]	; (23fdad4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdaca:	10ad      	asrs	r5, r5, #2
 23fdacc:	4368      	muls	r0, r5
 23fdace:	b003      	add	sp, #12
 23fdad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdad4:	cccccccd 	.word	0xcccccccd

023fdad8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fdada:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fdadc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdade:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fdae0:	b303      	cbz	r3, 23fdb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fdae2:	b1f9      	cbz	r1, 23fdb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fdae4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fdae6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fdaea:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fdaec:	a903      	add	r1, sp, #12
 23fdaee:	a801      	add	r0, sp, #4
 23fdaf0:	f7ff ff21 	bl	23fd936 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdaf4:	4601      	mov	r1, r0
 23fdaf6:	b1a8      	cbz	r0, 23fdb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdaf8:	f10d 030b 	add.w	r3, sp, #11
 23fdafc:	4620      	mov	r0, r4
 23fdafe:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fdb00:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdb04:	f7ff ffac 	bl	23fda60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fdb08:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fdb0c:	b153      	cbz	r3, 23fdb24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fdb0e:	6823      	ldr	r3, [r4, #0]
 23fdb10:	2414      	movs	r4, #20
 23fdb12:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fdb16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fdb1a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fdb1c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fdb1e:	bfa8      	it	ge
 23fdb20:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fdb22:	e7e3      	b.n	23fdaec <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fdb24:	4628      	mov	r0, r5
 23fdb26:	b004      	add	sp, #16
 23fdb28:	bd70      	pop	{r4, r5, r6, pc}

023fdb2a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fdb2a:	b40e      	push	{r1, r2, r3}
 23fdb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdb2e:	b08c      	sub	sp, #48	; 0x30
 23fdb30:	af00      	add	r7, sp, #0
 23fdb32:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fdb36:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdb3a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdb3c:	462b      	mov	r3, r5
 23fdb3e:	2120      	movs	r1, #32
 23fdb40:	f107 0010 	add.w	r0, r7, #16
 23fdb44:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdb46:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdb48:	f7ff f854 	bl	23fcbf4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fdb4c:	281f      	cmp	r0, #31
 23fdb4e:	687a      	ldr	r2, [r7, #4]
 23fdb50:	d91a      	bls.n	23fdb88 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fdb52:	f100 0308 	add.w	r3, r0, #8
 23fdb56:	f023 0307 	bic.w	r3, r3, #7
        }
 23fdb5a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fdb5c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdb60:	1c41      	adds	r1, r0, #1
 23fdb62:	462b      	mov	r3, r5
 23fdb64:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdb66:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdb68:	f7ff f844 	bl	23fcbf4 <vsnprintf>
        if (n > 0) {
 23fdb6c:	1e02      	subs	r2, r0, #0
 23fdb6e:	dd04      	ble.n	23fdb7a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fdb70:	6823      	ldr	r3, [r4, #0]
 23fdb72:	4669      	mov	r1, sp
 23fdb74:	4620      	mov	r0, r4
 23fdb76:	68db      	ldr	r3, [r3, #12]
 23fdb78:	4798      	blx	r3
 23fdb7a:	46b5      	mov	sp, r6
}
 23fdb7c:	3730      	adds	r7, #48	; 0x30
 23fdb7e:	46bd      	mov	sp, r7
 23fdb80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdb84:	b003      	add	sp, #12
 23fdb86:	4770      	bx	lr
    } else if (n > 0) {
 23fdb88:	2800      	cmp	r0, #0
 23fdb8a:	d0f7      	beq.n	23fdb7c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fdb8c:	6823      	ldr	r3, [r4, #0]
 23fdb8e:	4602      	mov	r2, r0
 23fdb90:	68db      	ldr	r3, [r3, #12]
 23fdb92:	4620      	mov	r0, r4
 23fdb94:	f107 0110 	add.w	r1, r7, #16
 23fdb98:	4798      	blx	r3
}
 23fdb9a:	e7ef      	b.n	23fdb7c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fdb9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fdb9c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fdb9e:	4c08      	ldr	r4, [pc, #32]	; (23fdbc0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fdba0:	e8d4 3f8f 	ldab	r3, [r4]
 23fdba4:	07db      	lsls	r3, r3, #31
 23fdba6:	d409      	bmi.n	23fdbbc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdba8:	4620      	mov	r0, r4
 23fdbaa:	f7fd f911 	bl	23fadd0 <__cxa_guard_acquire>
 23fdbae:	b128      	cbz	r0, 23fdbbc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdbb0:	4620      	mov	r0, r4
 23fdbb2:	f7fd f912 	bl	23fadda <__cxa_guard_release>
 23fdbb6:	4803      	ldr	r0, [pc, #12]	; (23fdbc4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fdbb8:	f001 fcb2 	bl	23ff520 <atexit>
}
 23fdbbc:	4802      	ldr	r0, [pc, #8]	; (23fdbc8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fdbbe:	bd10      	pop	{r4, pc}
 23fdbc0:	1007ae54 	.word	0x1007ae54
 23fdbc4:	023fd92f 	.word	0x023fd92f
 23fdbc8:	1007ad0c 	.word	0x1007ad0c

023fdbcc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fdbcc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fdbce:	4c08      	ldr	r4, [pc, #32]	; (23fdbf0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fdbd0:	e8d4 3f8f 	ldab	r3, [r4]
 23fdbd4:	07db      	lsls	r3, r3, #31
 23fdbd6:	d409      	bmi.n	23fdbec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdbd8:	4620      	mov	r0, r4
 23fdbda:	f7fd f8f9 	bl	23fadd0 <__cxa_guard_acquire>
 23fdbde:	b128      	cbz	r0, 23fdbec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdbe0:	4620      	mov	r0, r4
 23fdbe2:	f7fd f8fa 	bl	23fadda <__cxa_guard_release>
 23fdbe6:	4803      	ldr	r0, [pc, #12]	; (23fdbf4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fdbe8:	f001 fc9a 	bl	23ff520 <atexit>
    return &factory;
}
 23fdbec:	4802      	ldr	r0, [pc, #8]	; (23fdbf8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fdbee:	bd10      	pop	{r4, pc}
 23fdbf0:	1007ae58 	.word	0x1007ae58
 23fdbf4:	023fd997 	.word	0x023fd997
 23fdbf8:	1007ad10 	.word	0x1007ad10

023fdbfc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fdbfc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fdbfe:	2500      	movs	r5, #0
 23fdc00:	4604      	mov	r4, r0
 23fdc02:	e9c0 5500 	strd	r5, r5, [r0]
 23fdc06:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fdc0a:	6085      	str	r5, [r0, #8]
 23fdc0c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fdc0e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fdc12:	f7fe fad9 	bl	23fc1c8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fdc16:	f7ff ffc1 	bl	23fdb9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fdc1a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdc1c:	f7ff ffd6 	bl	23fdbcc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fdc20:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdc22:	6220      	str	r0, [r4, #32]
}
 23fdc24:	4620      	mov	r0, r4
 23fdc26:	bd38      	pop	{r3, r4, r5, pc}

023fdc28 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fdc28:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fdc2a:	4c0a      	ldr	r4, [pc, #40]	; (23fdc54 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fdc2c:	e8d4 3f8f 	ldab	r3, [r4]
 23fdc30:	07db      	lsls	r3, r3, #31
 23fdc32:	d40c      	bmi.n	23fdc4e <_ZN5spark10LogManager8instanceEv+0x26>
 23fdc34:	4620      	mov	r0, r4
 23fdc36:	f7fd f8cb 	bl	23fadd0 <__cxa_guard_acquire>
 23fdc3a:	b140      	cbz	r0, 23fdc4e <_ZN5spark10LogManager8instanceEv+0x26>
 23fdc3c:	4806      	ldr	r0, [pc, #24]	; (23fdc58 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdc3e:	f7ff ffdd 	bl	23fdbfc <_ZN5spark10LogManagerC1Ev>
 23fdc42:	4620      	mov	r0, r4
 23fdc44:	f7fd f8c9 	bl	23fadda <__cxa_guard_release>
 23fdc48:	4804      	ldr	r0, [pc, #16]	; (23fdc5c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fdc4a:	f001 fc69 	bl	23ff520 <atexit>
    return &mgr;
}
 23fdc4e:	4802      	ldr	r0, [pc, #8]	; (23fdc58 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdc50:	bd10      	pop	{r4, pc}
 23fdc52:	bf00      	nop
 23fdc54:	1007ae50 	.word	0x1007ae50
 23fdc58:	1007ae60 	.word	0x1007ae60
 23fdc5c:	023fe179 	.word	0x023fe179

023fdc60 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fdc60:	2300      	movs	r3, #0
 23fdc62:	4a02      	ldr	r2, [pc, #8]	; (23fdc6c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fdc64:	4902      	ldr	r1, [pc, #8]	; (23fdc70 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fdc66:	4803      	ldr	r0, [pc, #12]	; (23fdc74 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fdc68:	f7fe bdf6 	b.w	23fc858 <log_set_callbacks>
 23fdc6c:	023fdf61 	.word	0x023fdf61
 23fdc70:	023fdeed 	.word	0x023fdeed
 23fdc74:	023fde6d 	.word	0x023fde6d

023fdc78 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fdc78:	2300      	movs	r3, #0
 23fdc7a:	461a      	mov	r2, r3
 23fdc7c:	4619      	mov	r1, r3
 23fdc7e:	4618      	mov	r0, r3
 23fdc80:	f7fe bdea 	b.w	23fc858 <log_set_callbacks>

023fdc84 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fdc84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdc86:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fdc88:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fdc8a:	4668      	mov	r0, sp
 23fdc8c:	f7ff fea2 	bl	23fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdc90:	466a      	mov	r2, sp
 23fdc92:	4629      	mov	r1, r5
 23fdc94:	4620      	mov	r0, r4
 23fdc96:	f7ff fd4f 	bl	23fd738 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fdc9a:	a801      	add	r0, sp, #4
 23fdc9c:	f7fd f9a4 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdca0:	4620      	mov	r0, r4
 23fdca2:	b003      	add	sp, #12
 23fdca4:	bd30      	pop	{r4, r5, pc}

023fdca6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fdca6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdca8:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fdcaa:	68cd      	ldr	r5, [r1, #12]
 23fdcac:	4668      	mov	r0, sp
 23fdcae:	f7ff fe91 	bl	23fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdcb2:	466a      	mov	r2, sp
 23fdcb4:	4629      	mov	r1, r5
 23fdcb6:	4620      	mov	r0, r4
 23fdcb8:	f7ff fd1a 	bl	23fd6f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fdcbc:	a801      	add	r0, sp, #4
 23fdcbe:	f7fd f993 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdcc2:	4620      	mov	r0, r4
 23fdcc4:	b003      	add	sp, #12
 23fdcc6:	bd30      	pop	{r4, r5, pc}

023fdcc8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fdcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdcca:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fdccc:	690d      	ldr	r5, [r1, #16]
 23fdcce:	4668      	mov	r0, sp
 23fdcd0:	f7ff fe80 	bl	23fd9d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdcd4:	466a      	mov	r2, sp
 23fdcd6:	4629      	mov	r1, r5
 23fdcd8:	4620      	mov	r0, r4
 23fdcda:	f7ff fcb2 	bl	23fd642 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fdcde:	a801      	add	r0, sp, #4
 23fdce0:	f7fd f982 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdce4:	4620      	mov	r0, r4
 23fdce6:	b003      	add	sp, #12
 23fdce8:	bd30      	pop	{r4, r5, pc}
	...

023fdcec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fdcec:	b570      	push	{r4, r5, r6, lr}
 23fdcee:	b08a      	sub	sp, #40	; 0x28
 23fdcf0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fdcf2:	4601      	mov	r1, r0
 23fdcf4:	a804      	add	r0, sp, #16
 23fdcf6:	f7ff ffc5 	bl	23fdc84 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fdcfa:	4e14      	ldr	r6, [pc, #80]	; (23fdd4c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fdcfc:	a804      	add	r0, sp, #16
 23fdcfe:	f7ff fd33 	bl	23fd768 <_ZN5spark18JSONObjectIterator4nextEv>
 23fdd02:	b1e8      	cbz	r0, 23fdd40 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fdd04:	4668      	mov	r0, sp
 23fdd06:	a904      	add	r1, sp, #16
 23fdd08:	f7ff ffcd 	bl	23fdca6 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fdd0c:	4631      	mov	r1, r6
 23fdd0e:	9802      	ldr	r0, [sp, #8]
 23fdd10:	f7ff fe3a 	bl	23fd988 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fdd14:	4604      	mov	r4, r0
 23fdd16:	b110      	cbz	r0, 23fdd1e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fdd18:	1e2c      	subs	r4, r5, #0
 23fdd1a:	bf18      	it	ne
 23fdd1c:	2401      	movne	r4, #1
 23fdd1e:	a801      	add	r0, sp, #4
 23fdd20:	f7fd f962 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdd24:	2c00      	cmp	r4, #0
 23fdd26:	d0e9      	beq.n	23fdcfc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fdd28:	4668      	mov	r0, sp
 23fdd2a:	a904      	add	r1, sp, #16
 23fdd2c:	f7ff ffcc 	bl	23fdcc8 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fdd30:	4668      	mov	r0, sp
 23fdd32:	f7ff fcbc 	bl	23fd6ae <_ZNK5spark9JSONValue5toIntEv>
 23fdd36:	6028      	str	r0, [r5, #0]
 23fdd38:	a801      	add	r0, sp, #4
 23fdd3a:	f7fd f955 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdd3e:	e7dd      	b.n	23fdcfc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fdd40:	a805      	add	r0, sp, #20
 23fdd42:	f7fd f951 	bl	23fafe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdd46:	b00a      	add	sp, #40	; 0x28
 23fdd48:	bd70      	pop	{r4, r5, r6, pc}
 23fdd4a:	bf00      	nop
 23fdd4c:	023ffc25 	.word	0x023ffc25

023fdd50 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fdd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdd52:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fdd54:	4913      	ldr	r1, [pc, #76]	; (23fdda4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fdd56:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fdd58:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fdd5a:	f7fc fff7 	bl	23fad4c <strcmp>
 23fdd5e:	b950      	cbnz	r0, 23fdd76 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fdd60:	f001 f92c 	bl	23fefbc <_Z16_fetch_usbserialv>
 23fdd64:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fdd68:	f001 f918 	bl	23fef9c <_ZN9USBSerial5beginEl>
}
 23fdd6c:	b003      	add	sp, #12
 23fdd6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fdd72:	f001 b923 	b.w	23fefbc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fdd76:	4620      	mov	r0, r4
 23fdd78:	490b      	ldr	r1, [pc, #44]	; (23fdda8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fdd7a:	f7fc ffe7 	bl	23fad4c <strcmp>
 23fdd7e:	b978      	cbnz	r0, 23fdda0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fdd80:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fdd84:	a901      	add	r1, sp, #4
 23fdd86:	4628      	mov	r0, r5
        int baud = 9600;
 23fdd88:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fdd8a:	f7ff ffaf 	bl	23fdcec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fdd8e:	f001 fb09 	bl	23ff3a4 <_Z22__fetch_global_Serial1v>
 23fdd92:	9901      	ldr	r1, [sp, #4]
 23fdd94:	f001 f8a6 	bl	23feee4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fdd98:	f001 fb04 	bl	23ff3a4 <_Z22__fetch_global_Serial1v>
}
 23fdd9c:	b003      	add	sp, #12
 23fdd9e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fdda0:	2000      	movs	r0, #0
 23fdda2:	e7fb      	b.n	23fdd9c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fdda4:	023ffc2a 	.word	0x023ffc2a
 23fdda8:	023ffc31 	.word	0x023ffc31

023fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fddac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fddae:	2614      	movs	r6, #20
 23fddb0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fddb4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fddb6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fddba:	42ae      	cmp	r6, r5
 23fddbc:	d005      	beq.n	23fddca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fddbe:	f105 0008 	add.w	r0, r5, #8
 23fddc2:	f7ff fff3 	bl	23fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fddc6:	3514      	adds	r5, #20
 23fddc8:	e7f7      	b.n	23fddba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fddca:	6820      	ldr	r0, [r4, #0]
 23fddcc:	f7fe fee8 	bl	23fcba0 <free>
}
 23fddd0:	4620      	mov	r0, r4
 23fddd2:	bd70      	pop	{r4, r5, r6, pc}

023fddd4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fddd4:	b510      	push	{r4, lr}
 23fddd6:	4604      	mov	r4, r0
 23fddd8:	300c      	adds	r0, #12
 23fddda:	f7ff ffe7 	bl	23fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fddde:	4620      	mov	r0, r4
 23fdde0:	f7fe ff9e 	bl	23fcd20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdde4:	4620      	mov	r0, r4
 23fdde6:	bd10      	pop	{r4, pc}

023fdde8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fdde8:	b510      	push	{r4, lr}
 23fddea:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fddec:	4b03      	ldr	r3, [pc, #12]	; (23fddfc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fddee:	f840 3b04 	str.w	r3, [r0], #4
 23fddf2:	f7ff ffef 	bl	23fddd4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fddf6:	4620      	mov	r0, r4
 23fddf8:	bd10      	pop	{r4, pc}
 23fddfa:	bf00      	nop
 23fddfc:	023ffb20 	.word	0x023ffb20

023fde00 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fde00:	b510      	push	{r4, lr}
 23fde02:	4604      	mov	r4, r0
 23fde04:	f7ff fff0 	bl	23fdde8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fde08:	4620      	mov	r0, r4
 23fde0a:	2124      	movs	r1, #36	; 0x24
 23fde0c:	f7fc ffd1 	bl	23fadb2 <_ZdlPvj>
 23fde10:	4620      	mov	r0, r4
 23fde12:	bd10      	pop	{r4, pc}

023fde14 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fde14:	b510      	push	{r4, lr}
 23fde16:	4604      	mov	r4, r0
 23fde18:	4b02      	ldr	r3, [pc, #8]	; (23fde24 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fde1a:	6003      	str	r3, [r0, #0]
 23fde1c:	f7ff ffe4 	bl	23fdde8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fde20:	4620      	mov	r0, r4
 23fde22:	bd10      	pop	{r4, pc}
 23fde24:	023ffccc 	.word	0x023ffccc

023fde28 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fde28:	b510      	push	{r4, lr}
 23fde2a:	4604      	mov	r4, r0
 23fde2c:	f7ff fff2 	bl	23fde14 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fde30:	4620      	mov	r0, r4
 23fde32:	2124      	movs	r1, #36	; 0x24
 23fde34:	f7fc ffbd 	bl	23fadb2 <_ZdlPvj>
 23fde38:	4620      	mov	r0, r4
 23fde3a:	bd10      	pop	{r4, pc}

023fde3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fde3c:	2200      	movs	r2, #0
 23fde3e:	e9c0 2200 	strd	r2, r2, [r0]
 23fde42:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fde44:	b510      	push	{r4, lr}
 23fde46:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde48:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fde4a:	6004      	str	r4, [r0, #0]
 23fde4c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde4e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fde50:	6044      	str	r4, [r0, #4]
 23fde52:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde54:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fde56:	6084      	str	r4, [r0, #8]
}
 23fde58:	bd10      	pop	{r4, pc}

023fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fde5a:	b510      	push	{r4, lr}
 23fde5c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fde5e:	6803      	ldr	r3, [r0, #0]
 23fde60:	6818      	ldr	r0, [r3, #0]
 23fde62:	f7fe f9db 	bl	23fc21c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fde66:	4620      	mov	r0, r4
 23fde68:	bd10      	pop	{r4, pc}
	...

023fde6c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fde6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fde70:	b087      	sub	sp, #28
 23fde72:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fde74:	4b1c      	ldr	r3, [pc, #112]	; (23fdee8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fde76:	4680      	mov	r8, r0
 23fde78:	685b      	ldr	r3, [r3, #4]
 23fde7a:	4689      	mov	r9, r1
 23fde7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fde80:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fde82:	b96b      	cbnz	r3, 23fdea0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fde84:	f7ff fed0 	bl	23fdc28 <_ZN5spark10LogManager8instanceEv>
 23fde88:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fde8a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fde8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fde90:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fde92:	f7ff fd77 	bl	23fd984 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fde96:	7b23      	ldrb	r3, [r4, #12]
 23fde98:	b12b      	cbz	r3, 23fdea6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fde9a:	a805      	add	r0, sp, #20
 23fde9c:	f7ff ffdd 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdea0:	b007      	add	sp, #28
 23fdea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdea6:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdea8:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdeac:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdeae:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdeb2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdeb6:	45aa      	cmp	sl, r5
 23fdeb8:	d012      	beq.n	23fdee0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdeba:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdebe:	4631      	mov	r1, r6
 23fdec0:	1d38      	adds	r0, r7, #4
 23fdec2:	f7ff fe09 	bl	23fdad8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdec6:	4581      	cmp	r9, r0
 23fdec8:	d3f5      	bcc.n	23fdeb6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdeca:	9a03      	ldr	r2, [sp, #12]
 23fdecc:	683b      	ldr	r3, [r7, #0]
 23fdece:	9200      	str	r2, [sp, #0]
 23fded0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fded4:	464a      	mov	r2, r9
 23fded6:	4633      	mov	r3, r6
 23fded8:	4641      	mov	r1, r8
 23fdeda:	4638      	mov	r0, r7
 23fdedc:	47d8      	blx	fp
 23fdede:	e7ea      	b.n	23fdeb6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdee0:	2300      	movs	r3, #0
 23fdee2:	7323      	strb	r3, [r4, #12]
 23fdee4:	e7d9      	b.n	23fde9a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdee6:	bf00      	nop
 23fdee8:	e000ed00 	.word	0xe000ed00

023fdeec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdeec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdef0:	469b      	mov	fp, r3
 23fdef2:	4b1a      	ldr	r3, [pc, #104]	; (23fdf5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdef4:	4680      	mov	r8, r0
 23fdef6:	685b      	ldr	r3, [r3, #4]
 23fdef8:	4689      	mov	r9, r1
 23fdefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdefe:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdf00:	b96b      	cbnz	r3, 23fdf1e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdf02:	f7ff fe91 	bl	23fdc28 <_ZN5spark10LogManager8instanceEv>
 23fdf06:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdf08:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdf0c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdf0e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdf10:	f7ff fd38 	bl	23fd984 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdf14:	7b23      	ldrb	r3, [r4, #12]
 23fdf16:	b12b      	cbz	r3, 23fdf24 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdf18:	a801      	add	r0, sp, #4
 23fdf1a:	f7ff ff9e 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdf1e:	b003      	add	sp, #12
 23fdf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdf24:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdf26:	b2f6      	uxtb	r6, r6
 23fdf28:	7323      	strb	r3, [r4, #12]
 23fdf2a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdf2e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdf32:	4555      	cmp	r5, sl
 23fdf34:	d00e      	beq.n	23fdf54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdf36:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdf3a:	4659      	mov	r1, fp
 23fdf3c:	1d38      	adds	r0, r7, #4
 23fdf3e:	f7ff fdcb 	bl	23fdad8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdf42:	4286      	cmp	r6, r0
 23fdf44:	d3f5      	bcc.n	23fdf32 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdf46:	683b      	ldr	r3, [r7, #0]
 23fdf48:	464a      	mov	r2, r9
 23fdf4a:	4641      	mov	r1, r8
 23fdf4c:	4638      	mov	r0, r7
 23fdf4e:	68db      	ldr	r3, [r3, #12]
 23fdf50:	4798      	blx	r3
 23fdf52:	e7ee      	b.n	23fdf32 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fdf54:	2300      	movs	r3, #0
 23fdf56:	7323      	strb	r3, [r4, #12]
 23fdf58:	e7de      	b.n	23fdf18 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fdf5a:	bf00      	nop
 23fdf5c:	e000ed00 	.word	0xe000ed00

023fdf60 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fdf60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fdf64:	4b16      	ldr	r3, [pc, #88]	; (23fdfc0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fdf66:	4605      	mov	r5, r0
 23fdf68:	685b      	ldr	r3, [r3, #4]
 23fdf6a:	460f      	mov	r7, r1
 23fdf6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fdf70:	bb1b      	cbnz	r3, 23fdfba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fdf72:	f7ff fe59 	bl	23fdc28 <_ZN5spark10LogManager8instanceEv>
 23fdf76:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdf78:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdf7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdf7e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdf80:	f7ff fd00 	bl	23fd984 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fdf84:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fdf88:	2446      	movs	r4, #70	; 0x46
 23fdf8a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdf8e:	45b0      	cmp	r8, r6
 23fdf90:	d109      	bne.n	23fdfa6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fdf92:	a801      	add	r0, sp, #4
 23fdf94:	f7ff ff61 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fdf98:	42a5      	cmp	r5, r4
 23fdf9a:	bfb4      	ite	lt
 23fdf9c:	2000      	movlt	r0, #0
 23fdf9e:	2001      	movge	r0, #1
}
 23fdfa0:	b002      	add	sp, #8
 23fdfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fdfa6:	f856 0b04 	ldr.w	r0, [r6], #4
 23fdfaa:	4639      	mov	r1, r7
 23fdfac:	3004      	adds	r0, #4
 23fdfae:	f7ff fd93 	bl	23fdad8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fdfb2:	4284      	cmp	r4, r0
 23fdfb4:	bfa8      	it	ge
 23fdfb6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fdfb8:	e7e9      	b.n	23fdf8e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fdfba:	2000      	movs	r0, #0
 23fdfbc:	e7f0      	b.n	23fdfa0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fdfbe:	bf00      	nop
 23fdfc0:	e000ed00 	.word	0xe000ed00

023fdfc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdfc6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fdfca:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdfcc:	4604      	mov	r4, r0
 23fdfce:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdfd0:	db0d      	blt.n	23fdfee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fdfd2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fdfd4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdfd6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdfd8:	dd04      	ble.n	23fdfe4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fdfda:	00b9      	lsls	r1, r7, #2
 23fdfdc:	f7fe fdee 	bl	23fcbbc <realloc>
            if (!d) {
 23fdfe0:	b918      	cbnz	r0, 23fdfea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fdfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fdfe4:	f7fe fddc 	bl	23fcba0 <free>
        T* d = nullptr;
 23fdfe8:	2000      	movs	r0, #0
        data_ = d;
 23fdfea:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdfec:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fdfee:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fdff0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdff2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fdff6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdff8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fdffc:	1d08      	adds	r0, r1, #4
 23fdffe:	f001 faaa 	bl	23ff556 <memmove>
    new(p) T(std::move(value));
 23fe002:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe006:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe008:	2001      	movs	r0, #1
    ++size_;
 23fe00a:	3301      	adds	r3, #1
 23fe00c:	6063      	str	r3, [r4, #4]
    return true;
 23fe00e:	e7e8      	b.n	23fdfe2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe010 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe012:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe014:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe018:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe01a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe01c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe01e:	f7ff fcb1 	bl	23fd984 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe022:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe026:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe02a:	4293      	cmp	r3, r2
 23fe02c:	4619      	mov	r1, r3
 23fe02e:	d00a      	beq.n	23fe046 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe030:	6809      	ldr	r1, [r1, #0]
 23fe032:	3304      	adds	r3, #4
 23fe034:	42a9      	cmp	r1, r5
 23fe036:	d1f8      	bne.n	23fe02a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe038:	a801      	add	r0, sp, #4
 23fe03a:	f7ff ff0e 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe03e:	2500      	movs	r5, #0
}
 23fe040:	4628      	mov	r0, r5
 23fe042:	b003      	add	sp, #12
 23fe044:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe046:	4629      	mov	r1, r5
 23fe048:	4620      	mov	r0, r4
 23fe04a:	f7ff ffbb 	bl	23fdfc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe04e:	4605      	mov	r5, r0
 23fe050:	2800      	cmp	r0, #0
 23fe052:	d0f1      	beq.n	23fe038 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe054:	6863      	ldr	r3, [r4, #4]
 23fe056:	2b01      	cmp	r3, #1
 23fe058:	d101      	bne.n	23fe05e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe05a:	f7ff fe01 	bl	23fdc60 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe05e:	a801      	add	r0, sp, #4
 23fe060:	f7ff fefb 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe064:	e7ec      	b.n	23fe040 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe066 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe066:	460b      	mov	r3, r1
 23fe068:	b570      	push	{r4, r5, r6, lr}
 23fe06a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe06c:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe070:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe074:	4282      	cmp	r2, r0
 23fe076:	d00f      	beq.n	23fe098 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe078:	4601      	mov	r1, r0
            if (*p == value) {
 23fe07a:	681d      	ldr	r5, [r3, #0]
 23fe07c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe080:	42ae      	cmp	r6, r5
 23fe082:	d107      	bne.n	23fe094 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe084:	1a52      	subs	r2, r2, r1
 23fe086:	f001 fa66 	bl	23ff556 <memmove>
    return true;
 23fe08a:	2001      	movs	r0, #1
    --size_;
 23fe08c:	6863      	ldr	r3, [r4, #4]
 23fe08e:	3b01      	subs	r3, #1
 23fe090:	6063      	str	r3, [r4, #4]
}
 23fe092:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe094:	4608      	mov	r0, r1
 23fe096:	e7ed      	b.n	23fe074 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe098:	2000      	movs	r0, #0
 23fe09a:	e7fa      	b.n	23fe092 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe09c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe09c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe09e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe0a0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe0a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe0a6:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe0a8:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe0aa:	f7ff fc6b 	bl	23fd984 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe0ae:	4620      	mov	r0, r4
 23fe0b0:	a901      	add	r1, sp, #4
 23fe0b2:	f7ff ffd8 	bl	23fe066 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe0b6:	b118      	cbz	r0, 23fe0c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe0b8:	6863      	ldr	r3, [r4, #4]
 23fe0ba:	b90b      	cbnz	r3, 23fe0c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe0bc:	f7ff fddc 	bl	23fdc78 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe0c0:	a803      	add	r0, sp, #12
 23fe0c2:	f7ff feca 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe0c6:	b004      	add	sp, #16
 23fe0c8:	bd10      	pop	{r4, pc}

023fe0ca <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe0ca:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe0cc:	b570      	push	{r4, r5, r6, lr}
 23fe0ce:	4604      	mov	r4, r0
 23fe0d0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe0d4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe0d8:	42ae      	cmp	r6, r5
 23fe0da:	d015      	beq.n	23fe108 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe0dc:	4620      	mov	r0, r4
 23fe0de:	f105 0110 	add.w	r1, r5, #16
 23fe0e2:	f7ff ffc0 	bl	23fe066 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe0e6:	6863      	ldr	r3, [r4, #4]
 23fe0e8:	b90b      	cbnz	r3, 23fe0ee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe0ea:	f7ff fdc5 	bl	23fdc78 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe0ee:	69e0      	ldr	r0, [r4, #28]
 23fe0f0:	6929      	ldr	r1, [r5, #16]
 23fe0f2:	6803      	ldr	r3, [r0, #0]
 23fe0f4:	68db      	ldr	r3, [r3, #12]
 23fe0f6:	4798      	blx	r3
        if (h.stream) {
 23fe0f8:	6969      	ldr	r1, [r5, #20]
 23fe0fa:	b119      	cbz	r1, 23fe104 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe0fc:	6a20      	ldr	r0, [r4, #32]
 23fe0fe:	6803      	ldr	r3, [r0, #0]
 23fe100:	68db      	ldr	r3, [r3, #12]
 23fe102:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe104:	3518      	adds	r5, #24
 23fe106:	e7e7      	b.n	23fe0d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe108:	2618      	movs	r6, #24
 23fe10a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe10e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe112:	42ae      	cmp	r6, r5
 23fe114:	d004      	beq.n	23fe120 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe116:	4628      	mov	r0, r5
 23fe118:	f000 fd59 	bl	23febce <_ZN6StringD1Ev>
 23fe11c:	3518      	adds	r5, #24
 23fe11e:	e7f8      	b.n	23fe112 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe120:	2300      	movs	r3, #0
 23fe122:	6163      	str	r3, [r4, #20]
}
 23fe124:	bd70      	pop	{r4, r5, r6, pc}

023fe126 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe128:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe12a:	f7ff fda5 	bl	23fdc78 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe12e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe132:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe134:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe136:	f7ff fc25 	bl	23fd984 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe13a:	4620      	mov	r0, r4
 23fe13c:	f7ff ffc5 	bl	23fe0ca <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe140:	a801      	add	r0, sp, #4
 23fe142:	f7ff fe8a 	bl	23fde5a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe146:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe148:	b108      	cbz	r0, 23fe14e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe14a:	f7fe f84b 	bl	23fc1e4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe14e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe152:	2618      	movs	r6, #24
 23fe154:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe158:	42ae      	cmp	r6, r5
 23fe15a:	d004      	beq.n	23fe166 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe15c:	4628      	mov	r0, r5
 23fe15e:	f000 fd36 	bl	23febce <_ZN6StringD1Ev>
 23fe162:	3518      	adds	r5, #24
 23fe164:	e7f8      	b.n	23fe158 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe166:	6920      	ldr	r0, [r4, #16]
 23fe168:	f7fe fd1a 	bl	23fcba0 <free>
 23fe16c:	6820      	ldr	r0, [r4, #0]
 23fe16e:	f7fe fd17 	bl	23fcba0 <free>
}
 23fe172:	4620      	mov	r0, r4
 23fe174:	b002      	add	sp, #8
 23fe176:	bd70      	pop	{r4, r5, r6, pc}

023fe178 <__tcf_2>:
    static LogManager mgr;
 23fe178:	4801      	ldr	r0, [pc, #4]	; (23fe180 <__tcf_2+0x8>)
 23fe17a:	f7ff bfd4 	b.w	23fe126 <_ZN5spark10LogManagerD1Ev>
 23fe17e:	bf00      	nop
 23fe180:	1007ae60 	.word	0x1007ae60

023fe184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe184:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe188:	4604      	mov	r4, r0
 23fe18a:	460d      	mov	r5, r1
 23fe18c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe18e:	d915      	bls.n	23fe1bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe190:	4290      	cmp	r0, r2
 23fe192:	d214      	bcs.n	23fe1be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe194:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe198:	1a75      	subs	r5, r6, r1
 23fe19a:	f1a1 0714 	sub.w	r7, r1, #20
 23fe19e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe1a0:	42b7      	cmp	r7, r6
 23fe1a2:	d01a      	beq.n	23fe1da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe1a4:	b11c      	cbz	r4, 23fe1ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe1a6:	4631      	mov	r1, r6
 23fe1a8:	4620      	mov	r0, r4
 23fe1aa:	f7ff fc45 	bl	23fda38 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe1ae:	f106 0008 	add.w	r0, r6, #8
 23fe1b2:	f7ff fdfb 	bl	23fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe1b6:	3e14      	subs	r6, #20
 23fe1b8:	3c14      	subs	r4, #20
 23fe1ba:	e7f1      	b.n	23fe1a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe1bc:	d00d      	beq.n	23fe1da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe1be:	42b5      	cmp	r5, r6
 23fe1c0:	d00b      	beq.n	23fe1da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe1c2:	b11c      	cbz	r4, 23fe1cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe1c4:	4629      	mov	r1, r5
 23fe1c6:	4620      	mov	r0, r4
 23fe1c8:	f7ff fc36 	bl	23fda38 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe1cc:	f105 0008 	add.w	r0, r5, #8
 23fe1d0:	f7ff fdec 	bl	23fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe1d4:	3514      	adds	r5, #20
 23fe1d6:	3414      	adds	r4, #20
 23fe1d8:	e7f1      	b.n	23fe1be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe1dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe1dc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe1e0:	4604      	mov	r4, r0
 23fe1e2:	460d      	mov	r5, r1
 23fe1e4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe1e6:	d914      	bls.n	23fe212 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe1e8:	4290      	cmp	r0, r2
 23fe1ea:	d213      	bcs.n	23fe214 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe1ec:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe1f0:	1a75      	subs	r5, r6, r1
 23fe1f2:	f1a1 0710 	sub.w	r7, r1, #16
 23fe1f6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe1f8:	42b7      	cmp	r7, r6
 23fe1fa:	d018      	beq.n	23fe22e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe1fc:	b11c      	cbz	r4, 23fe206 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe1fe:	4631      	mov	r1, r6
 23fe200:	4620      	mov	r0, r4
 23fe202:	f000 fd60 	bl	23fecc6 <_ZN6StringC1EOS_>
                end->~T();
 23fe206:	4630      	mov	r0, r6
 23fe208:	f000 fce1 	bl	23febce <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe20c:	3e10      	subs	r6, #16
 23fe20e:	3c10      	subs	r4, #16
 23fe210:	e7f2      	b.n	23fe1f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe212:	d00c      	beq.n	23fe22e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe214:	42b5      	cmp	r5, r6
 23fe216:	d00a      	beq.n	23fe22e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe218:	b11c      	cbz	r4, 23fe222 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe21a:	4629      	mov	r1, r5
 23fe21c:	4620      	mov	r0, r4
 23fe21e:	f000 fd52 	bl	23fecc6 <_ZN6StringC1EOS_>
                p->~T();
 23fe222:	4628      	mov	r0, r5
 23fe224:	f000 fcd3 	bl	23febce <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe228:	3510      	adds	r5, #16
 23fe22a:	3410      	adds	r4, #16
 23fe22c:	e7f2      	b.n	23fe214 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe230:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe232:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe234:	4605      	mov	r5, r0
        if (n > 0) {
 23fe236:	dd11      	ble.n	23fe25c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe238:	0130      	lsls	r0, r6, #4
 23fe23a:	f7fe fca3 	bl	23fcb84 <malloc>
            if (!d) {
 23fe23e:	4604      	mov	r4, r0
 23fe240:	b158      	cbz	r0, 23fe25a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe242:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe246:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe24a:	f7ff ffc7 	bl	23fe1dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe24e:	6828      	ldr	r0, [r5, #0]
 23fe250:	f7fe fca6 	bl	23fcba0 <free>
        return true;
 23fe254:	2001      	movs	r0, #1
        data_ = d;
 23fe256:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe258:	60ae      	str	r6, [r5, #8]
    }
 23fe25a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe25c:	2400      	movs	r4, #0
 23fe25e:	e7f6      	b.n	23fe24e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe260 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe264:	4690      	mov	r8, r2
        capacity_(0) {
 23fe266:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe268:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe26a:	b095      	sub	sp, #84	; 0x54
 23fe26c:	9103      	str	r1, [sp, #12]
    return size_;
 23fe26e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe272:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe274:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe276:	e9c0 3300 	strd	r3, r3, [r0]
 23fe27a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe282:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe286:	7602      	strb	r2, [r0, #24]
 23fe288:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe28a:	dc23      	bgt.n	23fe2d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe28c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe290:	2314      	movs	r3, #20
 23fe292:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe296:	42af      	cmp	r7, r5
 23fe298:	d03b      	beq.n	23fe312 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe29a:	4629      	mov	r1, r5
 23fe29c:	a80b      	add	r0, sp, #44	; 0x2c
 23fe29e:	f000 fd12 	bl	23fecc6 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe2a2:	a90b      	add	r1, sp, #44	; 0x2c
 23fe2a4:	a80f      	add	r0, sp, #60	; 0x3c
 23fe2a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe2a8:	f000 fd0d 	bl	23fecc6 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe2ac:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe2b0:	4299      	cmp	r1, r3
 23fe2b2:	da1b      	bge.n	23fe2ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe2b4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe2b8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe2bc:	4631      	mov	r1, r6
 23fe2be:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe2c2:	f106 0010 	add.w	r0, r6, #16
 23fe2c6:	f7ff ff89 	bl	23fe1dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe2ca:	b9ee      	cbnz	r6, 23fe308 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe2ce:	3301      	adds	r3, #1
 23fe2d0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe2d2:	e011      	b.n	23fe2f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe2d4:	a808      	add	r0, sp, #32
 23fe2d6:	f7ff ffab 	bl	23fe230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe2da:	2800      	cmp	r0, #0
 23fe2dc:	d1d6      	bne.n	23fe28c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe2de:	a808      	add	r0, sp, #32
 23fe2e0:	f7fe fd1e 	bl	23fcd20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe2e4:	4620      	mov	r0, r4
 23fe2e6:	b015      	add	sp, #84	; 0x54
 23fe2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe2ec:	3101      	adds	r1, #1
 23fe2ee:	a808      	add	r0, sp, #32
 23fe2f0:	f7ff ff9e 	bl	23fe230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe2f4:	2800      	cmp	r0, #0
 23fe2f6:	d1dd      	bne.n	23fe2b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe2f8:	a80f      	add	r0, sp, #60	; 0x3c
 23fe2fa:	f000 fc68 	bl	23febce <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe2fe:	a80b      	add	r0, sp, #44	; 0x2c
 23fe300:	f000 fc65 	bl	23febce <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe304:	3514      	adds	r5, #20
 23fe306:	e7c6      	b.n	23fe296 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe308:	4630      	mov	r0, r6
 23fe30a:	a90f      	add	r1, sp, #60	; 0x3c
 23fe30c:	f000 fcdb 	bl	23fecc6 <_ZN6StringC1EOS_>
 23fe310:	e7dc      	b.n	23fe2cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe312:	2600      	movs	r6, #0
 23fe314:	f04f 0914 	mov.w	r9, #20
 23fe318:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe31c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe31e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe322:	429e      	cmp	r6, r3
 23fe324:	da7c      	bge.n	23fe420 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fe326:	0133      	lsls	r3, r6, #4
 23fe328:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe32a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe32c:	b90b      	cbnz	r3, 23fe332 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe32e:	3601      	adds	r6, #1
 23fe330:	e7f5      	b.n	23fe31e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe332:	2300      	movs	r3, #0
 23fe334:	9307      	str	r3, [sp, #28]
 23fe336:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe33a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe33c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe33e:	a907      	add	r1, sp, #28
 23fe340:	a806      	add	r0, sp, #24
 23fe342:	f7ff faf8 	bl	23fd936 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe346:	4682      	mov	sl, r0
 23fe348:	2800      	cmp	r0, #0
 23fe34a:	d0f0      	beq.n	23fe32e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe34c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe350:	4601      	mov	r1, r0
            bool found = false;
 23fe352:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe356:	4628      	mov	r0, r5
 23fe358:	9a07      	ldr	r2, [sp, #28]
 23fe35a:	f10d 0317 	add.w	r3, sp, #23
 23fe35e:	f7ff fb7f 	bl	23fda60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe362:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe366:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe368:	2f00      	cmp	r7, #0
 23fe36a:	d14a      	bne.n	23fe402 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe36c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe370:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe374:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe37c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe380:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe384:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe386:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe38a:	4293      	cmp	r3, r2
 23fe38c:	db17      	blt.n	23fe3be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe38e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe392:	f1ba 0f00 	cmp.w	sl, #0
 23fe396:	dd30      	ble.n	23fe3fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe398:	fb09 f00a 	mul.w	r0, r9, sl
 23fe39c:	f7fe fbf2 	bl	23fcb84 <malloc>
            if (!d) {
 23fe3a0:	4683      	mov	fp, r0
 23fe3a2:	b360      	cbz	r0, 23fe3fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe3a4:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe3a8:	fb09 1202 	mla	r2, r9, r2, r1
 23fe3ac:	f7ff feea 	bl	23fe184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe3b0:	6828      	ldr	r0, [r5, #0]
 23fe3b2:	f7fe fbf5 	bl	23fcba0 <free>
        data_ = d;
 23fe3b6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe3ba:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe3be:	682b      	ldr	r3, [r5, #0]
 23fe3c0:	9a01      	ldr	r2, [sp, #4]
 23fe3c2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe3c6:	686a      	ldr	r2, [r5, #4]
 23fe3c8:	4651      	mov	r1, sl
 23fe3ca:	fb09 3202 	mla	r2, r9, r2, r3
 23fe3ce:	f10a 0014 	add.w	r0, sl, #20
 23fe3d2:	f7ff fed7 	bl	23fe184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe3d6:	f1ba 0f00 	cmp.w	sl, #0
 23fe3da:	d003      	beq.n	23fe3e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe3dc:	4650      	mov	r0, sl
 23fe3de:	a90f      	add	r1, sp, #60	; 0x3c
 23fe3e0:	f7ff fb2a 	bl	23fda38 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe3e4:	686b      	ldr	r3, [r5, #4]
 23fe3e6:	3301      	adds	r3, #1
 23fe3e8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe3ea:	a811      	add	r0, sp, #68	; 0x44
 23fe3ec:	f7ff fcde 	bl	23fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe3f0:	b13f      	cbz	r7, 23fe402 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe3f2:	a80b      	add	r0, sp, #44	; 0x2c
 23fe3f4:	f7ff fcda 	bl	23fddac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe3f8:	e771      	b.n	23fe2de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe3fa:	46bb      	mov	fp, r7
 23fe3fc:	e7d8      	b.n	23fe3b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe3fe:	2701      	movs	r7, #1
 23fe400:	e7f3      	b.n	23fe3ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe402:	9b01      	ldr	r3, [sp, #4]
 23fe404:	682d      	ldr	r5, [r5, #0]
 23fe406:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe40a:	9b06      	ldr	r3, [sp, #24]
 23fe40c:	781b      	ldrb	r3, [r3, #0]
 23fe40e:	b92b      	cbnz	r3, 23fe41c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe410:	f8d8 3000 	ldr.w	r3, [r8]
 23fe414:	9a02      	ldr	r2, [sp, #8]
 23fe416:	4413      	add	r3, r2
 23fe418:	7c1b      	ldrb	r3, [r3, #16]
 23fe41a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe41c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe41e:	e78e      	b.n	23fe33e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe420:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe422:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe424:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe426:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe428:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe42a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe42e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe430:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe432:	60a2      	str	r2, [r4, #8]
 23fe434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe436:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe438:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe43a:	60e2      	str	r2, [r4, #12]
 23fe43c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe43e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe440:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe442:	6122      	str	r2, [r4, #16]
 23fe444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe446:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe448:	9b03      	ldr	r3, [sp, #12]
 23fe44a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe44c:	6162      	str	r2, [r4, #20]
 23fe44e:	7623      	strb	r3, [r4, #24]
 23fe450:	e7cf      	b.n	23fe3f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe454 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe454:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe456:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe458:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe45a:	4617      	mov	r7, r2
 23fe45c:	b087      	sub	sp, #28
 23fe45e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe460:	4668      	mov	r0, sp
 23fe462:	4619      	mov	r1, r3
 23fe464:	f7fd f919 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe468:	4b0b      	ldr	r3, [pc, #44]	; (23fe498 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe46a:	4669      	mov	r1, sp
 23fe46c:	f846 3b04 	str.w	r3, [r6], #4
 23fe470:	a803      	add	r0, sp, #12
 23fe472:	f7fd f912 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe476:	4639      	mov	r1, r7
 23fe478:	aa03      	add	r2, sp, #12
 23fe47a:	4630      	mov	r0, r6
 23fe47c:	f7ff fef0 	bl	23fe260 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe480:	a803      	add	r0, sp, #12
 23fe482:	f7fc fdc7 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe486:	4668      	mov	r0, sp
 23fe488:	f7fc fdc4 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe48c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe48e:	4b03      	ldr	r3, [pc, #12]	; (23fe49c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe490:	6225      	str	r5, [r4, #32]
 23fe492:	6023      	str	r3, [r4, #0]
}
 23fe494:	b007      	add	sp, #28
 23fe496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe498:	023ffb20 	.word	0x023ffb20
 23fe49c:	023ffcb4 	.word	0x023ffcb4

023fe4a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe4a2:	460f      	mov	r7, r1
 23fe4a4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe4a6:	4638      	mov	r0, r7
 23fe4a8:	491c      	ldr	r1, [pc, #112]	; (23fe51c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe4aa:	4616      	mov	r6, r2
 23fe4ac:	461d      	mov	r5, r3
 23fe4ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe4b0:	f7fc fc4c 	bl	23fad4c <strcmp>
 23fe4b4:	b9c0      	cbnz	r0, 23fe4e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe4b6:	b1a4      	cbz	r4, 23fe4e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe4b8:	4629      	mov	r1, r5
 23fe4ba:	a801      	add	r0, sp, #4
 23fe4bc:	f7ff fcbe 	bl	23fde3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe4c0:	2024      	movs	r0, #36	; 0x24
 23fe4c2:	4917      	ldr	r1, [pc, #92]	; (23fe520 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe4c4:	f000 fffe 	bl	23ff4c4 <_ZnwjRKSt9nothrow_t>
 23fe4c8:	4605      	mov	r5, r0
 23fe4ca:	b130      	cbz	r0, 23fe4da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe4cc:	ab01      	add	r3, sp, #4
 23fe4ce:	4632      	mov	r2, r6
 23fe4d0:	4621      	mov	r1, r4
 23fe4d2:	f7ff ffbf 	bl	23fe454 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe4d6:	4b13      	ldr	r3, [pc, #76]	; (23fe524 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe4d8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe4da:	a801      	add	r0, sp, #4
 23fe4dc:	f7fc fd9a 	bl	23fb014 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe4e0:	462c      	mov	r4, r5
}
 23fe4e2:	4620      	mov	r0, r4
 23fe4e4:	b005      	add	sp, #20
 23fe4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe4e8:	4638      	mov	r0, r7
 23fe4ea:	490f      	ldr	r1, [pc, #60]	; (23fe528 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe4ec:	f7fc fc2e 	bl	23fad4c <strcmp>
 23fe4f0:	b990      	cbnz	r0, 23fe518 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe4f2:	2c00      	cmp	r4, #0
 23fe4f4:	d0f5      	beq.n	23fe4e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe4f6:	4629      	mov	r1, r5
 23fe4f8:	a801      	add	r0, sp, #4
 23fe4fa:	f7ff fc9f 	bl	23fde3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe4fe:	2024      	movs	r0, #36	; 0x24
 23fe500:	4907      	ldr	r1, [pc, #28]	; (23fe520 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe502:	f000 ffdf 	bl	23ff4c4 <_ZnwjRKSt9nothrow_t>
 23fe506:	4605      	mov	r5, r0
 23fe508:	2800      	cmp	r0, #0
 23fe50a:	d0e6      	beq.n	23fe4da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe50c:	4632      	mov	r2, r6
 23fe50e:	4621      	mov	r1, r4
 23fe510:	ab01      	add	r3, sp, #4
 23fe512:	f7ff ff9f 	bl	23fe454 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe516:	e7e0      	b.n	23fe4da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe518:	2400      	movs	r4, #0
 23fe51a:	e7e2      	b.n	23fe4e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe51c:	023ffc39 	.word	0x023ffc39
 23fe520:	023ffe08 	.word	0x023ffe08
 23fe524:	023ffccc 	.word	0x023ffccc
 23fe528:	023ffc3d 	.word	0x023ffc3d

023fe52c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe52c:	4b01      	ldr	r3, [pc, #4]	; (23fe534 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe52e:	4a02      	ldr	r2, [pc, #8]	; (23fe538 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe530:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe532:	4770      	bx	lr
 23fe534:	1007ae5c 	.word	0x1007ae5c
 23fe538:	023ffc4e 	.word	0x023ffc4e

023fe53c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe540:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe542:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe546:	4604      	mov	r4, r0
 23fe548:	460e      	mov	r6, r1
 23fe54a:	4617      	mov	r7, r2
 23fe54c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe54e:	f000 fd35 	bl	23fefbc <_Z16_fetch_usbserialv>
 23fe552:	4581      	cmp	r9, r0
 23fe554:	d04d      	beq.n	23fe5f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe556:	792b      	ldrb	r3, [r5, #4]
 23fe558:	0719      	lsls	r1, r3, #28
 23fe55a:	d504      	bpl.n	23fe566 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe55c:	4620      	mov	r0, r4
 23fe55e:	696a      	ldr	r2, [r5, #20]
 23fe560:	4954      	ldr	r1, [pc, #336]	; (23fe6b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe562:	f7ff fae2 	bl	23fdb2a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe566:	f1b8 0f00 	cmp.w	r8, #0
 23fe56a:	d00d      	beq.n	23fe588 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe56c:	215b      	movs	r1, #91	; 0x5b
 23fe56e:	4620      	mov	r0, r4
 23fe570:	f7ff fa56 	bl	23fda20 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe574:	4641      	mov	r1, r8
 23fe576:	4620      	mov	r0, r4
 23fe578:	f7ff fa43 	bl	23fda02 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe57c:	6823      	ldr	r3, [r4, #0]
 23fe57e:	2202      	movs	r2, #2
 23fe580:	4620      	mov	r0, r4
 23fe582:	68db      	ldr	r3, [r3, #12]
 23fe584:	494c      	ldr	r1, [pc, #304]	; (23fe6b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe586:	4798      	blx	r3
    if (attr.has_file) {
 23fe588:	792b      	ldrb	r3, [r5, #4]
 23fe58a:	07da      	lsls	r2, r3, #31
 23fe58c:	d524      	bpl.n	23fe5d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe58e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe592:	212f      	movs	r1, #47	; 0x2f
 23fe594:	4640      	mov	r0, r8
 23fe596:	f001 f880 	bl	23ff69a <strrchr>
    if (s1) {
 23fe59a:	b108      	cbz	r0, 23fe5a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe59c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe5a0:	4641      	mov	r1, r8
 23fe5a2:	4620      	mov	r0, r4
 23fe5a4:	f7ff fa2d 	bl	23fda02 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe5a8:	792b      	ldrb	r3, [r5, #4]
 23fe5aa:	079b      	lsls	r3, r3, #30
 23fe5ac:	d508      	bpl.n	23fe5c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe5ae:	213a      	movs	r1, #58	; 0x3a
 23fe5b0:	4620      	mov	r0, r4
 23fe5b2:	f7ff fa35 	bl	23fda20 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe5b6:	4620      	mov	r0, r4
 23fe5b8:	68ea      	ldr	r2, [r5, #12]
 23fe5ba:	4940      	ldr	r1, [pc, #256]	; (23fe6bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe5bc:	f7ff fab5 	bl	23fdb2a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe5c0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe5c2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe5c4:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe5c8:	4620      	mov	r0, r4
            write(", ", 2);
 23fe5ca:	f04f 0202 	mov.w	r2, #2
 23fe5ce:	68db      	ldr	r3, [r3, #12]
 23fe5d0:	bf14      	ite	ne
 23fe5d2:	493b      	ldrne	r1, [pc, #236]	; (23fe6c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe5d4:	493b      	ldreq	r1, [pc, #236]	; (23fe6c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe5d6:	4798      	blx	r3
    if (attr.has_function) {
 23fe5d8:	792b      	ldrb	r3, [r5, #4]
 23fe5da:	0758      	lsls	r0, r3, #29
 23fe5dc:	d51d      	bpl.n	23fe61a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe5de:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe5e0:	460b      	mov	r3, r1
 23fe5e2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe5e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe5e8:	b160      	cbz	r0, 23fe604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe5ea:	2820      	cmp	r0, #32
 23fe5ec:	d108      	bne.n	23fe600 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe5ee:	4619      	mov	r1, r3
 23fe5f0:	e7f7      	b.n	23fe5e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe5f2:	4835      	ldr	r0, [pc, #212]	; (23fe6c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe5f4:	f000 f983 	bl	23fe8fe <_ZN5spark12NetworkClass9listeningEv>
 23fe5f8:	2800      	cmp	r0, #0
 23fe5fa:	d0ac      	beq.n	23fe556 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe600:	2828      	cmp	r0, #40	; 0x28
 23fe602:	d1ee      	bne.n	23fe5e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe604:	6823      	ldr	r3, [r4, #0]
 23fe606:	1a52      	subs	r2, r2, r1
 23fe608:	4620      	mov	r0, r4
 23fe60a:	68db      	ldr	r3, [r3, #12]
 23fe60c:	4798      	blx	r3
        write("(): ", 4);
 23fe60e:	6823      	ldr	r3, [r4, #0]
 23fe610:	2204      	movs	r2, #4
 23fe612:	4620      	mov	r0, r4
 23fe614:	68db      	ldr	r3, [r3, #12]
 23fe616:	492d      	ldr	r1, [pc, #180]	; (23fe6cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe618:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe61a:	2100      	movs	r1, #0
 23fe61c:	4638      	mov	r0, r7
 23fe61e:	f7fe f90d 	bl	23fc83c <log_level_name>
 23fe622:	4601      	mov	r1, r0
    write(s);
 23fe624:	4620      	mov	r0, r4
 23fe626:	f7ff f9ec 	bl	23fda02 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe62a:	6823      	ldr	r3, [r4, #0]
 23fe62c:	2202      	movs	r2, #2
 23fe62e:	4620      	mov	r0, r4
 23fe630:	68db      	ldr	r3, [r3, #12]
 23fe632:	4924      	ldr	r1, [pc, #144]	; (23fe6c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe634:	4798      	blx	r3
    if (msg) {
 23fe636:	b11e      	cbz	r6, 23fe640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe638:	4631      	mov	r1, r6
 23fe63a:	4620      	mov	r0, r4
 23fe63c:	f7ff f9e1 	bl	23fda02 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe640:	792b      	ldrb	r3, [r5, #4]
 23fe642:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe646:	d02c      	beq.n	23fe6a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe648:	6823      	ldr	r3, [r4, #0]
 23fe64a:	4921      	ldr	r1, [pc, #132]	; (23fe6d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe64c:	68db      	ldr	r3, [r3, #12]
 23fe64e:	2202      	movs	r2, #2
 23fe650:	4620      	mov	r0, r4
 23fe652:	4798      	blx	r3
        if (attr.has_code) {
 23fe654:	792b      	ldrb	r3, [r5, #4]
 23fe656:	06d9      	lsls	r1, r3, #27
 23fe658:	d50a      	bpl.n	23fe670 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe65a:	6823      	ldr	r3, [r4, #0]
 23fe65c:	2207      	movs	r2, #7
 23fe65e:	4620      	mov	r0, r4
 23fe660:	491c      	ldr	r1, [pc, #112]	; (23fe6d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe662:	68db      	ldr	r3, [r3, #12]
 23fe664:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe666:	4620      	mov	r0, r4
 23fe668:	69aa      	ldr	r2, [r5, #24]
 23fe66a:	491b      	ldr	r1, [pc, #108]	; (23fe6d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe66c:	f7ff fa5d 	bl	23fdb2a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe670:	792b      	ldrb	r3, [r5, #4]
 23fe672:	069a      	lsls	r2, r3, #26
 23fe674:	d511      	bpl.n	23fe69a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe676:	06db      	lsls	r3, r3, #27
 23fe678:	d505      	bpl.n	23fe686 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe67a:	6823      	ldr	r3, [r4, #0]
 23fe67c:	2202      	movs	r2, #2
 23fe67e:	4620      	mov	r0, r4
 23fe680:	68db      	ldr	r3, [r3, #12]
 23fe682:	490f      	ldr	r1, [pc, #60]	; (23fe6c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe684:	4798      	blx	r3
            write("details = ", 10);
 23fe686:	6823      	ldr	r3, [r4, #0]
 23fe688:	4620      	mov	r0, r4
 23fe68a:	4914      	ldr	r1, [pc, #80]	; (23fe6dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe68c:	220a      	movs	r2, #10
 23fe68e:	68db      	ldr	r3, [r3, #12]
 23fe690:	4798      	blx	r3
            write(attr.details);
 23fe692:	4620      	mov	r0, r4
 23fe694:	69e9      	ldr	r1, [r5, #28]
 23fe696:	f7ff f9b4 	bl	23fda02 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe69a:	215d      	movs	r1, #93	; 0x5d
 23fe69c:	4620      	mov	r0, r4
 23fe69e:	f7ff f9bf 	bl	23fda20 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe6a2:	6823      	ldr	r3, [r4, #0]
 23fe6a4:	4620      	mov	r0, r4
}
 23fe6a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe6aa:	2202      	movs	r2, #2
 23fe6ac:	68db      	ldr	r3, [r3, #12]
 23fe6ae:	490c      	ldr	r1, [pc, #48]	; (23fe6e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe6b0:	4718      	bx	r3
 23fe6b2:	bf00      	nop
 23fe6b4:	023ffc52 	.word	0x023ffc52
 23fe6b8:	023ffc59 	.word	0x023ffc59
 23fe6bc:	023ff906 	.word	0x023ff906
 23fe6c0:	023ffc5c 	.word	0x023ffc5c
 23fe6c4:	023ffc61 	.word	0x023ffc61
 23fe6c8:	1007ae88 	.word	0x1007ae88
 23fe6cc:	023ffc5f 	.word	0x023ffc5f
 23fe6d0:	023ffc64 	.word	0x023ffc64
 23fe6d4:	023ffc67 	.word	0x023ffc67
 23fe6d8:	023ffc6f 	.word	0x023ffc6f
 23fe6dc:	023ffc72 	.word	0x023ffc72
 23fe6e0:	023ffc7d 	.word	0x023ffc7d

023fe6e4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe6e8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe6ea:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe6ec:	460d      	mov	r5, r1
 23fe6ee:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe6f0:	f000 fc64 	bl	23fefbc <_Z16_fetch_usbserialv>
 23fe6f4:	4287      	cmp	r7, r0
 23fe6f6:	d007      	beq.n	23fe708 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe6f8:	6a20      	ldr	r0, [r4, #32]
 23fe6fa:	4632      	mov	r2, r6
 23fe6fc:	6803      	ldr	r3, [r0, #0]
 23fe6fe:	4629      	mov	r1, r5
}
 23fe700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe704:	68db      	ldr	r3, [r3, #12]
 23fe706:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe708:	4803      	ldr	r0, [pc, #12]	; (23fe718 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe70a:	f000 f8f8 	bl	23fe8fe <_ZN5spark12NetworkClass9listeningEv>
 23fe70e:	2800      	cmp	r0, #0
 23fe710:	d0f2      	beq.n	23fe6f8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe716:	bf00      	nop
 23fe718:	1007ae88 	.word	0x1007ae88

023fe71c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe720:	b085      	sub	sp, #20
    return stream_;
 23fe722:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe726:	4605      	mov	r5, r0
 23fe728:	460f      	mov	r7, r1
 23fe72a:	4690      	mov	r8, r2
 23fe72c:	461e      	mov	r6, r3
 23fe72e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe730:	f000 fc44 	bl	23fefbc <_Z16_fetch_usbserialv>
 23fe734:	4581      	cmp	r9, r0
 23fe736:	d105      	bne.n	23fe744 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe738:	4849      	ldr	r0, [pc, #292]	; (23fe860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe73a:	f000 f8e0 	bl	23fe8fe <_ZN5spark12NetworkClass9listeningEv>
 23fe73e:	2800      	cmp	r0, #0
 23fe740:	f040 808a 	bne.w	23fe858 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe744:	f04f 0900 	mov.w	r9, #0
 23fe748:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe74a:	4a46      	ldr	r2, [pc, #280]	; (23fe864 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe74c:	a801      	add	r0, sp, #4
 23fe74e:	9201      	str	r2, [sp, #4]
 23fe750:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe752:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe756:	f7ff f830 	bl	23fd7ba <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe75a:	4649      	mov	r1, r9
 23fe75c:	4640      	mov	r0, r8
 23fe75e:	f7fe f86d 	bl	23fc83c <log_level_name>
 23fe762:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe764:	4940      	ldr	r1, [pc, #256]	; (23fe868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe766:	2201      	movs	r2, #1
 23fe768:	a801      	add	r0, sp, #4
 23fe76a:	f7ff f8b5 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe76e:	4641      	mov	r1, r8
 23fe770:	f7ff f939 	bl	23fd9e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe774:	b13f      	cbz	r7, 23fe786 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe776:	493d      	ldr	r1, [pc, #244]	; (23fe86c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe778:	2201      	movs	r2, #1
 23fe77a:	a801      	add	r0, sp, #4
 23fe77c:	f7ff f8ac 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe780:	4639      	mov	r1, r7
 23fe782:	f7ff f930 	bl	23fd9e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe786:	b13e      	cbz	r6, 23fe798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe788:	4939      	ldr	r1, [pc, #228]	; (23fe870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe78a:	2201      	movs	r2, #1
 23fe78c:	a801      	add	r0, sp, #4
 23fe78e:	f7ff f8a3 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe792:	4631      	mov	r1, r6
 23fe794:	f7ff f927 	bl	23fd9e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe798:	7923      	ldrb	r3, [r4, #4]
 23fe79a:	07df      	lsls	r7, r3, #31
 23fe79c:	d50e      	bpl.n	23fe7bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe79e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe7a0:	212f      	movs	r1, #47	; 0x2f
 23fe7a2:	4630      	mov	r0, r6
 23fe7a4:	f000 ff79 	bl	23ff69a <strrchr>
    if (s1) {
 23fe7a8:	b100      	cbz	r0, 23fe7ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe7aa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe7ac:	4931      	ldr	r1, [pc, #196]	; (23fe874 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe7ae:	2201      	movs	r2, #1
 23fe7b0:	a801      	add	r0, sp, #4
 23fe7b2:	f7ff f891 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe7b6:	4631      	mov	r1, r6
 23fe7b8:	f7ff f915 	bl	23fd9e6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe7bc:	7923      	ldrb	r3, [r4, #4]
 23fe7be:	079e      	lsls	r6, r3, #30
 23fe7c0:	d507      	bpl.n	23fe7d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe7c2:	492d      	ldr	r1, [pc, #180]	; (23fe878 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe7c4:	2202      	movs	r2, #2
 23fe7c6:	a801      	add	r0, sp, #4
 23fe7c8:	f7ff f886 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe7cc:	68e1      	ldr	r1, [r4, #12]
 23fe7ce:	f7ff f801 	bl	23fd7d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe7d2:	7923      	ldrb	r3, [r4, #4]
 23fe7d4:	0758      	lsls	r0, r3, #29
 23fe7d6:	d514      	bpl.n	23fe802 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe7d8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe7da:	4633      	mov	r3, r6
 23fe7dc:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe7de:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe7e2:	b12a      	cbz	r2, 23fe7f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe7e4:	2a20      	cmp	r2, #32
 23fe7e6:	d101      	bne.n	23fe7ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe7e8:	461e      	mov	r6, r3
 23fe7ea:	e7f7      	b.n	23fe7dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe7ec:	2a28      	cmp	r2, #40	; 0x28
 23fe7ee:	d1f5      	bne.n	23fe7dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe7f0:	2202      	movs	r2, #2
 23fe7f2:	4922      	ldr	r1, [pc, #136]	; (23fe87c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe7f4:	a801      	add	r0, sp, #4
 23fe7f6:	f7ff f86f 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe7fa:	4631      	mov	r1, r6
 23fe7fc:	1bba      	subs	r2, r7, r6
 23fe7fe:	f7ff f87b 	bl	23fd8f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe802:	7923      	ldrb	r3, [r4, #4]
 23fe804:	0719      	lsls	r1, r3, #28
 23fe806:	d507      	bpl.n	23fe818 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe808:	491d      	ldr	r1, [pc, #116]	; (23fe880 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe80a:	2201      	movs	r2, #1
 23fe80c:	a801      	add	r0, sp, #4
 23fe80e:	f7ff f863 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe812:	6961      	ldr	r1, [r4, #20]
 23fe814:	f7fe fff0 	bl	23fd7f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe818:	7923      	ldrb	r3, [r4, #4]
 23fe81a:	06da      	lsls	r2, r3, #27
 23fe81c:	d508      	bpl.n	23fe830 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe81e:	2204      	movs	r2, #4
 23fe820:	4918      	ldr	r1, [pc, #96]	; (23fe884 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe822:	eb0d 0002 	add.w	r0, sp, r2
 23fe826:	f7ff f857 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe82a:	69a1      	ldr	r1, [r4, #24]
 23fe82c:	f7fe ffd2 	bl	23fd7d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe830:	7923      	ldrb	r3, [r4, #4]
 23fe832:	069b      	lsls	r3, r3, #26
 23fe834:	d507      	bpl.n	23fe846 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe836:	4914      	ldr	r1, [pc, #80]	; (23fe888 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe838:	2206      	movs	r2, #6
 23fe83a:	a801      	add	r0, sp, #4
 23fe83c:	f7ff f84c 	bl	23fd8d8 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe840:	69e1      	ldr	r1, [r4, #28]
 23fe842:	f7ff f8d0 	bl	23fd9e6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe846:	a801      	add	r0, sp, #4
 23fe848:	f7fe ffa1 	bl	23fd78e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe84c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe84e:	2202      	movs	r2, #2
 23fe850:	6803      	ldr	r3, [r0, #0]
 23fe852:	490e      	ldr	r1, [pc, #56]	; (23fe88c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe854:	68db      	ldr	r3, [r3, #12]
 23fe856:	4798      	blx	r3
}
 23fe858:	b005      	add	sp, #20
 23fe85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe85e:	bf00      	nop
 23fe860:	1007ae88 	.word	0x1007ae88
 23fe864:	023ffc9c 	.word	0x023ffc9c
 23fe868:	023ffc2f 	.word	0x023ffc2f
 23fe86c:	023ffc80 	.word	0x023ffc80
 23fe870:	023ffed0 	.word	0x023ffed0
 23fe874:	023ffb65 	.word	0x023ffb65
 23fe878:	023ffc82 	.word	0x023ffc82
 23fe87c:	023ffc85 	.word	0x023ffc85
 23fe880:	023ffb16 	.word	0x023ffb16
 23fe884:	023ffc88 	.word	0x023ffc88
 23fe888:	023ffc8d 	.word	0x023ffc8d
 23fe88c:	023ffc7d 	.word	0x023ffc7d

023fe890 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe890:	2300      	movs	r3, #0
 23fe892:	6840      	ldr	r0, [r0, #4]
 23fe894:	461a      	mov	r2, r3
 23fe896:	f7fe b8cd 	b.w	23fca34 <network_connect>

023fe89a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe89a:	2200      	movs	r2, #0
 23fe89c:	2102      	movs	r1, #2
 23fe89e:	6840      	ldr	r0, [r0, #4]
 23fe8a0:	f7fe b8e4 	b.w	23fca6c <network_disconnect>

023fe8a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe8a4:	2200      	movs	r2, #0
 23fe8a6:	6840      	ldr	r0, [r0, #4]
 23fe8a8:	4611      	mov	r1, r2
 23fe8aa:	f7fe b8d1 	b.w	23fca50 <network_connecting>

023fe8ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe8ae:	2200      	movs	r2, #0
 23fe8b0:	6840      	ldr	r0, [r0, #4]
 23fe8b2:	4611      	mov	r1, r2
 23fe8b4:	f7fe b8e8 	b.w	23fca88 <network_ready>

023fe8b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe8b8:	2300      	movs	r3, #0
 23fe8ba:	6840      	ldr	r0, [r0, #4]
 23fe8bc:	461a      	mov	r2, r3
 23fe8be:	4619      	mov	r1, r3
 23fe8c0:	f7fe b8f0 	b.w	23fcaa4 <network_on>

023fe8c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe8c4:	2300      	movs	r3, #0
 23fe8c6:	6840      	ldr	r0, [r0, #4]
 23fe8c8:	461a      	mov	r2, r3
 23fe8ca:	4619      	mov	r1, r3
 23fe8cc:	f7fe b8f8 	b.w	23fcac0 <network_off>

023fe8d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe8d0:	2100      	movs	r1, #0
 23fe8d2:	6840      	ldr	r0, [r0, #4]
 23fe8d4:	f7fe b93a 	b.w	23fcb4c <network_is_on>

023fe8d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe8d8:	2100      	movs	r1, #0
 23fe8da:	6840      	ldr	r0, [r0, #4]
 23fe8dc:	f7fe b944 	b.w	23fcb68 <network_is_off>

023fe8e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe8e0:	2200      	movs	r2, #0
 23fe8e2:	6840      	ldr	r0, [r0, #4]
 23fe8e4:	f081 0101 	eor.w	r1, r1, #1
 23fe8e8:	f7fe b8f8 	b.w	23fcadc <network_listen>

023fe8ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe8ec:	2200      	movs	r2, #0
 23fe8ee:	6840      	ldr	r0, [r0, #4]
 23fe8f0:	f7fe b910 	b.w	23fcb14 <network_set_listen_timeout>

023fe8f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe8f4:	2200      	movs	r2, #0
 23fe8f6:	6840      	ldr	r0, [r0, #4]
 23fe8f8:	4611      	mov	r1, r2
 23fe8fa:	f7fe b919 	b.w	23fcb30 <network_get_listen_timeout>

023fe8fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe8fe:	2200      	movs	r2, #0
 23fe900:	6840      	ldr	r0, [r0, #4]
 23fe902:	4611      	mov	r1, r2
 23fe904:	f7fe b8f8 	b.w	23fcaf8 <network_listening>

023fe908 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe90c:	b095      	sub	sp, #84	; 0x54
 23fe90e:	4614      	mov	r4, r2
 23fe910:	460d      	mov	r5, r1
 23fe912:	4607      	mov	r7, r0
    IPAddress addr;
 23fe914:	f7fe fdea 	bl	23fd4ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe918:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe91a:	221c      	movs	r2, #28
 23fe91c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe91e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe920:	f000 fe33 	bl	23ff58a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe924:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe926:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe928:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe92a:	2100      	movs	r1, #0
 23fe92c:	466b      	mov	r3, sp
 23fe92e:	aa0c      	add	r2, sp, #48	; 0x30
 23fe930:	f7fd fdd2 	bl	23fc4d8 <netdb_getaddrinfo>
    if (!r) {
 23fe934:	4604      	mov	r4, r0
 23fe936:	2800      	cmp	r0, #0
 23fe938:	d14b      	bne.n	23fe9d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe93a:	4602      	mov	r2, r0
 23fe93c:	2101      	movs	r1, #1
 23fe93e:	6868      	ldr	r0, [r5, #4]
 23fe940:	f7fe f8a2 	bl	23fca88 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe944:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe946:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe948:	4622      	mov	r2, r4
 23fe94a:	6868      	ldr	r0, [r5, #4]
 23fe94c:	f7fe f89c 	bl	23fca88 <network_ready>
        bool ok = false;
 23fe950:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe952:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe954:	9e00      	ldr	r6, [sp, #0]
 23fe956:	2e00      	cmp	r6, #0
 23fe958:	d03b      	beq.n	23fe9d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe95a:	2900      	cmp	r1, #0
 23fe95c:	d139      	bne.n	23fe9d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe95e:	6873      	ldr	r3, [r6, #4]
 23fe960:	2b02      	cmp	r3, #2
 23fe962:	d003      	beq.n	23fe96c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe964:	2b0a      	cmp	r3, #10
 23fe966:	d011      	beq.n	23fe98c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe968:	69f6      	ldr	r6, [r6, #28]
 23fe96a:	e7f4      	b.n	23fe956 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe96c:	f1b8 0f00 	cmp.w	r8, #0
 23fe970:	d0fa      	beq.n	23fe968 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe972:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe974:	a806      	add	r0, sp, #24
 23fe976:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe978:	1d3c      	adds	r4, r7, #4
 23fe97a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe97c:	f7fe fde4 	bl	23fd548 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe984:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe986:	4641      	mov	r1, r8
 23fe988:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe98a:	e7ed      	b.n	23fe968 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe98c:	f1b9 0f00 	cmp.w	r9, #0
 23fe990:	d0ea      	beq.n	23fe968 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe992:	2210      	movs	r2, #16
 23fe994:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe996:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe998:	f000 fdf7 	bl	23ff58a <memset>
                    a.v = 6;
 23fe99c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe99e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe9a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe9a4:	f104 0308 	add.w	r3, r4, #8
 23fe9a8:	3418      	adds	r4, #24
 23fe9aa:	462a      	mov	r2, r5
 23fe9ac:	6818      	ldr	r0, [r3, #0]
 23fe9ae:	6859      	ldr	r1, [r3, #4]
 23fe9b0:	3308      	adds	r3, #8
 23fe9b2:	c203      	stmia	r2!, {r0, r1}
 23fe9b4:	42a3      	cmp	r3, r4
 23fe9b6:	4615      	mov	r5, r2
 23fe9b8:	d1f7      	bne.n	23fe9aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe9ba:	a901      	add	r1, sp, #4
 23fe9bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe9be:	1d3c      	adds	r4, r7, #4
 23fe9c0:	ad07      	add	r5, sp, #28
 23fe9c2:	f7fe fda1 	bl	23fd508 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe9c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe9c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe9ca:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe9cc:	4649      	mov	r1, r9
 23fe9ce:	7023      	strb	r3, [r4, #0]
                    break;
 23fe9d0:	e7ca      	b.n	23fe968 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe9d2:	9800      	ldr	r0, [sp, #0]
 23fe9d4:	f7fd fd72 	bl	23fc4bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe9d8:	4638      	mov	r0, r7
 23fe9da:	b015      	add	sp, #84	; 0x54
 23fe9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe9e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe9e0:	4b02      	ldr	r3, [pc, #8]	; (23fe9ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe9e2:	4a03      	ldr	r2, [pc, #12]	; (23fe9f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe9e4:	601a      	str	r2, [r3, #0]
 23fe9e6:	2200      	movs	r2, #0
 23fe9e8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe9ea:	4770      	bx	lr
 23fe9ec:	1007ae88 	.word	0x1007ae88
 23fe9f0:	023ffd14 	.word	0x023ffd14

023fe9f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe9f6:	4606      	mov	r6, r0
 23fe9f8:	460d      	mov	r5, r1
  size_t n = 0;
 23fe9fa:	2400      	movs	r4, #0
 23fe9fc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe9fe:	42bd      	cmp	r5, r7
 23fea00:	d00c      	beq.n	23fea1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fea02:	6833      	ldr	r3, [r6, #0]
 23fea04:	4630      	mov	r0, r6
 23fea06:	689b      	ldr	r3, [r3, #8]
 23fea08:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fea0c:	4798      	blx	r3
     if (chunk>=0)
 23fea0e:	1e03      	subs	r3, r0, #0
 23fea10:	db01      	blt.n	23fea16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fea12:	441c      	add	r4, r3
  while (size--) {
 23fea14:	e7f3      	b.n	23fe9fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fea16:	2c00      	cmp	r4, #0
 23fea18:	bf08      	it	eq
 23fea1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fea1c:	4620      	mov	r0, r4
 23fea1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fea20 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fea20:	b513      	push	{r0, r1, r4, lr}
 23fea22:	4604      	mov	r4, r0
    }
 23fea24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fea26:	b159      	cbz	r1, 23fea40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fea28:	9101      	str	r1, [sp, #4]
 23fea2a:	f7fc f999 	bl	23fad60 <strlen>
 23fea2e:	4602      	mov	r2, r0
 23fea30:	4620      	mov	r0, r4
 23fea32:	6823      	ldr	r3, [r4, #0]
 23fea34:	9901      	ldr	r1, [sp, #4]
 23fea36:	68db      	ldr	r3, [r3, #12]
    }
 23fea38:	b002      	add	sp, #8
 23fea3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fea3e:	4718      	bx	r3
    }
 23fea40:	b002      	add	sp, #8
 23fea42:	bd10      	pop	{r4, pc}

023fea44 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fea44:	6803      	ldr	r3, [r0, #0]
 23fea46:	689b      	ldr	r3, [r3, #8]
 23fea48:	4718      	bx	r3

023fea4a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fea4a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fea4c:	2a01      	cmp	r2, #1
 23fea4e:	bf98      	it	ls
 23fea50:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fea52:	b530      	push	{r4, r5, lr}
 23fea54:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fea56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fea5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fea5c:	460d      	mov	r5, r1
 23fea5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fea62:	fb01 5312 	mls	r3, r1, r2, r5
 23fea66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fea6a:	2b09      	cmp	r3, #9
 23fea6c:	bf94      	ite	ls
 23fea6e:	3330      	addls	r3, #48	; 0x30
 23fea70:	3337      	addhi	r3, #55	; 0x37
 23fea72:	b2db      	uxtb	r3, r3
  } while(n);
 23fea74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fea76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fea7a:	d9ef      	bls.n	23fea5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fea7c:	4621      	mov	r1, r4
 23fea7e:	f7ff ffcf 	bl	23fea20 <_ZN5Print5writeEPKc>
}
 23fea82:	b00b      	add	sp, #44	; 0x2c
 23fea84:	bd30      	pop	{r4, r5, pc}
	...

023fea88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fea88:	2200      	movs	r2, #0
 23fea8a:	4b01      	ldr	r3, [pc, #4]	; (23fea90 <_GLOBAL__sub_I_RGB+0x8>)
 23fea8c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fea8e:	4770      	bx	lr
 23fea90:	1007ae90 	.word	0x1007ae90

023fea94 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fea94:	2100      	movs	r1, #0
 23fea96:	f7fd bdab 	b.w	23fc5f0 <hal_spi_release>

023fea9a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fea9a:	2100      	movs	r1, #0
 23fea9c:	f7fd bd9a 	b.w	23fc5d4 <hal_spi_acquire>

023feaa0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23feaa0:	b510      	push	{r4, lr}
 23feaa2:	4604      	mov	r4, r0
 23feaa4:	4608      	mov	r0, r1
{
    _spi = spi;
 23feaa6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23feaa8:	f7fd fd40 	bl	23fc52c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23feaac:	2300      	movs	r3, #0
}
 23feaae:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23feab0:	6063      	str	r3, [r4, #4]
}
 23feab2:	bd10      	pop	{r4, pc}

023feab4 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
 23feab4:	b513      	push	{r0, r1, r4, lr}
 23feab6:	4604      	mov	r4, r0
    if (!lock())
 23feab8:	7800      	ldrb	r0, [r0, #0]
{
 23feaba:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
 23feabe:	f7ff ffec 	bl	23fea9a <_ZN8SPIClass4lockEv.isra.0>
 23feac2:	e9dd 2100 	ldrd	r2, r1, [sp]
 23feac6:	4603      	mov	r3, r0
 23feac8:	b948      	cbnz	r0, 23feade <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
 23feaca:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, nullptr);
 23feacc:	9000      	str	r0, [sp, #0]
 23feace:	f7fd fd65 	bl	23fc59c <hal_spi_begin_ext>
        unlock();
 23fead2:	9800      	ldr	r0, [sp, #0]
    }
}
 23fead4:	b002      	add	sp, #8
 23fead6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23feada:	f7ff bfdb 	b.w	23fea94 <_ZN8SPIClass6unlockEv.isra.0>
 23feade:	b002      	add	sp, #8
 23feae0:	bd10      	pop	{r4, pc}

023feae2 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23feae2:	b513      	push	{r0, r1, r4, lr}
 23feae4:	4604      	mov	r4, r0
    if (!lock())
 23feae6:	7800      	ldrb	r0, [r0, #0]
{
 23feae8:	9101      	str	r1, [sp, #4]
    if (!lock())
 23feaea:	f7ff ffd6 	bl	23fea9a <_ZN8SPIClass4lockEv.isra.0>
 23feaee:	9901      	ldr	r1, [sp, #4]
 23feaf0:	b948      	cbnz	r0, 23feb06 <_ZN8SPIClass11setDataModeEh+0x24>
 23feaf2:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23feaf4:	9001      	str	r0, [sp, #4]
 23feaf6:	f7fd fcfd 	bl	23fc4f4 <hal_spi_set_data_mode>
        unlock();
 23feafa:	9801      	ldr	r0, [sp, #4]
    }
}
 23feafc:	b002      	add	sp, #8
 23feafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23feb02:	f7ff bfc7 	b.w	23fea94 <_ZN8SPIClass6unlockEv.isra.0>
 23feb06:	b002      	add	sp, #8
 23feb08:	bd10      	pop	{r4, pc}

023feb0a <_ZN8SPIClass16beginTransactionEv>:

int32_t SPIClass::beginTransaction()
{
    return lock();
 23feb0a:	7800      	ldrb	r0, [r0, #0]
 23feb0c:	f7ff bfc5 	b.w	23fea9a <_ZN8SPIClass4lockEv.isra.0>

023feb10 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23feb10:	7800      	ldrb	r0, [r0, #0]
 23feb12:	f7ff bfbf 	b.w	23fea94 <_ZN8SPIClass6unlockEv.isra.0>
	...

023feb18 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23feb18:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23feb1a:	2400      	movs	r4, #0
 23feb1c:	0840      	lsrs	r0, r0, #1
 23feb1e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23feb20:	6818      	ldr	r0, [r3, #0]
 23feb22:	b2e5      	uxtb	r5, r4
 23feb24:	4288      	cmp	r0, r1
 23feb26:	d906      	bls.n	23feb36 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23feb28:	3401      	adds	r4, #1
 23feb2a:	2c08      	cmp	r4, #8
 23feb2c:	d002      	beq.n	23feb34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23feb2e:	0840      	lsrs	r0, r0, #1
 23feb30:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23feb32:	e7f5      	b.n	23feb20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23feb34:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23feb36:	4b02      	ldr	r3, [pc, #8]	; (23feb40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23feb38:	5d5b      	ldrb	r3, [r3, r5]
 23feb3a:	7013      	strb	r3, [r2, #0]
}
 23feb3c:	bd30      	pop	{r4, r5, pc}
 23feb3e:	bf00      	nop
 23feb40:	023ffd48 	.word	0x023ffd48

023feb44 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23feb44:	2300      	movs	r3, #0
{
 23feb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feb4a:	4604      	mov	r4, r0
 23feb4c:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23feb4e:	7800      	ldrb	r0, [r0, #0]
{
 23feb50:	460e      	mov	r6, r1
 23feb52:	4617      	mov	r7, r2
    unsigned clock = 0;
 23feb54:	9302      	str	r3, [sp, #8]
    if (!lock())
 23feb56:	f7ff ffa0 	bl	23fea9a <_ZN8SPIClass4lockEv.isra.0>
 23feb5a:	4605      	mov	r5, r0
 23feb5c:	bb00      	cbnz	r0, 23feba0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23feb5e:	4601      	mov	r1, r0
 23feb60:	2214      	movs	r2, #20
 23feb62:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23feb64:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23feb68:	f000 fd0f 	bl	23ff58a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23feb6c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23feb6e:	462a      	mov	r2, r5
 23feb70:	4640      	mov	r0, r8
 23feb72:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23feb74:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23feb78:	f7fd fcf4 	bl	23fc564 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23feb7c:	fb07 f106 	mul.w	r1, r7, r6
 23feb80:	9804      	ldr	r0, [sp, #16]
 23feb82:	ab02      	add	r3, sp, #8
 23feb84:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23feb88:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23feb8c:	f7ff ffc4 	bl	23feb18 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23feb90:	7820      	ldrb	r0, [r4, #0]
 23feb92:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23feb96:	f7fd fcbb 	bl	23fc510 <hal_spi_set_clock_divider>
        unlock();
 23feb9a:	7820      	ldrb	r0, [r4, #0]
 23feb9c:	f7ff ff7a 	bl	23fea94 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23feba0:	9802      	ldr	r0, [sp, #8]
 23feba2:	b008      	add	sp, #32
 23feba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023feba8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23feba8:	b530      	push	{r4, r5, lr}
 23febaa:	b087      	sub	sp, #28
 23febac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23febae:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23febb0:	9500      	str	r5, [sp, #0]
 23febb2:	7800      	ldrb	r0, [r0, #0]
 23febb4:	f7fd fce4 	bl	23fc580 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23febb8:	b93d      	cbnz	r5, 23febca <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23febba:	7820      	ldrb	r0, [r4, #0]
 23febbc:	a902      	add	r1, sp, #8
 23febbe:	f7fd fcfb 	bl	23fc5b8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23febc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23febc6:	07db      	lsls	r3, r3, #31
 23febc8:	d4f7      	bmi.n	23febba <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23febca:	b007      	add	sp, #28
 23febcc:	bd30      	pop	{r4, r5, pc}

023febce <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23febce:	b510      	push	{r4, lr}
 23febd0:	4604      	mov	r4, r0
{
	free(buffer);
 23febd2:	6800      	ldr	r0, [r0, #0]
 23febd4:	f7fd ffe4 	bl	23fcba0 <free>
}
 23febd8:	4620      	mov	r0, r4
 23febda:	bd10      	pop	{r4, pc}

023febdc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23febdc:	b510      	push	{r4, lr}
 23febde:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23febe0:	6800      	ldr	r0, [r0, #0]
 23febe2:	b108      	cbz	r0, 23febe8 <_ZN6String10invalidateEv+0xc>
 23febe4:	f7fd ffdc 	bl	23fcba0 <free>
	buffer = NULL;
 23febe8:	2300      	movs	r3, #0
	capacity = len = 0;
 23febea:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23febee:	6023      	str	r3, [r4, #0]
}
 23febf0:	bd10      	pop	{r4, pc}

023febf2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23febf2:	b538      	push	{r3, r4, r5, lr}
 23febf4:	4604      	mov	r4, r0
 23febf6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23febf8:	6800      	ldr	r0, [r0, #0]
 23febfa:	3101      	adds	r1, #1
 23febfc:	f7fd ffde 	bl	23fcbbc <realloc>
	if (newbuffer) {
 23fec00:	b110      	cbz	r0, 23fec08 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fec02:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fec06:	2001      	movs	r0, #1
	}
	return 0;
}
 23fec08:	bd38      	pop	{r3, r4, r5, pc}

023fec0a <_ZN6String7reserveEj>:
{
 23fec0a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fec0c:	6803      	ldr	r3, [r0, #0]
{
 23fec0e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fec10:	b123      	cbz	r3, 23fec1c <_ZN6String7reserveEj+0x12>
 23fec12:	6843      	ldr	r3, [r0, #4]
 23fec14:	428b      	cmp	r3, r1
 23fec16:	d301      	bcc.n	23fec1c <_ZN6String7reserveEj+0x12>
 23fec18:	2001      	movs	r0, #1
}
 23fec1a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fec1c:	4620      	mov	r0, r4
 23fec1e:	f7ff ffe8 	bl	23febf2 <_ZN6String12changeBufferEj>
 23fec22:	2800      	cmp	r0, #0
 23fec24:	d0f9      	beq.n	23fec1a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fec26:	68a3      	ldr	r3, [r4, #8]
 23fec28:	2b00      	cmp	r3, #0
 23fec2a:	d1f5      	bne.n	23fec18 <_ZN6String7reserveEj+0xe>
 23fec2c:	6822      	ldr	r2, [r4, #0]
 23fec2e:	7013      	strb	r3, [r2, #0]
 23fec30:	e7f2      	b.n	23fec18 <_ZN6String7reserveEj+0xe>

023fec32 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fec32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fec34:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fec36:	4611      	mov	r1, r2
 23fec38:	9201      	str	r2, [sp, #4]
{
 23fec3a:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fec3c:	f7ff ffe5 	bl	23fec0a <_ZN6String7reserveEj>
 23fec40:	9a01      	ldr	r2, [sp, #4]
 23fec42:	b928      	cbnz	r0, 23fec50 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fec44:	4620      	mov	r0, r4
 23fec46:	f7ff ffc9 	bl	23febdc <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fec4a:	4620      	mov	r0, r4
 23fec4c:	b003      	add	sp, #12
 23fec4e:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fec50:	4629      	mov	r1, r5
	len = length;
 23fec52:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fec54:	6820      	ldr	r0, [r4, #0]
 23fec56:	f000 fc71 	bl	23ff53c <memcpy>
	buffer[len] = 0;
 23fec5a:	2100      	movs	r1, #0
 23fec5c:	6822      	ldr	r2, [r4, #0]
 23fec5e:	68a3      	ldr	r3, [r4, #8]
 23fec60:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fec62:	e7f2      	b.n	23fec4a <_ZN6String4copyEPKcj+0x18>

023fec64 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fec64:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fec66:	b513      	push	{r0, r1, r4, lr}
 23fec68:	4604      	mov	r4, r0
	capacity = 0;
 23fec6a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fec6e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fec70:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fec72:	b141      	cbz	r1, 23fec86 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fec74:	4608      	mov	r0, r1
 23fec76:	9101      	str	r1, [sp, #4]
 23fec78:	f7fc f872 	bl	23fad60 <strlen>
 23fec7c:	9901      	ldr	r1, [sp, #4]
 23fec7e:	4602      	mov	r2, r0
 23fec80:	4620      	mov	r0, r4
 23fec82:	f7ff ffd6 	bl	23fec32 <_ZN6String4copyEPKcj>
}
 23fec86:	4620      	mov	r0, r4
 23fec88:	b002      	add	sp, #8
 23fec8a:	bd10      	pop	{r4, pc}

023fec8c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fec8c:	b538      	push	{r3, r4, r5, lr}
 23fec8e:	4605      	mov	r5, r0
	if (buffer) {
 23fec90:	6800      	ldr	r0, [r0, #0]
{
 23fec92:	460c      	mov	r4, r1
	if (buffer) {
 23fec94:	b168      	cbz	r0, 23fecb2 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23fec96:	686a      	ldr	r2, [r5, #4]
 23fec98:	688b      	ldr	r3, [r1, #8]
 23fec9a:	429a      	cmp	r2, r3
 23fec9c:	d307      	bcc.n	23fecae <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23fec9e:	6809      	ldr	r1, [r1, #0]
 23feca0:	f000 fcc1 	bl	23ff626 <strcpy>
			len = rhs.len;
 23feca4:	68a3      	ldr	r3, [r4, #8]
 23feca6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23feca8:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fecaa:	60a3      	str	r3, [r4, #8]
}
 23fecac:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fecae:	f7fd ff77 	bl	23fcba0 <free>
	buffer = rhs.buffer;
 23fecb2:	6823      	ldr	r3, [r4, #0]
 23fecb4:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fecb6:	6863      	ldr	r3, [r4, #4]
 23fecb8:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fecba:	68a3      	ldr	r3, [r4, #8]
 23fecbc:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fecbe:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fecc0:	e9c4 3300 	strd	r3, r3, [r4]
 23fecc4:	e7f1      	b.n	23fecaa <_ZN6String4moveERS_+0x1e>

023fecc6 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fecc6:	2300      	movs	r3, #0
String::String(String &&rval)
 23fecc8:	b510      	push	{r4, lr}
 23fecca:	4604      	mov	r4, r0
	capacity = 0;
 23feccc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fecd0:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fecd2:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fecd4:	f7ff ffda 	bl	23fec8c <_ZN6String4moveERS_>
}
 23fecd8:	4620      	mov	r0, r4
 23fecda:	bd10      	pop	{r4, pc}

023fecdc <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fecdc:	4288      	cmp	r0, r1
{
 23fecde:	b510      	push	{r4, lr}
 23fece0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fece2:	d005      	beq.n	23fecf0 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fece4:	680b      	ldr	r3, [r1, #0]
 23fece6:	b12b      	cbz	r3, 23fecf4 <_ZN6StringaSERKS_+0x18>
 23fece8:	688a      	ldr	r2, [r1, #8]
 23fecea:	4619      	mov	r1, r3
 23fecec:	f7ff ffa1 	bl	23fec32 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fecf0:	4620      	mov	r0, r4
 23fecf2:	bd10      	pop	{r4, pc}
	else invalidate();
 23fecf4:	f7ff ff72 	bl	23febdc <_ZN6String10invalidateEv>
 23fecf8:	e7fa      	b.n	23fecf0 <_ZN6StringaSERKS_+0x14>

023fecfa <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fecfa:	2300      	movs	r3, #0
String::String(const String &value)
 23fecfc:	b510      	push	{r4, lr}
 23fecfe:	4604      	mov	r4, r0
	capacity = 0;
 23fed00:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fed04:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fed06:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fed08:	f7ff ffe8 	bl	23fecdc <_ZN6StringaSERKS_>
}
 23fed0c:	4620      	mov	r0, r4
 23fed0e:	bd10      	pop	{r4, pc}

023fed10 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fed10:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fed12:	2000      	movs	r0, #0
 23fed14:	4b04      	ldr	r3, [pc, #16]	; (23fed28 <_GLOBAL__sub_I_System+0x18>)
 23fed16:	601a      	str	r2, [r3, #0]
 23fed18:	4b04      	ldr	r3, [pc, #16]	; (23fed2c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fed1a:	4a05      	ldr	r2, [pc, #20]	; (23fed30 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fed1c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fed20:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fed22:	f7fd bdb5 	b.w	23fc890 <set_system_mode>
 23fed26:	bf00      	nop
 23fed28:	1007aeac 	.word	0x1007aeac
 23fed2c:	1007aea0 	.word	0x1007aea0
 23fed30:	ffff0000 	.word	0xffff0000

023fed34 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 23fed34:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fed36:	2000      	movs	r0, #0
 23fed38:	f7fd fe60 	bl	23fc9fc <spark_sync_time_pending>
 23fed3c:	b128      	cbz	r0, 23fed4a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fed3e:	f7fd fe41 	bl	23fc9c4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fed42:	f080 0001 	eor.w	r0, r0, #1
 23fed46:	b2c0      	uxtb	r0, r0
    }
 23fed48:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23fed4a:	2001      	movs	r0, #1
 23fed4c:	e7fc      	b.n	23fed48 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023fed50 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23fed50:	b530      	push	{r4, r5, lr}
 23fed52:	b093      	sub	sp, #76	; 0x4c
 23fed54:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23fed58:	4b19      	ldr	r3, [pc, #100]	; (23fedc0 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23fed5a:	4604      	mov	r4, r0
    t += time_zone_cache;
 23fed5c:	e9d3 1000 	ldrd	r1, r0, [r3]
 23fed60:	9b01      	ldr	r3, [sp, #4]
 23fed62:	1852      	adds	r2, r2, r1
 23fed64:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23fed68:	4816      	ldr	r0, [pc, #88]	; (23fedc4 <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23fed6a:	2500      	movs	r5, #0
    t += dst_current_cache;
 23fed6c:	e9d0 1000 	ldrd	r1, r0, [r0]
 23fed70:	1852      	adds	r2, r2, r1
 23fed72:	eb43 0300 	adc.w	r3, r3, r0
 23fed76:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23fed7a:	2224      	movs	r2, #36	; 0x24
 23fed7c:	2100      	movs	r1, #0
 23fed7e:	eb0d 0002 	add.w	r0, sp, r2
 23fed82:	f000 fc02 	bl	23ff58a <memset>
    localtime_r(&t, &calendar_time);
 23fed86:	a909      	add	r1, sp, #36	; 0x24
 23fed88:	4668      	mov	r0, sp
 23fed8a:	f7fd ff87 	bl	23fcc9c <localtime_r>
    char ascstr[26] = {};
 23fed8e:	2216      	movs	r2, #22
 23fed90:	4629      	mov	r1, r5
 23fed92:	a803      	add	r0, sp, #12
 23fed94:	9502      	str	r5, [sp, #8]
 23fed96:	f000 fbf8 	bl	23ff58a <memset>
    asctime_r(&calendar_time, ascstr);
 23fed9a:	a902      	add	r1, sp, #8
 23fed9c:	a809      	add	r0, sp, #36	; 0x24
 23fed9e:	f000 fb99 	bl	23ff4d4 <asctime_r>
    int len = strlen(ascstr);
 23feda2:	a802      	add	r0, sp, #8
 23feda4:	f7fb ffdc 	bl	23fad60 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23feda8:	ab12      	add	r3, sp, #72	; 0x48
 23fedaa:	4418      	add	r0, r3
 23fedac:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23fedb0:	a902      	add	r1, sp, #8
 23fedb2:	4620      	mov	r0, r4
 23fedb4:	f7ff ff56 	bl	23fec64 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fedb8:	4620      	mov	r0, r4
 23fedba:	b013      	add	sp, #76	; 0x4c
 23fedbc:	bd30      	pop	{r4, r5, pc}
 23fedbe:	bf00      	nop
 23fedc0:	1007aec0 	.word	0x1007aec0
 23fedc4:	1007aeb8 	.word	0x1007aeb8

023fedc8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 23fedc8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23fedca:	2000      	movs	r0, #0
 23fedcc:	f7fd fa6c 	bl	23fc2a8 <hal_rtc_time_is_valid>
    if (rtcstate)
 23fedd0:	4604      	mov	r4, r0
 23fedd2:	b9a0      	cbnz	r0, 23fedfe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23fedd4:	f7fd fd4e 	bl	23fc874 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23fedd8:	2801      	cmp	r0, #1
 23fedda:	d110      	bne.n	23fedfe <_ZN9TimeClass7isValidEv+0x36>
 23feddc:	4620      	mov	r0, r4
 23fedde:	f7fd fd9d 	bl	23fc91c <system_thread_get_state>
 23fede2:	b960      	cbnz	r0, 23fedfe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23fede4:	f7ff ffa6 	bl	23fed34 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fede8:	b910      	cbnz	r0, 23fedf0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23fedea:	f7fd fdcf 	bl	23fc98c <spark_process>
        while (_while() && !_condition()) {
 23fedee:	e7f9      	b.n	23fede4 <_ZN9TimeClass7isValidEv+0x1c>
 23fedf0:	f7ff ffa0 	bl	23fed34 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23fedf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23fedf8:	2000      	movs	r0, #0
 23fedfa:	f7fd ba55 	b.w	23fc2a8 <hal_rtc_time_is_valid>
}
 23fedfe:	4620      	mov	r0, r4
 23fee00:	bd10      	pop	{r4, pc}

023fee02 <_ZN9TimeClass3nowEv>:
{
 23fee02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23fee04:	f7ff ffe0 	bl	23fedc8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23fee08:	2210      	movs	r2, #16
 23fee0a:	2100      	movs	r1, #0
 23fee0c:	4668      	mov	r0, sp
 23fee0e:	f000 fbbc 	bl	23ff58a <memset>
    hal_rtc_get_time(&tv, nullptr);
 23fee12:	2100      	movs	r1, #0
 23fee14:	4668      	mov	r0, sp
 23fee16:	f7fd fa55 	bl	23fc2c4 <hal_rtc_get_time>
}
 23fee1a:	9800      	ldr	r0, [sp, #0]
 23fee1c:	b005      	add	sp, #20
 23fee1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fee24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fee24:	4b02      	ldr	r3, [pc, #8]	; (23fee30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fee26:	681a      	ldr	r2, [r3, #0]
 23fee28:	4b02      	ldr	r3, [pc, #8]	; (23fee34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fee2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fee2c:	4770      	bx	lr
 23fee2e:	bf00      	nop
 23fee30:	1007ad14 	.word	0x1007ad14
 23fee34:	1007aeb0 	.word	0x1007aeb0

023fee38 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fee38:	4770      	bx	lr

023fee3a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fee3a:	7441      	strb	r1, [r0, #17]
}
 23fee3c:	4770      	bx	lr

023fee3e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fee3e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fee40:	7c00      	ldrb	r0, [r0, #16]
 23fee42:	f7fd fc45 	bl	23fc6d0 <hal_usart_available_data_for_write>
}
 23fee46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee4a:	bd08      	pop	{r3, pc}

023fee4c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fee4c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fee4e:	7c00      	ldrb	r0, [r0, #16]
 23fee50:	f7fd fbf8 	bl	23fc644 <hal_usart_available>
}
 23fee54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee58:	bd08      	pop	{r3, pc}

023fee5a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fee5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fee5c:	7c00      	ldrb	r0, [r0, #16]
 23fee5e:	f7fd fc0d 	bl	23fc67c <hal_usart_peek>
}
 23fee62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee66:	bd08      	pop	{r3, pc}

023fee68 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fee68:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fee6a:	7c00      	ldrb	r0, [r0, #16]
 23fee6c:	f7fd fbf8 	bl	23fc660 <hal_usart_read>
}
 23fee70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee74:	bd08      	pop	{r3, pc}

023fee76 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fee76:	7c00      	ldrb	r0, [r0, #16]
 23fee78:	f7fd bc0e 	b.w	23fc698 <hal_usart_flush>

023fee7c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fee7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee7e:	7c45      	ldrb	r5, [r0, #17]
{
 23fee80:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee82:	b12d      	cbz	r5, 23fee90 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fee84:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fee86:	b003      	add	sp, #12
 23fee88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fee8c:	f7fd bbcc 	b.w	23fc628 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee90:	7c00      	ldrb	r0, [r0, #16]
 23fee92:	9101      	str	r1, [sp, #4]
 23fee94:	f7fd fc1c 	bl	23fc6d0 <hal_usart_available_data_for_write>
 23fee98:	2800      	cmp	r0, #0
 23fee9a:	9901      	ldr	r1, [sp, #4]
 23fee9c:	dcf2      	bgt.n	23fee84 <_ZN11USARTSerial5writeEh+0x8>
}
 23fee9e:	4628      	mov	r0, r5
 23feea0:	b003      	add	sp, #12
 23feea2:	bd30      	pop	{r4, r5, pc}

023feea4 <_ZN11USARTSerialD0Ev>:
 23feea4:	b510      	push	{r4, lr}
 23feea6:	4604      	mov	r4, r0
 23feea8:	2114      	movs	r1, #20
 23feeaa:	f7fb ff82 	bl	23fadb2 <_ZdlPvj>
 23feeae:	4620      	mov	r0, r4
 23feeb0:	bd10      	pop	{r4, pc}
	...

023feeb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feeb4:	b510      	push	{r4, lr}
 23feeb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feeba:	4604      	mov	r4, r0
 23feebc:	4608      	mov	r0, r1
 23feebe:	4611      	mov	r1, r2
 23feec0:	2200      	movs	r2, #0
 23feec2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feec6:	4b04      	ldr	r3, [pc, #16]	; (23feed8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23feec8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feeca:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feecc:	2301      	movs	r3, #1
 23feece:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feed0:	f7fd fc1a 	bl	23fc708 <hal_usart_init_ex>
}
 23feed4:	4620      	mov	r0, r4
 23feed6:	bd10      	pop	{r4, pc}
 23feed8:	023ffd74 	.word	0x023ffd74

023feedc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23feedc:	2300      	movs	r3, #0
 23feede:	7c00      	ldrb	r0, [r0, #16]
 23feee0:	f7fd bc04 	b.w	23fc6ec <hal_usart_begin_config>

023feee4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23feee4:	2200      	movs	r2, #0
 23feee6:	f7ff bff9 	b.w	23feedc <_ZN11USARTSerial5beginEmm>

023feeea <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23feeea:	7c00      	ldrb	r0, [r0, #16]
 23feeec:	f7fd bb8e 	b.w	23fc60c <hal_usart_end>

023feef0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23feef0:	7c00      	ldrb	r0, [r0, #16]
 23feef2:	f7fd bbdf 	b.w	23fc6b4 <hal_usart_is_enabled>

023feef6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feef6:	7441      	strb	r1, [r0, #17]
}
 23feef8:	4770      	bx	lr

023feefa <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23feefa:	4770      	bx	lr

023feefc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23feefc:	4770      	bx	lr

023feefe <_ZN9USBSerial4readEv>:
{
 23feefe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fef00:	2100      	movs	r1, #0
 23fef02:	7c00      	ldrb	r0, [r0, #16]
 23fef04:	f7fd fc54 	bl	23fc7b0 <HAL_USB_USART_Receive_Data>
}
 23fef08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fef0c:	bd08      	pop	{r3, pc}

023fef0e <_ZN9USBSerial4peekEv>:
{
 23fef0e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fef10:	2101      	movs	r1, #1
 23fef12:	7c00      	ldrb	r0, [r0, #16]
 23fef14:	f7fd fc4c 	bl	23fc7b0 <HAL_USB_USART_Receive_Data>
}
 23fef18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fef1c:	bd08      	pop	{r3, pc}

023fef1e <_ZN9USBSerial17availableForWriteEv>:
{
 23fef1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fef20:	7c00      	ldrb	r0, [r0, #16]
 23fef22:	f7fd fc37 	bl	23fc794 <HAL_USB_USART_Available_Data_For_Write>
}
 23fef26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fef2a:	bd08      	pop	{r3, pc}

023fef2c <_ZN9USBSerial9availableEv>:
{
 23fef2c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fef2e:	7c00      	ldrb	r0, [r0, #16]
 23fef30:	f7fd fc22 	bl	23fc778 <HAL_USB_USART_Available_Data>
}
 23fef34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fef38:	bd08      	pop	{r3, pc}

023fef3a <_ZN9USBSerial5writeEh>:
{
 23fef3a:	b513      	push	{r0, r1, r4, lr}
 23fef3c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fef3e:	7c00      	ldrb	r0, [r0, #16]
{
 23fef40:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fef42:	f7fd fc27 	bl	23fc794 <HAL_USB_USART_Available_Data_For_Write>
 23fef46:	2800      	cmp	r0, #0
 23fef48:	9901      	ldr	r1, [sp, #4]
 23fef4a:	dc01      	bgt.n	23fef50 <_ZN9USBSerial5writeEh+0x16>
 23fef4c:	7c60      	ldrb	r0, [r4, #17]
 23fef4e:	b120      	cbz	r0, 23fef5a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fef50:	7c20      	ldrb	r0, [r4, #16]
 23fef52:	f7fd fc3b 	bl	23fc7cc <HAL_USB_USART_Send_Data>
 23fef56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fef5a:	b002      	add	sp, #8
 23fef5c:	bd10      	pop	{r4, pc}

023fef5e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fef5e:	7c00      	ldrb	r0, [r0, #16]
 23fef60:	f7fd bc42 	b.w	23fc7e8 <HAL_USB_USART_Flush_Data>

023fef64 <_ZN9USBSerialD0Ev>:
 23fef64:	b510      	push	{r4, lr}
 23fef66:	4604      	mov	r4, r0
 23fef68:	2114      	movs	r1, #20
 23fef6a:	f7fb ff22 	bl	23fadb2 <_ZdlPvj>
 23fef6e:	4620      	mov	r0, r4
 23fef70:	bd10      	pop	{r4, pc}
	...

023fef74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fef74:	b510      	push	{r4, lr}
 23fef76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef7a:	4604      	mov	r4, r0
 23fef7c:	4608      	mov	r0, r1
 23fef7e:	2100      	movs	r1, #0
 23fef80:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fef84:	4b04      	ldr	r3, [pc, #16]	; (23fef98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fef86:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fef88:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fef8a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fef8c:	4611      	mov	r1, r2
  _blocking = true;
 23fef8e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fef90:	f7fd fbc8 	bl	23fc724 <HAL_USB_USART_Init>
}
 23fef94:	4620      	mov	r0, r4
 23fef96:	bd10      	pop	{r4, pc}
 23fef98:	023ffda4 	.word	0x023ffda4

023fef9c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fef9c:	2200      	movs	r2, #0
 23fef9e:	7c00      	ldrb	r0, [r0, #16]
 23fefa0:	f7fd bbce 	b.w	23fc740 <HAL_USB_USART_Begin>

023fefa4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fefa4:	7c00      	ldrb	r0, [r0, #16]
 23fefa6:	f7fd bbd9 	b.w	23fc75c <HAL_USB_USART_End>

023fefaa <_Z19acquireSerialBufferv>:
{
 23fefaa:	b510      	push	{r4, lr}
 23fefac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fefae:	2214      	movs	r2, #20
 23fefb0:	2100      	movs	r1, #0
 23fefb2:	f000 faea 	bl	23ff58a <memset>
}
 23fefb6:	4620      	mov	r0, r4
 23fefb8:	bd10      	pop	{r4, pc}
	...

023fefbc <_Z16_fetch_usbserialv>:
{
 23fefbc:	b510      	push	{r4, lr}
 23fefbe:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fefc0:	a803      	add	r0, sp, #12
 23fefc2:	f7ff fff2 	bl	23fefaa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fefc6:	4c0c      	ldr	r4, [pc, #48]	; (23feff8 <_Z16_fetch_usbserialv+0x3c>)
 23fefc8:	e8d4 1f8f 	ldab	r1, [r4]
 23fefcc:	f011 0101 	ands.w	r1, r1, #1
 23fefd0:	d10f      	bne.n	23feff2 <_Z16_fetch_usbserialv+0x36>
 23fefd2:	4620      	mov	r0, r4
 23fefd4:	9101      	str	r1, [sp, #4]
 23fefd6:	f7fb fefb 	bl	23fadd0 <__cxa_guard_acquire>
 23fefda:	9901      	ldr	r1, [sp, #4]
 23fefdc:	b148      	cbz	r0, 23feff2 <_Z16_fetch_usbserialv+0x36>
 23fefde:	aa03      	add	r2, sp, #12
 23fefe0:	4806      	ldr	r0, [pc, #24]	; (23feffc <_Z16_fetch_usbserialv+0x40>)
 23fefe2:	f7ff ffc7 	bl	23fef74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fefe6:	4620      	mov	r0, r4
 23fefe8:	f7fb fef7 	bl	23fadda <__cxa_guard_release>
 23fefec:	4804      	ldr	r0, [pc, #16]	; (23ff000 <_Z16_fetch_usbserialv+0x44>)
 23fefee:	f000 fa97 	bl	23ff520 <atexit>
	return _usbserial;
}
 23feff2:	4802      	ldr	r0, [pc, #8]	; (23feffc <_Z16_fetch_usbserialv+0x40>)
 23feff4:	b008      	add	sp, #32
 23feff6:	bd10      	pop	{r4, pc}
 23feff8:	1007aec8 	.word	0x1007aec8
 23feffc:	1007aecc 	.word	0x1007aecc
 23ff000:	023feefb 	.word	0x023feefb

023ff004 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff004:	2200      	movs	r2, #0
 23ff006:	6840      	ldr	r0, [r0, #4]
 23ff008:	4611      	mov	r1, r2
 23ff00a:	f7fd bd3d 	b.w	23fca88 <network_ready>

023ff00e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff00e:	2200      	movs	r2, #0
 23ff010:	6840      	ldr	r0, [r0, #4]
 23ff012:	4611      	mov	r1, r2
 23ff014:	f7fd bd70 	b.w	23fcaf8 <network_listening>

023ff018 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff018:	2200      	movs	r2, #0
 23ff01a:	6840      	ldr	r0, [r0, #4]
 23ff01c:	4611      	mov	r1, r2
 23ff01e:	f7fd bd87 	b.w	23fcb30 <network_get_listen_timeout>

023ff022 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff022:	2200      	movs	r2, #0
 23ff024:	6840      	ldr	r0, [r0, #4]
 23ff026:	f7fd bd75 	b.w	23fcb14 <network_set_listen_timeout>

023ff02a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff02a:	2200      	movs	r2, #0
 23ff02c:	6840      	ldr	r0, [r0, #4]
 23ff02e:	f081 0101 	eor.w	r1, r1, #1
 23ff032:	f7fd bd53 	b.w	23fcadc <network_listen>

023ff036 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff036:	2300      	movs	r3, #0
 23ff038:	6840      	ldr	r0, [r0, #4]
 23ff03a:	461a      	mov	r2, r3
 23ff03c:	4619      	mov	r1, r3
 23ff03e:	f7fd bd3f 	b.w	23fcac0 <network_off>

023ff042 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff042:	2300      	movs	r3, #0
 23ff044:	6840      	ldr	r0, [r0, #4]
 23ff046:	461a      	mov	r2, r3
 23ff048:	4619      	mov	r1, r3
 23ff04a:	f7fd bd2b 	b.w	23fcaa4 <network_on>

023ff04e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff04e:	2200      	movs	r2, #0
 23ff050:	6840      	ldr	r0, [r0, #4]
 23ff052:	4611      	mov	r1, r2
 23ff054:	f7fd bcfc 	b.w	23fca50 <network_connecting>

023ff058 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff058:	2200      	movs	r2, #0
 23ff05a:	2102      	movs	r1, #2
 23ff05c:	6840      	ldr	r0, [r0, #4]
 23ff05e:	f7fd bd05 	b.w	23fca6c <network_disconnect>

023ff062 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff062:	2300      	movs	r3, #0
 23ff064:	6840      	ldr	r0, [r0, #4]
 23ff066:	461a      	mov	r2, r3
 23ff068:	f7fd bce4 	b.w	23fca34 <network_connect>

023ff06c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff06c:	2204      	movs	r2, #4
 23ff06e:	4b02      	ldr	r3, [pc, #8]	; (23ff078 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff070:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff072:	4a02      	ldr	r2, [pc, #8]	; (23ff07c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff074:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff076:	4770      	bx	lr
 23ff078:	1007aee0 	.word	0x1007aee0
 23ff07c:	023ffdd4 	.word	0x023ffdd4

023ff080 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff080:	4b01      	ldr	r3, [pc, #4]	; (23ff088 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff082:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff084:	4770      	bx	lr
 23ff086:	bf00      	nop
 23ff088:	1007ad18 	.word	0x1007ad18

023ff08c <serialEventRun>:
{
 23ff08c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff08e:	4b0f      	ldr	r3, [pc, #60]	; (23ff0cc <serialEventRun+0x40>)
 23ff090:	b143      	cbz	r3, 23ff0a4 <serialEventRun+0x18>
 23ff092:	f7ff ff93 	bl	23fefbc <_Z16_fetch_usbserialv>
 23ff096:	6803      	ldr	r3, [r0, #0]
 23ff098:	691b      	ldr	r3, [r3, #16]
 23ff09a:	4798      	blx	r3
 23ff09c:	2800      	cmp	r0, #0
 23ff09e:	dd01      	ble.n	23ff0a4 <serialEventRun+0x18>
        serialEvent();
 23ff0a0:	e000      	b.n	23ff0a4 <serialEventRun+0x18>
 23ff0a2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff0a4:	4b0a      	ldr	r3, [pc, #40]	; (23ff0d0 <serialEventRun+0x44>)
 23ff0a6:	b143      	cbz	r3, 23ff0ba <serialEventRun+0x2e>
 23ff0a8:	f000 f97c 	bl	23ff3a4 <_Z22__fetch_global_Serial1v>
 23ff0ac:	6803      	ldr	r3, [r0, #0]
 23ff0ae:	691b      	ldr	r3, [r3, #16]
 23ff0b0:	4798      	blx	r3
 23ff0b2:	2800      	cmp	r0, #0
 23ff0b4:	dd01      	ble.n	23ff0ba <serialEventRun+0x2e>
        serialEvent1();
 23ff0b6:	e000      	b.n	23ff0ba <serialEventRun+0x2e>
 23ff0b8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff0ba:	4b06      	ldr	r3, [pc, #24]	; (23ff0d4 <serialEventRun+0x48>)
 23ff0bc:	b10b      	cbz	r3, 23ff0c2 <serialEventRun+0x36>
 23ff0be:	f000 f9b7 	bl	23ff430 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff0c2:	4b05      	ldr	r3, [pc, #20]	; (23ff0d8 <serialEventRun+0x4c>)
 23ff0c4:	b10b      	cbz	r3, 23ff0ca <serialEventRun+0x3e>
 23ff0c6:	f000 f9e9 	bl	23ff49c <_Z15serialEventRun3v>
}
 23ff0ca:	bd08      	pop	{r3, pc}
	...

023ff0dc <_post_loop>:
{
 23ff0dc:	b508      	push	{r3, lr}
	serialEventRun();
 23ff0de:	f7ff ffd5 	bl	23ff08c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff0e2:	f7fd f8d3 	bl	23fc28c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff0e6:	4b01      	ldr	r3, [pc, #4]	; (23ff0ec <_post_loop+0x10>)
 23ff0e8:	6018      	str	r0, [r3, #0]
}
 23ff0ea:	bd08      	pop	{r3, pc}
 23ff0ec:	1007aef0 	.word	0x1007aef0

023ff0f0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff0f0:	4805      	ldr	r0, [pc, #20]	; (23ff108 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff0f2:	4a06      	ldr	r2, [pc, #24]	; (23ff10c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff0f4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff0f6:	1a12      	subs	r2, r2, r0
 23ff0f8:	4905      	ldr	r1, [pc, #20]	; (23ff110 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff0fa:	f000 fa1f 	bl	23ff53c <memcpy>
    __backup_sram_signature = signature;
 23ff0fe:	4b05      	ldr	r3, [pc, #20]	; (23ff114 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff100:	4a05      	ldr	r2, [pc, #20]	; (23ff118 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff102:	601a      	str	r2, [r3, #0]
}
 23ff104:	bd08      	pop	{r3, pc}
 23ff106:	bf00      	nop
 23ff108:	1007b400 	.word	0x1007b400
 23ff10c:	1007b404 	.word	0x1007b404
 23ff110:	085ffd00 	.word	0x085ffd00
 23ff114:	1007b400 	.word	0x1007b400
 23ff118:	9a271c1e 	.word	0x9a271c1e

023ff11c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff11c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff11e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff120:	461a      	mov	r2, r3
 23ff122:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff126:	9300      	str	r3, [sp, #0]
 23ff128:	f7fd fc14 	bl	23fc954 <system_ctrl_set_result>
}
 23ff12c:	b003      	add	sp, #12
 23ff12e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff134 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff134:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff136:	8843      	ldrh	r3, [r0, #2]
 23ff138:	2b0a      	cmp	r3, #10
 23ff13a:	d008      	beq.n	23ff14e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff13c:	2b50      	cmp	r3, #80	; 0x50
 23ff13e:	d10b      	bne.n	23ff158 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff140:	4b09      	ldr	r3, [pc, #36]	; (23ff168 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff142:	681b      	ldr	r3, [r3, #0]
 23ff144:	b14b      	cbz	r3, 23ff15a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff146:	b003      	add	sp, #12
 23ff148:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff14c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff14e:	f7ff ffe5 	bl	23ff11c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff152:	b003      	add	sp, #12
 23ff154:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff158:	2300      	movs	r3, #0
 23ff15a:	461a      	mov	r2, r3
 23ff15c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff160:	9300      	str	r3, [sp, #0]
 23ff162:	f7fd fbf7 	bl	23fc954 <system_ctrl_set_result>
}
 23ff166:	e7f4      	b.n	23ff152 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff168:	1007aeec 	.word	0x1007aeec

023ff16c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff16c:	2100      	movs	r1, #0
{
 23ff16e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff170:	4811      	ldr	r0, [pc, #68]	; (23ff1b8 <module_user_init_hook+0x4c>)
 23ff172:	f7fd fd85 	bl	23fcc80 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff176:	4b11      	ldr	r3, [pc, #68]	; (23ff1bc <module_user_init_hook+0x50>)
 23ff178:	681a      	ldr	r2, [r3, #0]
 23ff17a:	4b11      	ldr	r3, [pc, #68]	; (23ff1c0 <module_user_init_hook+0x54>)
 23ff17c:	429a      	cmp	r2, r3
 23ff17e:	bf0c      	ite	eq
 23ff180:	2201      	moveq	r2, #1
 23ff182:	2200      	movne	r2, #0
 23ff184:	4b0f      	ldr	r3, [pc, #60]	; (23ff1c4 <module_user_init_hook+0x58>)
 23ff186:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff188:	d001      	beq.n	23ff18e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff18a:	f7ff ffb1 	bl	23ff0f0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff18e:	f7fd f853 	bl	23fc238 <HAL_RNG_GetRandomNumber>
 23ff192:	4604      	mov	r4, r0
    srand(seed);
 23ff194:	f000 fa02 	bl	23ff59c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff198:	4b0b      	ldr	r3, [pc, #44]	; (23ff1c8 <module_user_init_hook+0x5c>)
 23ff19a:	b113      	cbz	r3, 23ff1a2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff19c:	4620      	mov	r0, r4
 23ff19e:	e000      	b.n	23ff1a2 <module_user_init_hook+0x36>
 23ff1a0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff1a2:	2100      	movs	r1, #0
 23ff1a4:	4808      	ldr	r0, [pc, #32]	; (23ff1c8 <module_user_init_hook+0x5c>)
 23ff1a6:	f7fd fc37 	bl	23fca18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff1ae:	2100      	movs	r1, #0
 23ff1b0:	4806      	ldr	r0, [pc, #24]	; (23ff1cc <module_user_init_hook+0x60>)
 23ff1b2:	f7fd bbc1 	b.w	23fc938 <system_ctrl_set_app_request_handler>
 23ff1b6:	bf00      	nop
 23ff1b8:	023ff081 	.word	0x023ff081
 23ff1bc:	1007b400 	.word	0x1007b400
 23ff1c0:	9a271c1e 	.word	0x9a271c1e
 23ff1c4:	1007aee8 	.word	0x1007aee8
 23ff1c8:	00000000 	.word	0x00000000
 23ff1cc:	023ff135 	.word	0x023ff135

023ff1d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff1d0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff1d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff1d4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff1d6:	d902      	bls.n	23ff1de <pinAvailable+0xe>
    return false;
 23ff1d8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff1da:	b003      	add	sp, #12
 23ff1dc:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff1de:	f1a0 030f 	sub.w	r3, r0, #15
 23ff1e2:	2b02      	cmp	r3, #2
 23ff1e4:	d90b      	bls.n	23ff1fe <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff1e6:	2801      	cmp	r0, #1
 23ff1e8:	d821      	bhi.n	23ff22e <pinAvailable+0x5e>
 23ff1ea:	f000 f887 	bl	23ff2fc <_Z19__fetch_global_Wirev>
 23ff1ee:	2100      	movs	r1, #0
 23ff1f0:	7c00      	ldrb	r0, [r0, #16]
 23ff1f2:	f7fd f92b 	bl	23fc44c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff1f6:	f080 0001 	eor.w	r0, r0, #1
 23ff1fa:	b2c0      	uxtb	r0, r0
 23ff1fc:	e7ed      	b.n	23ff1da <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff1fe:	4d11      	ldr	r5, [pc, #68]	; (23ff244 <pinAvailable+0x74>)
 23ff200:	e8d5 1f8f 	ldab	r1, [r5]
 23ff204:	f011 0101 	ands.w	r1, r1, #1
 23ff208:	d10b      	bne.n	23ff222 <pinAvailable+0x52>
 23ff20a:	4628      	mov	r0, r5
 23ff20c:	9101      	str	r1, [sp, #4]
 23ff20e:	f7fb fddf 	bl	23fadd0 <__cxa_guard_acquire>
 23ff212:	9901      	ldr	r1, [sp, #4]
 23ff214:	b128      	cbz	r0, 23ff222 <pinAvailable+0x52>
 23ff216:	480c      	ldr	r0, [pc, #48]	; (23ff248 <pinAvailable+0x78>)
 23ff218:	f7ff fc42 	bl	23feaa0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff21c:	4628      	mov	r0, r5
 23ff21e:	f7fb fddc 	bl	23fadda <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff222:	4b09      	ldr	r3, [pc, #36]	; (23ff248 <pinAvailable+0x78>)
 23ff224:	7818      	ldrb	r0, [r3, #0]
 23ff226:	f7fd f98f 	bl	23fc548 <hal_spi_is_enabled>
 23ff22a:	2800      	cmp	r0, #0
 23ff22c:	d1d4      	bne.n	23ff1d8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff22e:	3c08      	subs	r4, #8
 23ff230:	2c01      	cmp	r4, #1
 23ff232:	d805      	bhi.n	23ff240 <pinAvailable+0x70>
 23ff234:	f000 f8b6 	bl	23ff3a4 <_Z22__fetch_global_Serial1v>
 23ff238:	7c00      	ldrb	r0, [r0, #16]
 23ff23a:	f7fd fa3b 	bl	23fc6b4 <hal_usart_is_enabled>
 23ff23e:	e7da      	b.n	23ff1f6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff240:	2001      	movs	r0, #1
 23ff242:	e7ca      	b.n	23ff1da <pinAvailable+0xa>
 23ff244:	1007ae34 	.word	0x1007ae34
 23ff248:	1007ae38 	.word	0x1007ae38

023ff24c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff24c:	281b      	cmp	r0, #27
{
 23ff24e:	b538      	push	{r3, r4, r5, lr}
 23ff250:	4604      	mov	r4, r0
 23ff252:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff254:	d80a      	bhi.n	23ff26c <pinMode+0x20>
 23ff256:	29ff      	cmp	r1, #255	; 0xff
 23ff258:	d008      	beq.n	23ff26c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff25a:	f7ff ffb9 	bl	23ff1d0 <pinAvailable>
 23ff25e:	b128      	cbz	r0, 23ff26c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff260:	4629      	mov	r1, r5
 23ff262:	4620      	mov	r0, r4
}
 23ff264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff268:	f7fd b83a 	b.w	23fc2e0 <hal_gpio_mode>
}
 23ff26c:	bd38      	pop	{r3, r4, r5, pc}

023ff26e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff26e:	b538      	push	{r3, r4, r5, lr}
 23ff270:	4604      	mov	r4, r0
 23ff272:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff274:	f7fd f842 	bl	23fc2fc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff278:	28ff      	cmp	r0, #255	; 0xff
 23ff27a:	d010      	beq.n	23ff29e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff27c:	2806      	cmp	r0, #6
 23ff27e:	d804      	bhi.n	23ff28a <digitalWrite+0x1c>
 23ff280:	234d      	movs	r3, #77	; 0x4d
 23ff282:	fa23 f000 	lsr.w	r0, r3, r0
 23ff286:	07c3      	lsls	r3, r0, #31
 23ff288:	d409      	bmi.n	23ff29e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff28a:	4620      	mov	r0, r4
 23ff28c:	f7ff ffa0 	bl	23ff1d0 <pinAvailable>
 23ff290:	b128      	cbz	r0, 23ff29e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff292:	4629      	mov	r1, r5
 23ff294:	4620      	mov	r0, r4
}
 23ff296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff29a:	f7fd b83d 	b.w	23fc318 <hal_gpio_write>
}
 23ff29e:	bd38      	pop	{r3, r4, r5, pc}

023ff2a0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23ff2a0:	b510      	push	{r4, lr}
 23ff2a2:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23ff2a4:	f7fd f82a 	bl	23fc2fc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23ff2a8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23ff2aa:	b2db      	uxtb	r3, r3
 23ff2ac:	2b01      	cmp	r3, #1
 23ff2ae:	d908      	bls.n	23ff2c2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23ff2b0:	4620      	mov	r0, r4
 23ff2b2:	f7ff ff8d 	bl	23ff1d0 <pinAvailable>
 23ff2b6:	b120      	cbz	r0, 23ff2c2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23ff2b8:	4620      	mov	r0, r4
}
 23ff2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23ff2be:	f7fd b839 	b.w	23fc334 <hal_gpio_read>
}
 23ff2c2:	2000      	movs	r0, #0
 23ff2c4:	bd10      	pop	{r4, pc}

023ff2c6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2c6:	4770      	bx	lr

023ff2c8 <_Z17acquireWireBufferv>:
{
 23ff2c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff2ca:	4b0a      	ldr	r3, [pc, #40]	; (23ff2f4 <_Z17acquireWireBufferv+0x2c>)
{
 23ff2cc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff2ce:	6003      	str	r3, [r0, #0]
 23ff2d0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2d2:	4909      	ldr	r1, [pc, #36]	; (23ff2f8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff2d4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2d6:	2020      	movs	r0, #32
 23ff2d8:	f000 f8f6 	bl	23ff4c8 <_ZnajRKSt9nothrow_t>
	};
 23ff2dc:	2520      	movs	r5, #32
 23ff2de:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2e0:	4905      	ldr	r1, [pc, #20]	; (23ff2f8 <_Z17acquireWireBufferv+0x30>)
 23ff2e2:	4628      	mov	r0, r5
	};
 23ff2e4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff2e6:	f000 f8ef 	bl	23ff4c8 <_ZnajRKSt9nothrow_t>
	};
 23ff2ea:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff2ee:	4620      	mov	r0, r4
 23ff2f0:	bd38      	pop	{r3, r4, r5, pc}
 23ff2f2:	bf00      	nop
 23ff2f4:	00010018 	.word	0x00010018
 23ff2f8:	023ffe08 	.word	0x023ffe08

023ff2fc <_Z19__fetch_global_Wirev>:
{
 23ff2fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff2fe:	4d0e      	ldr	r5, [pc, #56]	; (23ff338 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff300:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff302:	e8d5 1f8f 	ldab	r1, [r5]
 23ff306:	f011 0401 	ands.w	r4, r1, #1
 23ff30a:	d111      	bne.n	23ff330 <_Z19__fetch_global_Wirev+0x34>
 23ff30c:	4628      	mov	r0, r5
 23ff30e:	f7fb fd5f 	bl	23fadd0 <__cxa_guard_acquire>
 23ff312:	b168      	cbz	r0, 23ff330 <_Z19__fetch_global_Wirev+0x34>
 23ff314:	4668      	mov	r0, sp
 23ff316:	f7ff ffd7 	bl	23ff2c8 <_Z17acquireWireBufferv>
 23ff31a:	466a      	mov	r2, sp
 23ff31c:	4621      	mov	r1, r4
 23ff31e:	4807      	ldr	r0, [pc, #28]	; (23ff33c <_Z19__fetch_global_Wirev+0x40>)
 23ff320:	f7fe f850 	bl	23fd3c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff324:	4628      	mov	r0, r5
 23ff326:	f7fb fd58 	bl	23fadda <__cxa_guard_release>
 23ff32a:	4805      	ldr	r0, [pc, #20]	; (23ff340 <_Z19__fetch_global_Wirev+0x44>)
 23ff32c:	f000 f8f8 	bl	23ff520 <atexit>
	return wire;
}
 23ff330:	4802      	ldr	r0, [pc, #8]	; (23ff33c <_Z19__fetch_global_Wirev+0x40>)
 23ff332:	b007      	add	sp, #28
 23ff334:	bd30      	pop	{r4, r5, pc}
 23ff336:	bf00      	nop
 23ff338:	1007aef4 	.word	0x1007aef4
 23ff33c:	1007aef8 	.word	0x1007aef8
 23ff340:	023ff2c7 	.word	0x023ff2c7

023ff344 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff344:	4770      	bx	lr
	...

023ff348 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff348:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff34a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff34c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff34e:	462a      	mov	r2, r5
 23ff350:	2100      	movs	r1, #0
 23ff352:	f000 f91a 	bl	23ff58a <memset>
 23ff356:	8025      	strh	r5, [r4, #0]
 23ff358:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff35a:	4907      	ldr	r1, [pc, #28]	; (23ff378 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff35c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff35e:	8125      	strh	r5, [r4, #8]
 23ff360:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff362:	f000 f8b1 	bl	23ff4c8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff366:	4904      	ldr	r1, [pc, #16]	; (23ff378 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff368:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff36a:	4628      	mov	r0, r5
 23ff36c:	f000 f8ac 	bl	23ff4c8 <_ZnajRKSt9nothrow_t>
    };
 23ff370:	60e0      	str	r0, [r4, #12]
}
 23ff372:	4620      	mov	r0, r4
 23ff374:	bd38      	pop	{r3, r4, r5, pc}
 23ff376:	bf00      	nop
 23ff378:	023ffe08 	.word	0x023ffe08

023ff37c <__tcf_2>:
 23ff37c:	4770      	bx	lr

023ff37e <__tcf_1>:
 23ff37e:	4770      	bx	lr

023ff380 <_Z20acquireSerial1Bufferv>:
{
 23ff380:	b510      	push	{r4, lr}
 23ff382:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff384:	f7ff ffe0 	bl	23ff348 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff388:	4620      	mov	r0, r4
 23ff38a:	bd10      	pop	{r4, pc}

023ff38c <_Z20acquireSerial2Bufferv>:
 23ff38c:	b510      	push	{r4, lr}
 23ff38e:	4604      	mov	r4, r0
 23ff390:	f7ff ffda 	bl	23ff348 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff394:	4620      	mov	r0, r4
 23ff396:	bd10      	pop	{r4, pc}

023ff398 <_Z20acquireSerial3Bufferv>:
 23ff398:	b510      	push	{r4, lr}
 23ff39a:	4604      	mov	r4, r0
 23ff39c:	f7ff ffd4 	bl	23ff348 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff3a0:	4620      	mov	r0, r4
 23ff3a2:	bd10      	pop	{r4, pc}

023ff3a4 <_Z22__fetch_global_Serial1v>:
{
 23ff3a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff3a6:	4d0e      	ldr	r5, [pc, #56]	; (23ff3e0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff3a8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff3aa:	e8d5 1f8f 	ldab	r1, [r5]
 23ff3ae:	f011 0401 	ands.w	r4, r1, #1
 23ff3b2:	d111      	bne.n	23ff3d8 <_Z22__fetch_global_Serial1v+0x34>
 23ff3b4:	4628      	mov	r0, r5
 23ff3b6:	f7fb fd0b 	bl	23fadd0 <__cxa_guard_acquire>
 23ff3ba:	b168      	cbz	r0, 23ff3d8 <_Z22__fetch_global_Serial1v+0x34>
 23ff3bc:	a801      	add	r0, sp, #4
 23ff3be:	f7ff ffdf 	bl	23ff380 <_Z20acquireSerial1Bufferv>
 23ff3c2:	4621      	mov	r1, r4
 23ff3c4:	aa01      	add	r2, sp, #4
 23ff3c6:	4807      	ldr	r0, [pc, #28]	; (23ff3e4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff3c8:	f7ff fd74 	bl	23feeb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff3cc:	4628      	mov	r0, r5
 23ff3ce:	f7fb fd04 	bl	23fadda <__cxa_guard_release>
 23ff3d2:	4805      	ldr	r0, [pc, #20]	; (23ff3e8 <_Z22__fetch_global_Serial1v+0x44>)
 23ff3d4:	f000 f8a4 	bl	23ff520 <atexit>
    return serial1;
}
 23ff3d8:	4802      	ldr	r0, [pc, #8]	; (23ff3e4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff3da:	b007      	add	sp, #28
 23ff3dc:	bd30      	pop	{r4, r5, pc}
 23ff3de:	bf00      	nop
 23ff3e0:	1007af0c 	.word	0x1007af0c
 23ff3e4:	1007af18 	.word	0x1007af18
 23ff3e8:	023ff345 	.word	0x023ff345

023ff3ec <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff3ec:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3ee:	4c0d      	ldr	r4, [pc, #52]	; (23ff424 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff3f0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff3f2:	e8d4 3f8f 	ldab	r3, [r4]
 23ff3f6:	07db      	lsls	r3, r3, #31
 23ff3f8:	d411      	bmi.n	23ff41e <_Z22__fetch_global_Serial2v+0x32>
 23ff3fa:	4620      	mov	r0, r4
 23ff3fc:	f7fb fce8 	bl	23fadd0 <__cxa_guard_acquire>
 23ff400:	b168      	cbz	r0, 23ff41e <_Z22__fetch_global_Serial2v+0x32>
 23ff402:	a801      	add	r0, sp, #4
 23ff404:	f7ff ffc2 	bl	23ff38c <_Z20acquireSerial2Bufferv>
 23ff408:	2101      	movs	r1, #1
 23ff40a:	aa01      	add	r2, sp, #4
 23ff40c:	4806      	ldr	r0, [pc, #24]	; (23ff428 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff40e:	f7ff fd51 	bl	23feeb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff412:	4620      	mov	r0, r4
 23ff414:	f7fb fce1 	bl	23fadda <__cxa_guard_release>
 23ff418:	4804      	ldr	r0, [pc, #16]	; (23ff42c <_Z22__fetch_global_Serial2v+0x40>)
 23ff41a:	f000 f881 	bl	23ff520 <atexit>
	return serial2;
}
 23ff41e:	4802      	ldr	r0, [pc, #8]	; (23ff428 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff420:	b006      	add	sp, #24
 23ff422:	bd10      	pop	{r4, pc}
 23ff424:	1007af10 	.word	0x1007af10
 23ff428:	1007af2c 	.word	0x1007af2c
 23ff42c:	023ff37f 	.word	0x023ff37f

023ff430 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff430:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff432:	f7ff ffdb 	bl	23ff3ec <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff436:	4b07      	ldr	r3, [pc, #28]	; (23ff454 <_Z15serialEventRun2v+0x24>)
 23ff438:	4604      	mov	r4, r0
 23ff43a:	b153      	cbz	r3, 23ff452 <_Z15serialEventRun2v+0x22>
 23ff43c:	f7ff fd58 	bl	23feef0 <_ZN11USARTSerial9isEnabledEv>
 23ff440:	b138      	cbz	r0, 23ff452 <_Z15serialEventRun2v+0x22>
 23ff442:	6823      	ldr	r3, [r4, #0]
 23ff444:	4620      	mov	r0, r4
 23ff446:	691b      	ldr	r3, [r3, #16]
 23ff448:	4798      	blx	r3
 23ff44a:	2800      	cmp	r0, #0
 23ff44c:	dd01      	ble.n	23ff452 <_Z15serialEventRun2v+0x22>
        handler();
 23ff44e:	e000      	b.n	23ff452 <_Z15serialEventRun2v+0x22>
 23ff450:	bf00      	nop
}
 23ff452:	bd10      	pop	{r4, pc}
 23ff454:	00000000 	.word	0x00000000

023ff458 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff458:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff45a:	4c0d      	ldr	r4, [pc, #52]	; (23ff490 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff45c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff45e:	e8d4 3f8f 	ldab	r3, [r4]
 23ff462:	07db      	lsls	r3, r3, #31
 23ff464:	d411      	bmi.n	23ff48a <_Z22__fetch_global_Serial3v+0x32>
 23ff466:	4620      	mov	r0, r4
 23ff468:	f7fb fcb2 	bl	23fadd0 <__cxa_guard_acquire>
 23ff46c:	b168      	cbz	r0, 23ff48a <_Z22__fetch_global_Serial3v+0x32>
 23ff46e:	a801      	add	r0, sp, #4
 23ff470:	f7ff ff92 	bl	23ff398 <_Z20acquireSerial3Bufferv>
 23ff474:	2102      	movs	r1, #2
 23ff476:	aa01      	add	r2, sp, #4
 23ff478:	4806      	ldr	r0, [pc, #24]	; (23ff494 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff47a:	f7ff fd1b 	bl	23feeb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff47e:	4620      	mov	r0, r4
 23ff480:	f7fb fcab 	bl	23fadda <__cxa_guard_release>
 23ff484:	4804      	ldr	r0, [pc, #16]	; (23ff498 <_Z22__fetch_global_Serial3v+0x40>)
 23ff486:	f000 f84b 	bl	23ff520 <atexit>
	return serial3;
}
 23ff48a:	4802      	ldr	r0, [pc, #8]	; (23ff494 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff48c:	b006      	add	sp, #24
 23ff48e:	bd10      	pop	{r4, pc}
 23ff490:	1007af14 	.word	0x1007af14
 23ff494:	1007af40 	.word	0x1007af40
 23ff498:	023ff37d 	.word	0x023ff37d

023ff49c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff49c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff49e:	f7ff ffdb 	bl	23ff458 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff4a2:	4b07      	ldr	r3, [pc, #28]	; (23ff4c0 <_Z15serialEventRun3v+0x24>)
 23ff4a4:	4604      	mov	r4, r0
 23ff4a6:	b153      	cbz	r3, 23ff4be <_Z15serialEventRun3v+0x22>
 23ff4a8:	f7ff fd22 	bl	23feef0 <_ZN11USARTSerial9isEnabledEv>
 23ff4ac:	b138      	cbz	r0, 23ff4be <_Z15serialEventRun3v+0x22>
 23ff4ae:	6823      	ldr	r3, [r4, #0]
 23ff4b0:	4620      	mov	r0, r4
 23ff4b2:	691b      	ldr	r3, [r3, #16]
 23ff4b4:	4798      	blx	r3
 23ff4b6:	2800      	cmp	r0, #0
 23ff4b8:	dd01      	ble.n	23ff4be <_Z15serialEventRun3v+0x22>
        handler();
 23ff4ba:	e000      	b.n	23ff4be <_Z15serialEventRun3v+0x22>
 23ff4bc:	bf00      	nop
}
 23ff4be:	bd10      	pop	{r4, pc}
 23ff4c0:	00000000 	.word	0x00000000

023ff4c4 <_ZnwjRKSt9nothrow_t>:
 23ff4c4:	f7fb bc71 	b.w	23fadaa <_Znwj>

023ff4c8 <_ZnajRKSt9nothrow_t>:
 23ff4c8:	f7fb bc71 	b.w	23fadae <_Znaj>

023ff4cc <_ZSt25__throw_bad_function_callv>:
 23ff4cc:	b508      	push	{r3, lr}
 23ff4ce:	f7fd fb9f 	bl	23fcc10 <abort>
	...

023ff4d4 <asctime_r>:
 23ff4d4:	b510      	push	{r4, lr}
 23ff4d6:	460c      	mov	r4, r1
 23ff4d8:	6941      	ldr	r1, [r0, #20]
 23ff4da:	b086      	sub	sp, #24
 23ff4dc:	6903      	ldr	r3, [r0, #16]
 23ff4de:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23ff4e2:	6982      	ldr	r2, [r0, #24]
 23ff4e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23ff4e8:	9104      	str	r1, [sp, #16]
 23ff4ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23ff4ee:	6801      	ldr	r1, [r0, #0]
 23ff4f0:	9103      	str	r1, [sp, #12]
 23ff4f2:	6841      	ldr	r1, [r0, #4]
 23ff4f4:	9102      	str	r1, [sp, #8]
 23ff4f6:	6881      	ldr	r1, [r0, #8]
 23ff4f8:	9101      	str	r1, [sp, #4]
 23ff4fa:	68c1      	ldr	r1, [r0, #12]
 23ff4fc:	4620      	mov	r0, r4
 23ff4fe:	9100      	str	r1, [sp, #0]
 23ff500:	4904      	ldr	r1, [pc, #16]	; (23ff514 <asctime_r+0x40>)
 23ff502:	440b      	add	r3, r1
 23ff504:	4904      	ldr	r1, [pc, #16]	; (23ff518 <asctime_r+0x44>)
 23ff506:	440a      	add	r2, r1
 23ff508:	4904      	ldr	r1, [pc, #16]	; (23ff51c <asctime_r+0x48>)
 23ff50a:	f7fd fb65 	bl	23fcbd8 <siprintf>
 23ff50e:	4620      	mov	r0, r4
 23ff510:	b006      	add	sp, #24
 23ff512:	bd10      	pop	{r4, pc}
 23ff514:	023ffe3e 	.word	0x023ffe3e
 23ff518:	023ffe29 	.word	0x023ffe29
 23ff51c:	023ffe09 	.word	0x023ffe09

023ff520 <atexit>:
 23ff520:	2300      	movs	r3, #0
 23ff522:	4601      	mov	r1, r0
 23ff524:	461a      	mov	r2, r3
 23ff526:	4618      	mov	r0, r3
 23ff528:	f000 b958 	b.w	23ff7dc <__register_exitproc>

023ff52c <isprint>:
 23ff52c:	4b02      	ldr	r3, [pc, #8]	; (23ff538 <isprint+0xc>)
 23ff52e:	4418      	add	r0, r3
 23ff530:	7840      	ldrb	r0, [r0, #1]
 23ff532:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff536:	4770      	bx	lr
 23ff538:	023ffed2 	.word	0x023ffed2

023ff53c <memcpy>:
 23ff53c:	440a      	add	r2, r1
 23ff53e:	1e43      	subs	r3, r0, #1
 23ff540:	4291      	cmp	r1, r2
 23ff542:	d100      	bne.n	23ff546 <memcpy+0xa>
 23ff544:	4770      	bx	lr
 23ff546:	b510      	push	{r4, lr}
 23ff548:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff54c:	4291      	cmp	r1, r2
 23ff54e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff552:	d1f9      	bne.n	23ff548 <memcpy+0xc>
 23ff554:	bd10      	pop	{r4, pc}

023ff556 <memmove>:
 23ff556:	4288      	cmp	r0, r1
 23ff558:	b510      	push	{r4, lr}
 23ff55a:	eb01 0402 	add.w	r4, r1, r2
 23ff55e:	d902      	bls.n	23ff566 <memmove+0x10>
 23ff560:	4284      	cmp	r4, r0
 23ff562:	4623      	mov	r3, r4
 23ff564:	d807      	bhi.n	23ff576 <memmove+0x20>
 23ff566:	1e43      	subs	r3, r0, #1
 23ff568:	42a1      	cmp	r1, r4
 23ff56a:	d008      	beq.n	23ff57e <memmove+0x28>
 23ff56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff570:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff574:	e7f8      	b.n	23ff568 <memmove+0x12>
 23ff576:	4402      	add	r2, r0
 23ff578:	4601      	mov	r1, r0
 23ff57a:	428a      	cmp	r2, r1
 23ff57c:	d100      	bne.n	23ff580 <memmove+0x2a>
 23ff57e:	bd10      	pop	{r4, pc}
 23ff580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff584:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff588:	e7f7      	b.n	23ff57a <memmove+0x24>

023ff58a <memset>:
 23ff58a:	4402      	add	r2, r0
 23ff58c:	4603      	mov	r3, r0
 23ff58e:	4293      	cmp	r3, r2
 23ff590:	d100      	bne.n	23ff594 <memset+0xa>
 23ff592:	4770      	bx	lr
 23ff594:	f803 1b01 	strb.w	r1, [r3], #1
 23ff598:	e7f9      	b.n	23ff58e <memset+0x4>
	...

023ff59c <srand>:
 23ff59c:	b538      	push	{r3, r4, r5, lr}
 23ff59e:	4b10      	ldr	r3, [pc, #64]	; (23ff5e0 <srand+0x44>)
 23ff5a0:	4604      	mov	r4, r0
 23ff5a2:	681d      	ldr	r5, [r3, #0]
 23ff5a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5a6:	b9b3      	cbnz	r3, 23ff5d6 <srand+0x3a>
 23ff5a8:	2018      	movs	r0, #24
 23ff5aa:	f7fd faeb 	bl	23fcb84 <malloc>
 23ff5ae:	4602      	mov	r2, r0
 23ff5b0:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff5b2:	b920      	cbnz	r0, 23ff5be <srand+0x22>
 23ff5b4:	4b0b      	ldr	r3, [pc, #44]	; (23ff5e4 <srand+0x48>)
 23ff5b6:	2142      	movs	r1, #66	; 0x42
 23ff5b8:	480b      	ldr	r0, [pc, #44]	; (23ff5e8 <srand+0x4c>)
 23ff5ba:	f7fd fb53 	bl	23fcc64 <__assert_func>
 23ff5be:	490b      	ldr	r1, [pc, #44]	; (23ff5ec <srand+0x50>)
 23ff5c0:	4b0b      	ldr	r3, [pc, #44]	; (23ff5f0 <srand+0x54>)
 23ff5c2:	e9c0 1300 	strd	r1, r3, [r0]
 23ff5c6:	4b0b      	ldr	r3, [pc, #44]	; (23ff5f4 <srand+0x58>)
 23ff5c8:	2100      	movs	r1, #0
 23ff5ca:	6083      	str	r3, [r0, #8]
 23ff5cc:	230b      	movs	r3, #11
 23ff5ce:	8183      	strh	r3, [r0, #12]
 23ff5d0:	2001      	movs	r0, #1
 23ff5d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff5d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5d8:	2200      	movs	r2, #0
 23ff5da:	611c      	str	r4, [r3, #16]
 23ff5dc:	615a      	str	r2, [r3, #20]
 23ff5de:	bd38      	pop	{r3, r4, r5, pc}
 23ff5e0:	1007ad18 	.word	0x1007ad18
 23ff5e4:	023ffe62 	.word	0x023ffe62
 23ff5e8:	023ffe79 	.word	0x023ffe79
 23ff5ec:	abcd330e 	.word	0xabcd330e
 23ff5f0:	e66d1234 	.word	0xe66d1234
 23ff5f4:	0005deec 	.word	0x0005deec

023ff5f8 <strchr>:
 23ff5f8:	b2c9      	uxtb	r1, r1
 23ff5fa:	4603      	mov	r3, r0
 23ff5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff600:	b11a      	cbz	r2, 23ff60a <strchr+0x12>
 23ff602:	428a      	cmp	r2, r1
 23ff604:	d1f9      	bne.n	23ff5fa <strchr+0x2>
 23ff606:	4618      	mov	r0, r3
 23ff608:	4770      	bx	lr
 23ff60a:	2900      	cmp	r1, #0
 23ff60c:	bf18      	it	ne
 23ff60e:	2300      	movne	r3, #0
 23ff610:	e7f9      	b.n	23ff606 <strchr+0xe>

023ff612 <strchrnul>:
 23ff612:	b510      	push	{r4, lr}
 23ff614:	4604      	mov	r4, r0
 23ff616:	f7ff ffef 	bl	23ff5f8 <strchr>
 23ff61a:	b918      	cbnz	r0, 23ff624 <strchrnul+0x12>
 23ff61c:	4620      	mov	r0, r4
 23ff61e:	f7fb fb9f 	bl	23fad60 <strlen>
 23ff622:	4420      	add	r0, r4
 23ff624:	bd10      	pop	{r4, pc}

023ff626 <strcpy>:
 23ff626:	4603      	mov	r3, r0
 23ff628:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff62c:	f803 2b01 	strb.w	r2, [r3], #1
 23ff630:	2a00      	cmp	r2, #0
 23ff632:	d1f9      	bne.n	23ff628 <strcpy+0x2>
 23ff634:	4770      	bx	lr
	...

023ff638 <strdup>:
 23ff638:	4b02      	ldr	r3, [pc, #8]	; (23ff644 <strdup+0xc>)
 23ff63a:	4601      	mov	r1, r0
 23ff63c:	6818      	ldr	r0, [r3, #0]
 23ff63e:	f000 b803 	b.w	23ff648 <_strdup_r>
 23ff642:	bf00      	nop
 23ff644:	1007ad18 	.word	0x1007ad18

023ff648 <_strdup_r>:
 23ff648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff64a:	4604      	mov	r4, r0
 23ff64c:	4608      	mov	r0, r1
 23ff64e:	460d      	mov	r5, r1
 23ff650:	f7fb fb86 	bl	23fad60 <strlen>
 23ff654:	1c42      	adds	r2, r0, #1
 23ff656:	4620      	mov	r0, r4
 23ff658:	4611      	mov	r1, r2
 23ff65a:	9201      	str	r2, [sp, #4]
 23ff65c:	f7fd fae6 	bl	23fcc2c <_malloc_r>
 23ff660:	4604      	mov	r4, r0
 23ff662:	b118      	cbz	r0, 23ff66c <_strdup_r+0x24>
 23ff664:	9a01      	ldr	r2, [sp, #4]
 23ff666:	4629      	mov	r1, r5
 23ff668:	f7ff ff68 	bl	23ff53c <memcpy>
 23ff66c:	4620      	mov	r0, r4
 23ff66e:	b003      	add	sp, #12
 23ff670:	bd30      	pop	{r4, r5, pc}

023ff672 <strncmp>:
 23ff672:	b510      	push	{r4, lr}
 23ff674:	b17a      	cbz	r2, 23ff696 <strncmp+0x24>
 23ff676:	4603      	mov	r3, r0
 23ff678:	3901      	subs	r1, #1
 23ff67a:	1884      	adds	r4, r0, r2
 23ff67c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff680:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff684:	4290      	cmp	r0, r2
 23ff686:	d101      	bne.n	23ff68c <strncmp+0x1a>
 23ff688:	42a3      	cmp	r3, r4
 23ff68a:	d101      	bne.n	23ff690 <strncmp+0x1e>
 23ff68c:	1a80      	subs	r0, r0, r2
 23ff68e:	bd10      	pop	{r4, pc}
 23ff690:	2800      	cmp	r0, #0
 23ff692:	d1f3      	bne.n	23ff67c <strncmp+0xa>
 23ff694:	e7fa      	b.n	23ff68c <strncmp+0x1a>
 23ff696:	4610      	mov	r0, r2
 23ff698:	e7f9      	b.n	23ff68e <strncmp+0x1c>

023ff69a <strrchr>:
 23ff69a:	b538      	push	{r3, r4, r5, lr}
 23ff69c:	4603      	mov	r3, r0
 23ff69e:	460c      	mov	r4, r1
 23ff6a0:	b969      	cbnz	r1, 23ff6be <strrchr+0x24>
 23ff6a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff6a6:	f7ff bfa7 	b.w	23ff5f8 <strchr>
 23ff6aa:	1c43      	adds	r3, r0, #1
 23ff6ac:	4605      	mov	r5, r0
 23ff6ae:	4621      	mov	r1, r4
 23ff6b0:	4618      	mov	r0, r3
 23ff6b2:	f7ff ffa1 	bl	23ff5f8 <strchr>
 23ff6b6:	2800      	cmp	r0, #0
 23ff6b8:	d1f7      	bne.n	23ff6aa <strrchr+0x10>
 23ff6ba:	4628      	mov	r0, r5
 23ff6bc:	bd38      	pop	{r3, r4, r5, pc}
 23ff6be:	2500      	movs	r5, #0
 23ff6c0:	e7f5      	b.n	23ff6ae <strrchr+0x14>
	...

023ff6c4 <_strtol_l.constprop.0>:
 23ff6c4:	2b01      	cmp	r3, #1
 23ff6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff6ca:	d001      	beq.n	23ff6d0 <_strtol_l.constprop.0+0xc>
 23ff6cc:	2b24      	cmp	r3, #36	; 0x24
 23ff6ce:	d906      	bls.n	23ff6de <_strtol_l.constprop.0+0x1a>
 23ff6d0:	f7fd faba 	bl	23fcc48 <__errno>
 23ff6d4:	2316      	movs	r3, #22
 23ff6d6:	6003      	str	r3, [r0, #0]
 23ff6d8:	2000      	movs	r0, #0
 23ff6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff6de:	460d      	mov	r5, r1
 23ff6e0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff7c4 <_strtol_l.constprop.0+0x100>
 23ff6e4:	462e      	mov	r6, r5
 23ff6e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff6ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff6ee:	f017 0708 	ands.w	r7, r7, #8
 23ff6f2:	d1f7      	bne.n	23ff6e4 <_strtol_l.constprop.0+0x20>
 23ff6f4:	2c2d      	cmp	r4, #45	; 0x2d
 23ff6f6:	d132      	bne.n	23ff75e <_strtol_l.constprop.0+0x9a>
 23ff6f8:	782c      	ldrb	r4, [r5, #0]
 23ff6fa:	2701      	movs	r7, #1
 23ff6fc:	1cb5      	adds	r5, r6, #2
 23ff6fe:	2b00      	cmp	r3, #0
 23ff700:	d05b      	beq.n	23ff7ba <_strtol_l.constprop.0+0xf6>
 23ff702:	2b10      	cmp	r3, #16
 23ff704:	d109      	bne.n	23ff71a <_strtol_l.constprop.0+0x56>
 23ff706:	2c30      	cmp	r4, #48	; 0x30
 23ff708:	d107      	bne.n	23ff71a <_strtol_l.constprop.0+0x56>
 23ff70a:	782c      	ldrb	r4, [r5, #0]
 23ff70c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff710:	2c58      	cmp	r4, #88	; 0x58
 23ff712:	d14d      	bne.n	23ff7b0 <_strtol_l.constprop.0+0xec>
 23ff714:	786c      	ldrb	r4, [r5, #1]
 23ff716:	2310      	movs	r3, #16
 23ff718:	3502      	adds	r5, #2
 23ff71a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff71e:	f04f 0c00 	mov.w	ip, #0
 23ff722:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff726:	4666      	mov	r6, ip
 23ff728:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff72c:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff730:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff734:	f1be 0f09 	cmp.w	lr, #9
 23ff738:	d816      	bhi.n	23ff768 <_strtol_l.constprop.0+0xa4>
 23ff73a:	4674      	mov	r4, lr
 23ff73c:	42a3      	cmp	r3, r4
 23ff73e:	dd24      	ble.n	23ff78a <_strtol_l.constprop.0+0xc6>
 23ff740:	f1bc 0f00 	cmp.w	ip, #0
 23ff744:	db1e      	blt.n	23ff784 <_strtol_l.constprop.0+0xc0>
 23ff746:	45b1      	cmp	r9, r6
 23ff748:	d31c      	bcc.n	23ff784 <_strtol_l.constprop.0+0xc0>
 23ff74a:	d101      	bne.n	23ff750 <_strtol_l.constprop.0+0x8c>
 23ff74c:	45a2      	cmp	sl, r4
 23ff74e:	db19      	blt.n	23ff784 <_strtol_l.constprop.0+0xc0>
 23ff750:	fb06 4603 	mla	r6, r6, r3, r4
 23ff754:	f04f 0c01 	mov.w	ip, #1
 23ff758:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff75c:	e7e8      	b.n	23ff730 <_strtol_l.constprop.0+0x6c>
 23ff75e:	2c2b      	cmp	r4, #43	; 0x2b
 23ff760:	bf04      	itt	eq
 23ff762:	782c      	ldrbeq	r4, [r5, #0]
 23ff764:	1cb5      	addeq	r5, r6, #2
 23ff766:	e7ca      	b.n	23ff6fe <_strtol_l.constprop.0+0x3a>
 23ff768:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff76c:	f1be 0f19 	cmp.w	lr, #25
 23ff770:	d801      	bhi.n	23ff776 <_strtol_l.constprop.0+0xb2>
 23ff772:	3c37      	subs	r4, #55	; 0x37
 23ff774:	e7e2      	b.n	23ff73c <_strtol_l.constprop.0+0x78>
 23ff776:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff77a:	f1be 0f19 	cmp.w	lr, #25
 23ff77e:	d804      	bhi.n	23ff78a <_strtol_l.constprop.0+0xc6>
 23ff780:	3c57      	subs	r4, #87	; 0x57
 23ff782:	e7db      	b.n	23ff73c <_strtol_l.constprop.0+0x78>
 23ff784:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff788:	e7e6      	b.n	23ff758 <_strtol_l.constprop.0+0x94>
 23ff78a:	f1bc 0f00 	cmp.w	ip, #0
 23ff78e:	da05      	bge.n	23ff79c <_strtol_l.constprop.0+0xd8>
 23ff790:	2322      	movs	r3, #34	; 0x22
 23ff792:	4646      	mov	r6, r8
 23ff794:	6003      	str	r3, [r0, #0]
 23ff796:	b942      	cbnz	r2, 23ff7aa <_strtol_l.constprop.0+0xe6>
 23ff798:	4630      	mov	r0, r6
 23ff79a:	e79e      	b.n	23ff6da <_strtol_l.constprop.0+0x16>
 23ff79c:	b107      	cbz	r7, 23ff7a0 <_strtol_l.constprop.0+0xdc>
 23ff79e:	4276      	negs	r6, r6
 23ff7a0:	2a00      	cmp	r2, #0
 23ff7a2:	d0f9      	beq.n	23ff798 <_strtol_l.constprop.0+0xd4>
 23ff7a4:	f1bc 0f00 	cmp.w	ip, #0
 23ff7a8:	d000      	beq.n	23ff7ac <_strtol_l.constprop.0+0xe8>
 23ff7aa:	1e69      	subs	r1, r5, #1
 23ff7ac:	6011      	str	r1, [r2, #0]
 23ff7ae:	e7f3      	b.n	23ff798 <_strtol_l.constprop.0+0xd4>
 23ff7b0:	2430      	movs	r4, #48	; 0x30
 23ff7b2:	2b00      	cmp	r3, #0
 23ff7b4:	d1b1      	bne.n	23ff71a <_strtol_l.constprop.0+0x56>
 23ff7b6:	2308      	movs	r3, #8
 23ff7b8:	e7af      	b.n	23ff71a <_strtol_l.constprop.0+0x56>
 23ff7ba:	2c30      	cmp	r4, #48	; 0x30
 23ff7bc:	d0a5      	beq.n	23ff70a <_strtol_l.constprop.0+0x46>
 23ff7be:	230a      	movs	r3, #10
 23ff7c0:	e7ab      	b.n	23ff71a <_strtol_l.constprop.0+0x56>
 23ff7c2:	bf00      	nop
 23ff7c4:	023ffed3 	.word	0x023ffed3

023ff7c8 <strtol>:
 23ff7c8:	4613      	mov	r3, r2
 23ff7ca:	460a      	mov	r2, r1
 23ff7cc:	4601      	mov	r1, r0
 23ff7ce:	4802      	ldr	r0, [pc, #8]	; (23ff7d8 <strtol+0x10>)
 23ff7d0:	6800      	ldr	r0, [r0, #0]
 23ff7d2:	f7ff bf77 	b.w	23ff6c4 <_strtol_l.constprop.0>
 23ff7d6:	bf00      	nop
 23ff7d8:	1007ad18 	.word	0x1007ad18

023ff7dc <__register_exitproc>:
 23ff7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff7e0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff8a0 <__register_exitproc+0xc4>
 23ff7e4:	4606      	mov	r6, r0
 23ff7e6:	461f      	mov	r7, r3
 23ff7e8:	460d      	mov	r5, r1
 23ff7ea:	f8d8 0000 	ldr.w	r0, [r8]
 23ff7ee:	4691      	mov	r9, r2
 23ff7f0:	f000 f858 	bl	23ff8a4 <__retarget_lock_acquire_recursive>
 23ff7f4:	4b26      	ldr	r3, [pc, #152]	; (23ff890 <__register_exitproc+0xb4>)
 23ff7f6:	681c      	ldr	r4, [r3, #0]
 23ff7f8:	b934      	cbnz	r4, 23ff808 <__register_exitproc+0x2c>
 23ff7fa:	4c26      	ldr	r4, [pc, #152]	; (23ff894 <__register_exitproc+0xb8>)
 23ff7fc:	601c      	str	r4, [r3, #0]
 23ff7fe:	4b26      	ldr	r3, [pc, #152]	; (23ff898 <__register_exitproc+0xbc>)
 23ff800:	b113      	cbz	r3, 23ff808 <__register_exitproc+0x2c>
 23ff802:	681b      	ldr	r3, [r3, #0]
 23ff804:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff808:	6863      	ldr	r3, [r4, #4]
 23ff80a:	2b1f      	cmp	r3, #31
 23ff80c:	dd07      	ble.n	23ff81e <__register_exitproc+0x42>
 23ff80e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff812:	f000 f849 	bl	23ff8a8 <__retarget_lock_release_recursive>
 23ff816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff81e:	b35e      	cbz	r6, 23ff878 <__register_exitproc+0x9c>
 23ff820:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff824:	b988      	cbnz	r0, 23ff84a <__register_exitproc+0x6e>
 23ff826:	4b1d      	ldr	r3, [pc, #116]	; (23ff89c <__register_exitproc+0xc0>)
 23ff828:	b923      	cbnz	r3, 23ff834 <__register_exitproc+0x58>
 23ff82a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff82e:	f000 f83a 	bl	23ff8a6 <__retarget_lock_release>
 23ff832:	e7f0      	b.n	23ff816 <__register_exitproc+0x3a>
 23ff834:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff838:	f7fd f9a4 	bl	23fcb84 <malloc>
 23ff83c:	2800      	cmp	r0, #0
 23ff83e:	d0f4      	beq.n	23ff82a <__register_exitproc+0x4e>
 23ff840:	2300      	movs	r3, #0
 23ff842:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff846:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff84a:	6863      	ldr	r3, [r4, #4]
 23ff84c:	2201      	movs	r2, #1
 23ff84e:	2e02      	cmp	r6, #2
 23ff850:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff854:	fa02 f203 	lsl.w	r2, r2, r3
 23ff858:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff85c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff860:	ea43 0302 	orr.w	r3, r3, r2
 23ff864:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff868:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff86c:	bf02      	ittt	eq
 23ff86e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff872:	4313      	orreq	r3, r2
 23ff874:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff878:	6863      	ldr	r3, [r4, #4]
 23ff87a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff87e:	1c5a      	adds	r2, r3, #1
 23ff880:	3302      	adds	r3, #2
 23ff882:	6062      	str	r2, [r4, #4]
 23ff884:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff888:	f000 f80e 	bl	23ff8a8 <__retarget_lock_release_recursive>
 23ff88c:	2000      	movs	r0, #0
 23ff88e:	e7c4      	b.n	23ff81a <__register_exitproc+0x3e>
 23ff890:	1007afe0 	.word	0x1007afe0
 23ff894:	1007af54 	.word	0x1007af54
 23ff898:	00000000 	.word	0x00000000
 23ff89c:	023fcb85 	.word	0x023fcb85
 23ff8a0:	1007ad7c 	.word	0x1007ad7c

023ff8a4 <__retarget_lock_acquire_recursive>:
 23ff8a4:	4770      	bx	lr

023ff8a6 <__retarget_lock_release>:
 23ff8a6:	4770      	bx	lr

023ff8a8 <__retarget_lock_release_recursive>:
 23ff8a8:	4770      	bx	lr
	...

023ff8ac <dynalib_user>:
 23ff8ac:	ad71 023f ad99 023f ad9d 023f 0000 0000     q.?...?...?.....
 23ff8bc:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ff8cc:	7574 6c61 5200 7365 7465 4320 756f 746e     tual.Reset Count
 23ff8dc:	0073 7453 706f 4d20 7365 6173 6567 0073     s.Stop Messages.
 23ff8ec:	6553 646e 5320 6174 7574 0073 7953 7473     Send Status.Syst
 23ff8fc:	6d65 5320 6174 7574 0073 6425 5700 7461     em Status.%d.Wat
 23ff90c:	7265 4c20 7665 6c65 5000 6d75 2070 6f43     er Level.Pump Co
 23ff91c:	6e75 0074 6554 706d 7265 7461 7275 0065     unt.Temperature.
 23ff92c:	7548 696d 6964 7974 5400 6d69 0065 7453     Humidity.Time.St
 23ff93c:	7461 7375 4d20 7365 6173 6567 4300 7275     atus Message.Cur
 23ff94c:	6572 746e 7620 6c61 6575 4120 3a20 2520     rent value A : %
 23ff95c:	3630 342e 2066 000a 7550 706d 6a20 7375     06.4f ..Pump jus
 23ff96c:	2074 7574 6e72 6465 6f20 006e 7550 706d     t turned on.Pump
 23ff97c:	6920 2073 7473 6c69 206c 6e6f 4600 6f6c      is still on.Flo
 23ff98c:	7461 7320 7574 6b63 4520 6576 746e 4600     at stuck Event.F
 23ff99c:	6f6c 7461 7320 7574 6b63 4520 6576 746e     loat stuck Event
 23ff9ac:	5220 7365 7465 4800 6769 2068 7543 7272      Reset.High Curr
 23ff9bc:	6e65 2074 7645 6e65 0074 6948 6867 4320     ent Event.High C
 23ff9cc:	7275 6572 746e 4520 6576 746e 5220 7365     urrent Event Res
 23ff9dc:	7465 4900 4332 4520 7272 726f 5220 7365     et.I2C Error Res
 23ff9ec:	7465 5400 6d65 6570 6172 7574 6572 c220     et.Temperature .
 23ff9fc:	46b0 3a20 2520 322e 2066 000a 6552 616c     .F : %.2f ..Rela
 23ffa0c:	6974 6576 4820 6d75 6469 7469 2079 203a     tive Humidity : 
 23ffa1c:	2e25 6632 0a20 7400 6d65 6570 6172 7574     %.2f ..temperatu
 23ffa2c:	6572 6f20 7475 6973 6564 6f20 2066 6977     re outside of wi
 23ffa3c:	646e 776f 5400 6d65 6570 6172 7574 6572     ndow.Temperature
 23ffa4c:	5720 7261 696e 676e 5400 6d65 6570 6172      Warning.Tempera
 23ffa5c:	7574 6572 4520 6576 746e 5220 7365 7465     ture Event Reset
 23ffa6c:	6800 6769 2068 7568 696d 6964 7974 6520     .high humidity e
 23ffa7c:	6576 746e 4800 6d75 6469 7469 2079 6157     vent.Humidity Wa
 23ffa8c:	6e72 6e69 0067 7548 696d 6964 7974 4520     rning.Humidity E
 23ffa9c:	6576 746e 5220 7365 7465 4900 4332 4220     vent Reset.I2C B
 23ffaac:	7375 4520 7272 726f 7400 6d65 2f70 7568     us Error.temp/hu
 23ffabc:	646d 7469 2079 6573 736e 726f 6520 7272     mdity sensor err
 23ffacc:	726f 5300 6e65 6f73 2072 6e69 4920 204e     or.Sensor in IN 
 23ffadc:	203a 2e25 6632 0a20 6800 6769 2068 6177     : %.2f ..high wa
 23ffaec:	6574 2072 7665 6e65 0074 6157 6574 2072     ter event.Water 
 23ffafc:	6157 6e72 6e69 0067 6157 6574 2072 6157     Warning.Water Wa
 23ffb0c:	6e72 6e69 2067 6552 6573 0074               rning Reset.

023ffb18 <_ZTVN5spark10LogHandlerE>:
	...
 23ffb28:	adb9 023f ade1 023f                         ..?...?.

023ffb30 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffb38:	aea1 023f aed5 023f e53d 023f e6e5 023f     ..?...?.=.?...?.

023ffb48 <_ZTV16JsonWriterStaticILj256EE>:
	...
 23ffb50:	ae55 023f ae69 023f 755c 3025 5834 2500     U.?.i.?.\u%04X.%
 23ffb60:	2a2e 0066 6625 0000                         .*f.%f..

023ffb68 <_ZTV10JsonBuffer>:
	...
 23ffb70:	b8f9 023f b915 023f                         ..?...?.

023ffb78 <_ZTV10JsonWriter>:
	...
 23ffb80:	b929 023f b93d 023f                         ).?.=.?.

023ffb88 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffb90:	cd79 023f cd7f 023f cdbd 023f cd8d 023f     y.?...?...?...?.
 23ffba0:	cd7b 023f                                   {.?.

023ffba4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffbac:	d34f 023f d345 023f d33b 023f d331 023f     O.?.E.?.;.?.1.?.
 23ffbbc:	d325 023f d319 023f e8d1 023f e8d9 023f     %.?...?...?...?.
 23ffbcc:	d30d 023f d305 023f d2fb 023f d2f1 023f     ..?...?...?...?.
 23ffbdc:	e909 023f                                   ..?.

023ffbe0 <_ZTV7TwoWire>:
	...
 23ffbe8:	d36d 023f d3b7 023f d38f 023f d36f 023f     m.?...?...?.o.?.
 23ffbf8:	d397 023f d39f 023f d3a7 023f d3af 023f     ..?...?...?...?.

023ffc08 <_ZTV9IPAddress>:
	...
 23ffc10:	d487 023f d477 023f d479 023f 7525 7500     ..?.w.?.y.?.%u.u
 23ffc20:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
 23ffc30:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
 23ffc40:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 23ffc50:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 23ffc60:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 23ffc70:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 23ffc80:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
 23ffc90:	6961 006c                                   ail.

023ffc94 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc9c:	d935 023f d95b 023f d919 023f d597 023f     5.?.[.?...?...?.

023ffcac <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffcb4:	dde9 023f de01 023f e53d 023f e6e5 023f     ..?...?.=.?...?.

023ffcc4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffccc:	de15 023f de29 023f e71d 023f d921 023f     ..?.).?...?.!.?.

023ffcdc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffce4:	d933 023f d969 023f e4a1 023f d923 023f     3.?.i.?...?.#.?.

023ffcf4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcfc:	d931 023f d977 023f dd51 023f d999 023f     1.?.w.?.Q.?...?.

023ffd0c <_ZTVN5spark12NetworkClassE>:
	...
 23ffd14:	e891 023f e89b 023f e8a5 023f e8af 023f     ..?...?...?...?.
 23ffd24:	e8b9 023f e8c5 023f e8d1 023f e8d9 023f     ..?...?...?...?.
 23ffd34:	e8e1 023f e8ed 023f e8f5 023f e8ff 023f     ..?...?...?...?.
 23ffd44:	e909 023f                                   ..?.

023ffd48 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffd48:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffd58:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffd68:	6d69 0065                                   ime.

023ffd6c <_ZTV11USARTSerial>:
	...
 23ffd74:	ee39 023f eea5 023f ee7d 023f e9f5 023f     9.?...?.}.?...?.
 23ffd84:	ee4d 023f ee69 023f ee5b 023f ee77 023f     M.?.i.?.[.?.w.?.
 23ffd94:	ee3b 023f ee3f 023f                         ;.?.?.?.

023ffd9c <_ZTV9USBSerial>:
	...
 23ffda4:	eefd 023f ef65 023f ef3b 023f e9f5 023f     ..?.e.?.;.?...?.
 23ffdb4:	ef2d 023f eeff 023f ef0f 023f ef5f 023f     -.?...?...?._.?.
 23ffdc4:	ef1f 023f eef7 023f                         ..?...?.

023ffdcc <_ZTVN5spark9WiFiClassE>:
	...
 23ffdd4:	f063 023f f059 023f f04f 023f f005 023f     c.?.Y.?.O.?...?.
 23ffde4:	f043 023f f037 023f e8d1 023f e8d9 023f     C.?.7.?...?...?.
 23ffdf4:	f02b 023f f023 023f f019 023f f00f 023f     +.?.#.?...?...?.
 23ffe04:	e909 023f                                   ..?.

023ffe08 <_ZSt7nothrow>:
 23ffe08:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 23ffe18:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

023ffe29 <day_name.1>:
 23ffe29:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 23ffe39:	6972 6153                                    riSat

023ffe3e <mon_name.0>:
 23ffe3e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 23ffe4e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 23ffe5e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
 23ffe6e:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
 23ffe7e:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 23ffe8e:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 23ffe9e:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
 23ffeae:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 23ffebe:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 23ffece:	2e64 0063                                   d.c.

023ffed2 <_ctype_>:
 23ffed2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffee2:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffef2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23fff02:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff12:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff22:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff32:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff42:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff52:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffd3 <link_const_data_end>:
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fb701 	.word	0x023fb701
 23fffd8:	023fcd69 	.word	0x023fcd69
 23fffdc:	023fd359 	.word	0x023fd359
 23fffe0:	023fe52d 	.word	0x023fe52d
 23fffe4:	023fe9e1 	.word	0x023fe9e1
 23fffe8:	023fea89 	.word	0x023fea89
 23fffec:	023fed11 	.word	0x023fed11
 23ffff0:	023fee25 	.word	0x023fee25
 23ffff4:	023ff06d 	.word	0x023ff06d
